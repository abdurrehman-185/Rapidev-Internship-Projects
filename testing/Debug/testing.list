
testing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003960  080001ac  080001ac  000011ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08003b0c  08003b0c  00004b0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003b54  08003b54  0000500c  2**0
                  CONTENTS
  4 .ARM          00000008  08003b54  08003b54  00004b54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003b5c  08003b5c  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003b5c  08003b5c  00004b5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003b60  08003b60  00004b60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003b64  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005b4  2000000c  08003b70  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005c0  08003b70  000055c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ef82  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021c9  00000000  00000000  00013fbe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cb8  00000000  00000000  00016188  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009bb  00000000  00000000  00016e40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028661  00000000  00000000  000177fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000eec6  00000000  00000000  0003fe5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f67db  00000000  00000000  0004ed22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001454fd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003470  00000000  00000000  00145540  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000051  00000000  00000000  001489b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	@ (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	@ (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000000c 	.word	0x2000000c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08003af4 	.word	0x08003af4

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	@ (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	@ (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	@ (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000010 	.word	0x20000010
 80001e8:	08003af4 	.word	0x08003af4

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b96a 	b.w	80004d8 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	460c      	mov	r4, r1
 8000224:	2b00      	cmp	r3, #0
 8000226:	d14e      	bne.n	80002c6 <__udivmoddi4+0xaa>
 8000228:	4694      	mov	ip, r2
 800022a:	458c      	cmp	ip, r1
 800022c:	4686      	mov	lr, r0
 800022e:	fab2 f282 	clz	r2, r2
 8000232:	d962      	bls.n	80002fa <__udivmoddi4+0xde>
 8000234:	b14a      	cbz	r2, 800024a <__udivmoddi4+0x2e>
 8000236:	f1c2 0320 	rsb	r3, r2, #32
 800023a:	4091      	lsls	r1, r2
 800023c:	fa20 f303 	lsr.w	r3, r0, r3
 8000240:	fa0c fc02 	lsl.w	ip, ip, r2
 8000244:	4319      	orrs	r1, r3
 8000246:	fa00 fe02 	lsl.w	lr, r0, r2
 800024a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800024e:	fa1f f68c 	uxth.w	r6, ip
 8000252:	fbb1 f4f7 	udiv	r4, r1, r7
 8000256:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800025a:	fb07 1114 	mls	r1, r7, r4, r1
 800025e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000262:	fb04 f106 	mul.w	r1, r4, r6
 8000266:	4299      	cmp	r1, r3
 8000268:	d90a      	bls.n	8000280 <__udivmoddi4+0x64>
 800026a:	eb1c 0303 	adds.w	r3, ip, r3
 800026e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000272:	f080 8112 	bcs.w	800049a <__udivmoddi4+0x27e>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 810f 	bls.w	800049a <__udivmoddi4+0x27e>
 800027c:	3c02      	subs	r4, #2
 800027e:	4463      	add	r3, ip
 8000280:	1a59      	subs	r1, r3, r1
 8000282:	fa1f f38e 	uxth.w	r3, lr
 8000286:	fbb1 f0f7 	udiv	r0, r1, r7
 800028a:	fb07 1110 	mls	r1, r7, r0, r1
 800028e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000292:	fb00 f606 	mul.w	r6, r0, r6
 8000296:	429e      	cmp	r6, r3
 8000298:	d90a      	bls.n	80002b0 <__udivmoddi4+0x94>
 800029a:	eb1c 0303 	adds.w	r3, ip, r3
 800029e:	f100 31ff 	add.w	r1, r0, #4294967295
 80002a2:	f080 80fc 	bcs.w	800049e <__udivmoddi4+0x282>
 80002a6:	429e      	cmp	r6, r3
 80002a8:	f240 80f9 	bls.w	800049e <__udivmoddi4+0x282>
 80002ac:	4463      	add	r3, ip
 80002ae:	3802      	subs	r0, #2
 80002b0:	1b9b      	subs	r3, r3, r6
 80002b2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002b6:	2100      	movs	r1, #0
 80002b8:	b11d      	cbz	r5, 80002c2 <__udivmoddi4+0xa6>
 80002ba:	40d3      	lsrs	r3, r2
 80002bc:	2200      	movs	r2, #0
 80002be:	e9c5 3200 	strd	r3, r2, [r5]
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d905      	bls.n	80002d6 <__udivmoddi4+0xba>
 80002ca:	b10d      	cbz	r5, 80002d0 <__udivmoddi4+0xb4>
 80002cc:	e9c5 0100 	strd	r0, r1, [r5]
 80002d0:	2100      	movs	r1, #0
 80002d2:	4608      	mov	r0, r1
 80002d4:	e7f5      	b.n	80002c2 <__udivmoddi4+0xa6>
 80002d6:	fab3 f183 	clz	r1, r3
 80002da:	2900      	cmp	r1, #0
 80002dc:	d146      	bne.n	800036c <__udivmoddi4+0x150>
 80002de:	42a3      	cmp	r3, r4
 80002e0:	d302      	bcc.n	80002e8 <__udivmoddi4+0xcc>
 80002e2:	4290      	cmp	r0, r2
 80002e4:	f0c0 80f0 	bcc.w	80004c8 <__udivmoddi4+0x2ac>
 80002e8:	1a86      	subs	r6, r0, r2
 80002ea:	eb64 0303 	sbc.w	r3, r4, r3
 80002ee:	2001      	movs	r0, #1
 80002f0:	2d00      	cmp	r5, #0
 80002f2:	d0e6      	beq.n	80002c2 <__udivmoddi4+0xa6>
 80002f4:	e9c5 6300 	strd	r6, r3, [r5]
 80002f8:	e7e3      	b.n	80002c2 <__udivmoddi4+0xa6>
 80002fa:	2a00      	cmp	r2, #0
 80002fc:	f040 8090 	bne.w	8000420 <__udivmoddi4+0x204>
 8000300:	eba1 040c 	sub.w	r4, r1, ip
 8000304:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000308:	fa1f f78c 	uxth.w	r7, ip
 800030c:	2101      	movs	r1, #1
 800030e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000312:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000316:	fb08 4416 	mls	r4, r8, r6, r4
 800031a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800031e:	fb07 f006 	mul.w	r0, r7, r6
 8000322:	4298      	cmp	r0, r3
 8000324:	d908      	bls.n	8000338 <__udivmoddi4+0x11c>
 8000326:	eb1c 0303 	adds.w	r3, ip, r3
 800032a:	f106 34ff 	add.w	r4, r6, #4294967295
 800032e:	d202      	bcs.n	8000336 <__udivmoddi4+0x11a>
 8000330:	4298      	cmp	r0, r3
 8000332:	f200 80cd 	bhi.w	80004d0 <__udivmoddi4+0x2b4>
 8000336:	4626      	mov	r6, r4
 8000338:	1a1c      	subs	r4, r3, r0
 800033a:	fa1f f38e 	uxth.w	r3, lr
 800033e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000342:	fb08 4410 	mls	r4, r8, r0, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb00 f707 	mul.w	r7, r0, r7
 800034e:	429f      	cmp	r7, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x148>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f100 34ff 	add.w	r4, r0, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x146>
 800035c:	429f      	cmp	r7, r3
 800035e:	f200 80b0 	bhi.w	80004c2 <__udivmoddi4+0x2a6>
 8000362:	4620      	mov	r0, r4
 8000364:	1bdb      	subs	r3, r3, r7
 8000366:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800036a:	e7a5      	b.n	80002b8 <__udivmoddi4+0x9c>
 800036c:	f1c1 0620 	rsb	r6, r1, #32
 8000370:	408b      	lsls	r3, r1
 8000372:	fa22 f706 	lsr.w	r7, r2, r6
 8000376:	431f      	orrs	r7, r3
 8000378:	fa20 fc06 	lsr.w	ip, r0, r6
 800037c:	fa04 f301 	lsl.w	r3, r4, r1
 8000380:	ea43 030c 	orr.w	r3, r3, ip
 8000384:	40f4      	lsrs	r4, r6
 8000386:	fa00 f801 	lsl.w	r8, r0, r1
 800038a:	0c38      	lsrs	r0, r7, #16
 800038c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000390:	fbb4 fef0 	udiv	lr, r4, r0
 8000394:	fa1f fc87 	uxth.w	ip, r7
 8000398:	fb00 441e 	mls	r4, r0, lr, r4
 800039c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003a0:	fb0e f90c 	mul.w	r9, lr, ip
 80003a4:	45a1      	cmp	r9, r4
 80003a6:	fa02 f201 	lsl.w	r2, r2, r1
 80003aa:	d90a      	bls.n	80003c2 <__udivmoddi4+0x1a6>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003b2:	f080 8084 	bcs.w	80004be <__udivmoddi4+0x2a2>
 80003b6:	45a1      	cmp	r9, r4
 80003b8:	f240 8081 	bls.w	80004be <__udivmoddi4+0x2a2>
 80003bc:	f1ae 0e02 	sub.w	lr, lr, #2
 80003c0:	443c      	add	r4, r7
 80003c2:	eba4 0409 	sub.w	r4, r4, r9
 80003c6:	fa1f f983 	uxth.w	r9, r3
 80003ca:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ce:	fb00 4413 	mls	r4, r0, r3, r4
 80003d2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003d6:	fb03 fc0c 	mul.w	ip, r3, ip
 80003da:	45a4      	cmp	ip, r4
 80003dc:	d907      	bls.n	80003ee <__udivmoddi4+0x1d2>
 80003de:	193c      	adds	r4, r7, r4
 80003e0:	f103 30ff 	add.w	r0, r3, #4294967295
 80003e4:	d267      	bcs.n	80004b6 <__udivmoddi4+0x29a>
 80003e6:	45a4      	cmp	ip, r4
 80003e8:	d965      	bls.n	80004b6 <__udivmoddi4+0x29a>
 80003ea:	3b02      	subs	r3, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003f2:	fba0 9302 	umull	r9, r3, r0, r2
 80003f6:	eba4 040c 	sub.w	r4, r4, ip
 80003fa:	429c      	cmp	r4, r3
 80003fc:	46ce      	mov	lr, r9
 80003fe:	469c      	mov	ip, r3
 8000400:	d351      	bcc.n	80004a6 <__udivmoddi4+0x28a>
 8000402:	d04e      	beq.n	80004a2 <__udivmoddi4+0x286>
 8000404:	b155      	cbz	r5, 800041c <__udivmoddi4+0x200>
 8000406:	ebb8 030e 	subs.w	r3, r8, lr
 800040a:	eb64 040c 	sbc.w	r4, r4, ip
 800040e:	fa04 f606 	lsl.w	r6, r4, r6
 8000412:	40cb      	lsrs	r3, r1
 8000414:	431e      	orrs	r6, r3
 8000416:	40cc      	lsrs	r4, r1
 8000418:	e9c5 6400 	strd	r6, r4, [r5]
 800041c:	2100      	movs	r1, #0
 800041e:	e750      	b.n	80002c2 <__udivmoddi4+0xa6>
 8000420:	f1c2 0320 	rsb	r3, r2, #32
 8000424:	fa20 f103 	lsr.w	r1, r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa24 f303 	lsr.w	r3, r4, r3
 8000430:	4094      	lsls	r4, r2
 8000432:	430c      	orrs	r4, r1
 8000434:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000438:	fa00 fe02 	lsl.w	lr, r0, r2
 800043c:	fa1f f78c 	uxth.w	r7, ip
 8000440:	fbb3 f0f8 	udiv	r0, r3, r8
 8000444:	fb08 3110 	mls	r1, r8, r0, r3
 8000448:	0c23      	lsrs	r3, r4, #16
 800044a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044e:	fb00 f107 	mul.w	r1, r0, r7
 8000452:	4299      	cmp	r1, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x24c>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 36ff 	add.w	r6, r0, #4294967295
 800045e:	d22c      	bcs.n	80004ba <__udivmoddi4+0x29e>
 8000460:	4299      	cmp	r1, r3
 8000462:	d92a      	bls.n	80004ba <__udivmoddi4+0x29e>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1a5b      	subs	r3, r3, r1
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000470:	fb08 3311 	mls	r3, r8, r1, r3
 8000474:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000478:	fb01 f307 	mul.w	r3, r1, r7
 800047c:	42a3      	cmp	r3, r4
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x276>
 8000480:	eb1c 0404 	adds.w	r4, ip, r4
 8000484:	f101 36ff 	add.w	r6, r1, #4294967295
 8000488:	d213      	bcs.n	80004b2 <__udivmoddi4+0x296>
 800048a:	42a3      	cmp	r3, r4
 800048c:	d911      	bls.n	80004b2 <__udivmoddi4+0x296>
 800048e:	3902      	subs	r1, #2
 8000490:	4464      	add	r4, ip
 8000492:	1ae4      	subs	r4, r4, r3
 8000494:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000498:	e739      	b.n	800030e <__udivmoddi4+0xf2>
 800049a:	4604      	mov	r4, r0
 800049c:	e6f0      	b.n	8000280 <__udivmoddi4+0x64>
 800049e:	4608      	mov	r0, r1
 80004a0:	e706      	b.n	80002b0 <__udivmoddi4+0x94>
 80004a2:	45c8      	cmp	r8, r9
 80004a4:	d2ae      	bcs.n	8000404 <__udivmoddi4+0x1e8>
 80004a6:	ebb9 0e02 	subs.w	lr, r9, r2
 80004aa:	eb63 0c07 	sbc.w	ip, r3, r7
 80004ae:	3801      	subs	r0, #1
 80004b0:	e7a8      	b.n	8000404 <__udivmoddi4+0x1e8>
 80004b2:	4631      	mov	r1, r6
 80004b4:	e7ed      	b.n	8000492 <__udivmoddi4+0x276>
 80004b6:	4603      	mov	r3, r0
 80004b8:	e799      	b.n	80003ee <__udivmoddi4+0x1d2>
 80004ba:	4630      	mov	r0, r6
 80004bc:	e7d4      	b.n	8000468 <__udivmoddi4+0x24c>
 80004be:	46d6      	mov	lr, sl
 80004c0:	e77f      	b.n	80003c2 <__udivmoddi4+0x1a6>
 80004c2:	4463      	add	r3, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e74d      	b.n	8000364 <__udivmoddi4+0x148>
 80004c8:	4606      	mov	r6, r0
 80004ca:	4623      	mov	r3, r4
 80004cc:	4608      	mov	r0, r1
 80004ce:	e70f      	b.n	80002f0 <__udivmoddi4+0xd4>
 80004d0:	3e02      	subs	r6, #2
 80004d2:	4463      	add	r3, ip
 80004d4:	e730      	b.n	8000338 <__udivmoddi4+0x11c>
 80004d6:	bf00      	nop

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004e0:	f000 faf9 	bl	8000ad6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e4:	f000 f808 	bl	80004f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e8:	f000 f8c6 	bl	8000678 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 80004ec:	f000 f868 	bl	80005c0 <MX_LPUART1_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80004f0:	f000 f894 	bl	800061c <MX_USB_OTG_FS_PCD_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004f4:	bf00      	nop
 80004f6:	e7fd      	b.n	80004f4 <main+0x18>

080004f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b096      	sub	sp, #88	@ 0x58
 80004fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004fe:	f107 0314 	add.w	r3, r7, #20
 8000502:	2244      	movs	r2, #68	@ 0x44
 8000504:	2100      	movs	r1, #0
 8000506:	4618      	mov	r0, r3
 8000508:	f003 fac8 	bl	8003a9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800050c:	463b      	mov	r3, r7
 800050e:	2200      	movs	r2, #0
 8000510:	601a      	str	r2, [r3, #0]
 8000512:	605a      	str	r2, [r3, #4]
 8000514:	609a      	str	r2, [r3, #8]
 8000516:	60da      	str	r2, [r3, #12]
 8000518:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800051a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800051e:	f000 ff69 	bl	80013f4 <HAL_PWREx_ControlVoltageScaling>
 8000522:	4603      	mov	r3, r0
 8000524:	2b00      	cmp	r3, #0
 8000526:	d001      	beq.n	800052c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000528:	f000 f944 	bl	80007b4 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800052c:	f000 ff44 	bl	80013b8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000530:	4b22      	ldr	r3, [pc, #136]	@ (80005bc <SystemClock_Config+0xc4>)
 8000532:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000536:	4a21      	ldr	r2, [pc, #132]	@ (80005bc <SystemClock_Config+0xc4>)
 8000538:	f023 0318 	bic.w	r3, r3, #24
 800053c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000540:	2314      	movs	r3, #20
 8000542:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000544:	2301      	movs	r3, #1
 8000546:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000548:	2301      	movs	r3, #1
 800054a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800054c:	2300      	movs	r3, #0
 800054e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000550:	2360      	movs	r3, #96	@ 0x60
 8000552:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000554:	2302      	movs	r3, #2
 8000556:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000558:	2301      	movs	r3, #1
 800055a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800055c:	2301      	movs	r3, #1
 800055e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 71;
 8000560:	2347      	movs	r3, #71	@ 0x47
 8000562:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000564:	2302      	movs	r3, #2
 8000566:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000568:	2302      	movs	r3, #2
 800056a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV6;
 800056c:	2306      	movs	r3, #6
 800056e:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000570:	f107 0314 	add.w	r3, r7, #20
 8000574:	4618      	mov	r0, r3
 8000576:	f000 ffb3 	bl	80014e0 <HAL_RCC_OscConfig>
 800057a:	4603      	mov	r3, r0
 800057c:	2b00      	cmp	r3, #0
 800057e:	d001      	beq.n	8000584 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000580:	f000 f918 	bl	80007b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000584:	230f      	movs	r3, #15
 8000586:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000588:	2303      	movs	r3, #3
 800058a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800058c:	2300      	movs	r3, #0
 800058e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000590:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000594:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000596:	2300      	movs	r3, #0
 8000598:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800059a:	463b      	mov	r3, r7
 800059c:	2102      	movs	r1, #2
 800059e:	4618      	mov	r0, r3
 80005a0:	f001 fbb8 	bl	8001d14 <HAL_RCC_ClockConfig>
 80005a4:	4603      	mov	r3, r0
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d001      	beq.n	80005ae <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80005aa:	f000 f903 	bl	80007b4 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80005ae:	f002 f8d1 	bl	8002754 <HAL_RCCEx_EnableMSIPLLMode>
}
 80005b2:	bf00      	nop
 80005b4:	3758      	adds	r7, #88	@ 0x58
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bd80      	pop	{r7, pc}
 80005ba:	bf00      	nop
 80005bc:	40021000 	.word	0x40021000

080005c0 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80005c4:	4b12      	ldr	r3, [pc, #72]	@ (8000610 <MX_LPUART1_UART_Init+0x50>)
 80005c6:	4a13      	ldr	r2, [pc, #76]	@ (8000614 <MX_LPUART1_UART_Init+0x54>)
 80005c8:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 80005ca:	4b11      	ldr	r3, [pc, #68]	@ (8000610 <MX_LPUART1_UART_Init+0x50>)
 80005cc:	4a12      	ldr	r2, [pc, #72]	@ (8000618 <MX_LPUART1_UART_Init+0x58>)
 80005ce:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_7B;
 80005d0:	4b0f      	ldr	r3, [pc, #60]	@ (8000610 <MX_LPUART1_UART_Init+0x50>)
 80005d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80005d6:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80005d8:	4b0d      	ldr	r3, [pc, #52]	@ (8000610 <MX_LPUART1_UART_Init+0x50>)
 80005da:	2200      	movs	r2, #0
 80005dc:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80005de:	4b0c      	ldr	r3, [pc, #48]	@ (8000610 <MX_LPUART1_UART_Init+0x50>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80005e4:	4b0a      	ldr	r3, [pc, #40]	@ (8000610 <MX_LPUART1_UART_Init+0x50>)
 80005e6:	220c      	movs	r2, #12
 80005e8:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005ea:	4b09      	ldr	r3, [pc, #36]	@ (8000610 <MX_LPUART1_UART_Init+0x50>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80005f0:	4b07      	ldr	r3, [pc, #28]	@ (8000610 <MX_LPUART1_UART_Init+0x50>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80005f6:	4b06      	ldr	r3, [pc, #24]	@ (8000610 <MX_LPUART1_UART_Init+0x50>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80005fc:	4804      	ldr	r0, [pc, #16]	@ (8000610 <MX_LPUART1_UART_Init+0x50>)
 80005fe:	f002 fa87 	bl	8002b10 <HAL_UART_Init>
 8000602:	4603      	mov	r3, r0
 8000604:	2b00      	cmp	r3, #0
 8000606:	d001      	beq.n	800060c <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 8000608:	f000 f8d4 	bl	80007b4 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800060c:	bf00      	nop
 800060e:	bd80      	pop	{r7, pc}
 8000610:	20000028 	.word	0x20000028
 8000614:	40008000 	.word	0x40008000
 8000618:	00033324 	.word	0x00033324

0800061c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000620:	4b14      	ldr	r3, [pc, #80]	@ (8000674 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000622:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000626:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000628:	4b12      	ldr	r3, [pc, #72]	@ (8000674 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800062a:	2206      	movs	r2, #6
 800062c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800062e:	4b11      	ldr	r3, [pc, #68]	@ (8000674 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000630:	2202      	movs	r2, #2
 8000632:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000634:	4b0f      	ldr	r3, [pc, #60]	@ (8000674 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000636:	2202      	movs	r2, #2
 8000638:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800063a:	4b0e      	ldr	r3, [pc, #56]	@ (8000674 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800063c:	2201      	movs	r2, #1
 800063e:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000640:	4b0c      	ldr	r3, [pc, #48]	@ (8000674 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000642:	2200      	movs	r2, #0
 8000644:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000646:	4b0b      	ldr	r3, [pc, #44]	@ (8000674 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000648:	2200      	movs	r2, #0
 800064a:	625a      	str	r2, [r3, #36]	@ 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 800064c:	4b09      	ldr	r3, [pc, #36]	@ (8000674 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800064e:	2201      	movs	r2, #1
 8000650:	629a      	str	r2, [r3, #40]	@ 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000652:	4b08      	ldr	r3, [pc, #32]	@ (8000674 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000654:	2200      	movs	r2, #0
 8000656:	631a      	str	r2, [r3, #48]	@ 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000658:	4b06      	ldr	r3, [pc, #24]	@ (8000674 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800065a:	2201      	movs	r2, #1
 800065c:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800065e:	4805      	ldr	r0, [pc, #20]	@ (8000674 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000660:	f000 fd62 	bl	8001128 <HAL_PCD_Init>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d001      	beq.n	800066e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800066a:	f000 f8a3 	bl	80007b4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800066e:	bf00      	nop
 8000670:	bd80      	pop	{r7, pc}
 8000672:	bf00      	nop
 8000674:	200000b0 	.word	0x200000b0

08000678 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b08a      	sub	sp, #40	@ 0x28
 800067c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800067e:	f107 0314 	add.w	r3, r7, #20
 8000682:	2200      	movs	r2, #0
 8000684:	601a      	str	r2, [r3, #0]
 8000686:	605a      	str	r2, [r3, #4]
 8000688:	609a      	str	r2, [r3, #8]
 800068a:	60da      	str	r2, [r3, #12]
 800068c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800068e:	4b45      	ldr	r3, [pc, #276]	@ (80007a4 <MX_GPIO_Init+0x12c>)
 8000690:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000692:	4a44      	ldr	r2, [pc, #272]	@ (80007a4 <MX_GPIO_Init+0x12c>)
 8000694:	f043 0304 	orr.w	r3, r3, #4
 8000698:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800069a:	4b42      	ldr	r3, [pc, #264]	@ (80007a4 <MX_GPIO_Init+0x12c>)
 800069c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800069e:	f003 0304 	and.w	r3, r3, #4
 80006a2:	613b      	str	r3, [r7, #16]
 80006a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006a6:	4b3f      	ldr	r3, [pc, #252]	@ (80007a4 <MX_GPIO_Init+0x12c>)
 80006a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006aa:	4a3e      	ldr	r2, [pc, #248]	@ (80007a4 <MX_GPIO_Init+0x12c>)
 80006ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80006b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006b2:	4b3c      	ldr	r3, [pc, #240]	@ (80007a4 <MX_GPIO_Init+0x12c>)
 80006b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80006ba:	60fb      	str	r3, [r7, #12]
 80006bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006be:	4b39      	ldr	r3, [pc, #228]	@ (80007a4 <MX_GPIO_Init+0x12c>)
 80006c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006c2:	4a38      	ldr	r2, [pc, #224]	@ (80007a4 <MX_GPIO_Init+0x12c>)
 80006c4:	f043 0302 	orr.w	r3, r3, #2
 80006c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006ca:	4b36      	ldr	r3, [pc, #216]	@ (80007a4 <MX_GPIO_Init+0x12c>)
 80006cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006ce:	f003 0302 	and.w	r3, r3, #2
 80006d2:	60bb      	str	r3, [r7, #8]
 80006d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80006d6:	4b33      	ldr	r3, [pc, #204]	@ (80007a4 <MX_GPIO_Init+0x12c>)
 80006d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006da:	4a32      	ldr	r2, [pc, #200]	@ (80007a4 <MX_GPIO_Init+0x12c>)
 80006dc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80006e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006e2:	4b30      	ldr	r3, [pc, #192]	@ (80007a4 <MX_GPIO_Init+0x12c>)
 80006e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80006ea:	607b      	str	r3, [r7, #4]
 80006ec:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 80006ee:	f000 fee7 	bl	80014c0 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006f2:	4b2c      	ldr	r3, [pc, #176]	@ (80007a4 <MX_GPIO_Init+0x12c>)
 80006f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006f6:	4a2b      	ldr	r2, [pc, #172]	@ (80007a4 <MX_GPIO_Init+0x12c>)
 80006f8:	f043 0301 	orr.w	r3, r3, #1
 80006fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006fe:	4b29      	ldr	r3, [pc, #164]	@ (80007a4 <MX_GPIO_Init+0x12c>)
 8000700:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000702:	f003 0301 	and.w	r3, r3, #1
 8000706:	603b      	str	r3, [r7, #0]
 8000708:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 800070a:	2201      	movs	r2, #1
 800070c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000710:	4825      	ldr	r0, [pc, #148]	@ (80007a8 <MX_GPIO_Init+0x130>)
 8000712:	f000 fcf1 	bl	80010f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_SET);
 8000716:	2201      	movs	r2, #1
 8000718:	f44f 4181 	mov.w	r1, #16512	@ 0x4080
 800071c:	4823      	ldr	r0, [pc, #140]	@ (80007ac <MX_GPIO_Init+0x134>)
 800071e:	f000 fceb 	bl	80010f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000722:	2200      	movs	r2, #0
 8000724:	2140      	movs	r1, #64	@ 0x40
 8000726:	4822      	ldr	r0, [pc, #136]	@ (80007b0 <MX_GPIO_Init+0x138>)
 8000728:	f000 fce6 	bl	80010f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800072c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000730:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000732:	2301      	movs	r3, #1
 8000734:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000736:	2300      	movs	r3, #0
 8000738:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800073a:	2300      	movs	r3, #0
 800073c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800073e:	f107 0314 	add.w	r3, r7, #20
 8000742:	4619      	mov	r1, r3
 8000744:	4818      	ldr	r0, [pc, #96]	@ (80007a8 <MX_GPIO_Init+0x130>)
 8000746:	f000 fb45 	bl	8000dd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 800074a:	f44f 4381 	mov.w	r3, #16512	@ 0x4080
 800074e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000750:	2301      	movs	r3, #1
 8000752:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000754:	2300      	movs	r3, #0
 8000756:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000758:	2300      	movs	r3, #0
 800075a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800075c:	f107 0314 	add.w	r3, r7, #20
 8000760:	4619      	mov	r1, r3
 8000762:	4812      	ldr	r0, [pc, #72]	@ (80007ac <MX_GPIO_Init+0x134>)
 8000764:	f000 fb36 	bl	8000dd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000768:	2320      	movs	r3, #32
 800076a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800076c:	2300      	movs	r3, #0
 800076e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000770:	2300      	movs	r3, #0
 8000772:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000774:	f107 0314 	add.w	r3, r7, #20
 8000778:	4619      	mov	r1, r3
 800077a:	480d      	ldr	r0, [pc, #52]	@ (80007b0 <MX_GPIO_Init+0x138>)
 800077c:	f000 fb2a 	bl	8000dd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000780:	2340      	movs	r3, #64	@ 0x40
 8000782:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000784:	2301      	movs	r3, #1
 8000786:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000788:	2300      	movs	r3, #0
 800078a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800078c:	2300      	movs	r3, #0
 800078e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000790:	f107 0314 	add.w	r3, r7, #20
 8000794:	4619      	mov	r1, r3
 8000796:	4806      	ldr	r0, [pc, #24]	@ (80007b0 <MX_GPIO_Init+0x138>)
 8000798:	f000 fb1c 	bl	8000dd4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800079c:	bf00      	nop
 800079e:	3728      	adds	r7, #40	@ 0x28
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	40021000 	.word	0x40021000
 80007a8:	48000800 	.word	0x48000800
 80007ac:	48000400 	.word	0x48000400
 80007b0:	48001800 	.word	0x48001800

080007b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007b4:	b480      	push	{r7}
 80007b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007b8:	b672      	cpsid	i
}
 80007ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007bc:	bf00      	nop
 80007be:	e7fd      	b.n	80007bc <Error_Handler+0x8>

080007c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007c0:	b480      	push	{r7}
 80007c2:	b083      	sub	sp, #12
 80007c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007c6:	4b0f      	ldr	r3, [pc, #60]	@ (8000804 <HAL_MspInit+0x44>)
 80007c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80007ca:	4a0e      	ldr	r2, [pc, #56]	@ (8000804 <HAL_MspInit+0x44>)
 80007cc:	f043 0301 	orr.w	r3, r3, #1
 80007d0:	6613      	str	r3, [r2, #96]	@ 0x60
 80007d2:	4b0c      	ldr	r3, [pc, #48]	@ (8000804 <HAL_MspInit+0x44>)
 80007d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80007d6:	f003 0301 	and.w	r3, r3, #1
 80007da:	607b      	str	r3, [r7, #4]
 80007dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007de:	4b09      	ldr	r3, [pc, #36]	@ (8000804 <HAL_MspInit+0x44>)
 80007e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80007e2:	4a08      	ldr	r2, [pc, #32]	@ (8000804 <HAL_MspInit+0x44>)
 80007e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007e8:	6593      	str	r3, [r2, #88]	@ 0x58
 80007ea:	4b06      	ldr	r3, [pc, #24]	@ (8000804 <HAL_MspInit+0x44>)
 80007ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80007ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007f2:	603b      	str	r3, [r7, #0]
 80007f4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007f6:	bf00      	nop
 80007f8:	370c      	adds	r7, #12
 80007fa:	46bd      	mov	sp, r7
 80007fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000800:	4770      	bx	lr
 8000802:	bf00      	nop
 8000804:	40021000 	.word	0x40021000

08000808 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b0ac      	sub	sp, #176	@ 0xb0
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000810:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000814:	2200      	movs	r2, #0
 8000816:	601a      	str	r2, [r3, #0]
 8000818:	605a      	str	r2, [r3, #4]
 800081a:	609a      	str	r2, [r3, #8]
 800081c:	60da      	str	r2, [r3, #12]
 800081e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000820:	f107 0310 	add.w	r3, r7, #16
 8000824:	228c      	movs	r2, #140	@ 0x8c
 8000826:	2100      	movs	r1, #0
 8000828:	4618      	mov	r0, r3
 800082a:	f003 f937 	bl	8003a9c <memset>
  if(huart->Instance==LPUART1)
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	4a22      	ldr	r2, [pc, #136]	@ (80008bc <HAL_UART_MspInit+0xb4>)
 8000834:	4293      	cmp	r3, r2
 8000836:	d13d      	bne.n	80008b4 <HAL_UART_MspInit+0xac>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000838:	2320      	movs	r3, #32
 800083a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 800083c:	2300      	movs	r3, #0
 800083e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000840:	f107 0310 	add.w	r3, r7, #16
 8000844:	4618      	mov	r0, r3
 8000846:	f001 fc89 	bl	800215c <HAL_RCCEx_PeriphCLKConfig>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d001      	beq.n	8000854 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000850:	f7ff ffb0 	bl	80007b4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000854:	4b1a      	ldr	r3, [pc, #104]	@ (80008c0 <HAL_UART_MspInit+0xb8>)
 8000856:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000858:	4a19      	ldr	r2, [pc, #100]	@ (80008c0 <HAL_UART_MspInit+0xb8>)
 800085a:	f043 0301 	orr.w	r3, r3, #1
 800085e:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8000860:	4b17      	ldr	r3, [pc, #92]	@ (80008c0 <HAL_UART_MspInit+0xb8>)
 8000862:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000864:	f003 0301 	and.w	r3, r3, #1
 8000868:	60fb      	str	r3, [r7, #12]
 800086a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 800086c:	4b14      	ldr	r3, [pc, #80]	@ (80008c0 <HAL_UART_MspInit+0xb8>)
 800086e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000870:	4a13      	ldr	r2, [pc, #76]	@ (80008c0 <HAL_UART_MspInit+0xb8>)
 8000872:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000876:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000878:	4b11      	ldr	r3, [pc, #68]	@ (80008c0 <HAL_UART_MspInit+0xb8>)
 800087a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800087c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000880:	60bb      	str	r3, [r7, #8]
 8000882:	68bb      	ldr	r3, [r7, #8]
    HAL_PWREx_EnableVddIO2();
 8000884:	f000 fe1c 	bl	80014c0 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000888:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 800088c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000890:	2302      	movs	r3, #2
 8000892:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000896:	2300      	movs	r3, #0
 8000898:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800089c:	2303      	movs	r3, #3
 800089e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80008a2:	2308      	movs	r3, #8
 80008a4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80008a8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80008ac:	4619      	mov	r1, r3
 80008ae:	4805      	ldr	r0, [pc, #20]	@ (80008c4 <HAL_UART_MspInit+0xbc>)
 80008b0:	f000 fa90 	bl	8000dd4 <HAL_GPIO_Init>

  /* USER CODE END LPUART1_MspInit 1 */

  }

}
 80008b4:	bf00      	nop
 80008b6:	37b0      	adds	r7, #176	@ 0xb0
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	40008000 	.word	0x40008000
 80008c0:	40021000 	.word	0x40021000
 80008c4:	48001800 	.word	0x48001800

080008c8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b0ae      	sub	sp, #184	@ 0xb8
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008d0:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80008d4:	2200      	movs	r2, #0
 80008d6:	601a      	str	r2, [r3, #0]
 80008d8:	605a      	str	r2, [r3, #4]
 80008da:	609a      	str	r2, [r3, #8]
 80008dc:	60da      	str	r2, [r3, #12]
 80008de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008e0:	f107 0318 	add.w	r3, r7, #24
 80008e4:	228c      	movs	r2, #140	@ 0x8c
 80008e6:	2100      	movs	r1, #0
 80008e8:	4618      	mov	r0, r3
 80008ea:	f003 f8d7 	bl	8003a9c <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80008f6:	d17c      	bne.n	80009f2 <HAL_PCD_MspInit+0x12a>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80008f8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80008fc:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80008fe:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8000902:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000906:	2301      	movs	r3, #1
 8000908:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800090a:	2301      	movs	r3, #1
 800090c:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 800090e:	2318      	movs	r3, #24
 8000910:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8000912:	2302      	movs	r3, #2
 8000914:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000916:	2302      	movs	r3, #2
 8000918:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800091a:	2302      	movs	r3, #2
 800091c:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 800091e:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000922:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000924:	f107 0318 	add.w	r3, r7, #24
 8000928:	4618      	mov	r0, r3
 800092a:	f001 fc17 	bl	800215c <HAL_RCCEx_PeriphCLKConfig>
 800092e:	4603      	mov	r3, r0
 8000930:	2b00      	cmp	r3, #0
 8000932:	d001      	beq.n	8000938 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 8000934:	f7ff ff3e 	bl	80007b4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000938:	4b30      	ldr	r3, [pc, #192]	@ (80009fc <HAL_PCD_MspInit+0x134>)
 800093a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800093c:	4a2f      	ldr	r2, [pc, #188]	@ (80009fc <HAL_PCD_MspInit+0x134>)
 800093e:	f043 0301 	orr.w	r3, r3, #1
 8000942:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000944:	4b2d      	ldr	r3, [pc, #180]	@ (80009fc <HAL_PCD_MspInit+0x134>)
 8000946:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000948:	f003 0301 	and.w	r3, r3, #1
 800094c:	617b      	str	r3, [r7, #20]
 800094e:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000950:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8000954:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000958:	2302      	movs	r3, #2
 800095a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095e:	2300      	movs	r3, #0
 8000960:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000964:	2303      	movs	r3, #3
 8000966:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800096a:	230a      	movs	r3, #10
 800096c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000970:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000974:	4619      	mov	r1, r3
 8000976:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800097a:	f000 fa2b 	bl	8000dd4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800097e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000982:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000986:	2300      	movs	r3, #0
 8000988:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098c:	2300      	movs	r3, #0
 800098e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000992:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000996:	4619      	mov	r1, r3
 8000998:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800099c:	f000 fa1a 	bl	8000dd4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80009a0:	4b16      	ldr	r3, [pc, #88]	@ (80009fc <HAL_PCD_MspInit+0x134>)
 80009a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009a4:	4a15      	ldr	r2, [pc, #84]	@ (80009fc <HAL_PCD_MspInit+0x134>)
 80009a6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80009aa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009ac:	4b13      	ldr	r3, [pc, #76]	@ (80009fc <HAL_PCD_MspInit+0x134>)
 80009ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009b0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80009b4:	613b      	str	r3, [r7, #16]
 80009b6:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80009b8:	4b10      	ldr	r3, [pc, #64]	@ (80009fc <HAL_PCD_MspInit+0x134>)
 80009ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d114      	bne.n	80009ee <HAL_PCD_MspInit+0x126>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80009c4:	4b0d      	ldr	r3, [pc, #52]	@ (80009fc <HAL_PCD_MspInit+0x134>)
 80009c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009c8:	4a0c      	ldr	r2, [pc, #48]	@ (80009fc <HAL_PCD_MspInit+0x134>)
 80009ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009ce:	6593      	str	r3, [r2, #88]	@ 0x58
 80009d0:	4b0a      	ldr	r3, [pc, #40]	@ (80009fc <HAL_PCD_MspInit+0x134>)
 80009d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009d8:	60fb      	str	r3, [r7, #12]
 80009da:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 80009dc:	f000 fd60 	bl	80014a0 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 80009e0:	4b06      	ldr	r3, [pc, #24]	@ (80009fc <HAL_PCD_MspInit+0x134>)
 80009e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009e4:	4a05      	ldr	r2, [pc, #20]	@ (80009fc <HAL_PCD_MspInit+0x134>)
 80009e6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80009ea:	6593      	str	r3, [r2, #88]	@ 0x58

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 80009ec:	e001      	b.n	80009f2 <HAL_PCD_MspInit+0x12a>
      HAL_PWREx_EnableVddUSB();
 80009ee:	f000 fd57 	bl	80014a0 <HAL_PWREx_EnableVddUSB>
}
 80009f2:	bf00      	nop
 80009f4:	37b8      	adds	r7, #184	@ 0xb8
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	40021000 	.word	0x40021000

08000a00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a04:	bf00      	nop
 8000a06:	e7fd      	b.n	8000a04 <NMI_Handler+0x4>

08000a08 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a0c:	bf00      	nop
 8000a0e:	e7fd      	b.n	8000a0c <HardFault_Handler+0x4>

08000a10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a14:	bf00      	nop
 8000a16:	e7fd      	b.n	8000a14 <MemManage_Handler+0x4>

08000a18 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a1c:	bf00      	nop
 8000a1e:	e7fd      	b.n	8000a1c <BusFault_Handler+0x4>

08000a20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a24:	bf00      	nop
 8000a26:	e7fd      	b.n	8000a24 <UsageFault_Handler+0x4>

08000a28 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a2c:	bf00      	nop
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a34:	4770      	bx	lr

08000a36 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a36:	b480      	push	{r7}
 8000a38:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a3a:	bf00      	nop
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a42:	4770      	bx	lr

08000a44 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a48:	bf00      	nop
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a50:	4770      	bx	lr

08000a52 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a52:	b580      	push	{r7, lr}
 8000a54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a56:	f000 f893 	bl	8000b80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a5a:	bf00      	nop
 8000a5c:	bd80      	pop	{r7, pc}
	...

08000a60 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000a64:	4b06      	ldr	r3, [pc, #24]	@ (8000a80 <SystemInit+0x20>)
 8000a66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a6a:	4a05      	ldr	r2, [pc, #20]	@ (8000a80 <SystemInit+0x20>)
 8000a6c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a70:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000a74:	bf00      	nop
 8000a76:	46bd      	mov	sp, r7
 8000a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7c:	4770      	bx	lr
 8000a7e:	bf00      	nop
 8000a80:	e000ed00 	.word	0xe000ed00

08000a84 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000a84:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000abc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a88:	f7ff ffea 	bl	8000a60 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a8c:	480c      	ldr	r0, [pc, #48]	@ (8000ac0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a8e:	490d      	ldr	r1, [pc, #52]	@ (8000ac4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a90:	4a0d      	ldr	r2, [pc, #52]	@ (8000ac8 <LoopForever+0xe>)
  movs r3, #0
 8000a92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a94:	e002      	b.n	8000a9c <LoopCopyDataInit>

08000a96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a9a:	3304      	adds	r3, #4

08000a9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000aa0:	d3f9      	bcc.n	8000a96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000aa2:	4a0a      	ldr	r2, [pc, #40]	@ (8000acc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000aa4:	4c0a      	ldr	r4, [pc, #40]	@ (8000ad0 <LoopForever+0x16>)
  movs r3, #0
 8000aa6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000aa8:	e001      	b.n	8000aae <LoopFillZerobss>

08000aaa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000aaa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000aac:	3204      	adds	r2, #4

08000aae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000aae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ab0:	d3fb      	bcc.n	8000aaa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ab2:	f002 fffb 	bl	8003aac <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000ab6:	f7ff fd11 	bl	80004dc <main>

08000aba <LoopForever>:

LoopForever:
    b LoopForever
 8000aba:	e7fe      	b.n	8000aba <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000abc:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000ac0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ac4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000ac8:	08003b64 	.word	0x08003b64
  ldr r2, =_sbss
 8000acc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000ad0:	200005c0 	.word	0x200005c0

08000ad4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ad4:	e7fe      	b.n	8000ad4 <ADC1_2_IRQHandler>

08000ad6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ad6:	b580      	push	{r7, lr}
 8000ad8:	b082      	sub	sp, #8
 8000ada:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000adc:	2300      	movs	r3, #0
 8000ade:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ae0:	2003      	movs	r0, #3
 8000ae2:	f000 f943 	bl	8000d6c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ae6:	2000      	movs	r0, #0
 8000ae8:	f000 f80e 	bl	8000b08 <HAL_InitTick>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d002      	beq.n	8000af8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000af2:	2301      	movs	r3, #1
 8000af4:	71fb      	strb	r3, [r7, #7]
 8000af6:	e001      	b.n	8000afc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000af8:	f7ff fe62 	bl	80007c0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000afc:	79fb      	ldrb	r3, [r7, #7]
}
 8000afe:	4618      	mov	r0, r3
 8000b00:	3708      	adds	r7, #8
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
	...

08000b08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b084      	sub	sp, #16
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000b10:	2300      	movs	r3, #0
 8000b12:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000b14:	4b17      	ldr	r3, [pc, #92]	@ (8000b74 <HAL_InitTick+0x6c>)
 8000b16:	781b      	ldrb	r3, [r3, #0]
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d023      	beq.n	8000b64 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000b1c:	4b16      	ldr	r3, [pc, #88]	@ (8000b78 <HAL_InitTick+0x70>)
 8000b1e:	681a      	ldr	r2, [r3, #0]
 8000b20:	4b14      	ldr	r3, [pc, #80]	@ (8000b74 <HAL_InitTick+0x6c>)
 8000b22:	781b      	ldrb	r3, [r3, #0]
 8000b24:	4619      	mov	r1, r3
 8000b26:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b32:	4618      	mov	r0, r3
 8000b34:	f000 f941 	bl	8000dba <HAL_SYSTICK_Config>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d10f      	bne.n	8000b5e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	2b0f      	cmp	r3, #15
 8000b42:	d809      	bhi.n	8000b58 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b44:	2200      	movs	r2, #0
 8000b46:	6879      	ldr	r1, [r7, #4]
 8000b48:	f04f 30ff 	mov.w	r0, #4294967295
 8000b4c:	f000 f919 	bl	8000d82 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b50:	4a0a      	ldr	r2, [pc, #40]	@ (8000b7c <HAL_InitTick+0x74>)
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	6013      	str	r3, [r2, #0]
 8000b56:	e007      	b.n	8000b68 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000b58:	2301      	movs	r3, #1
 8000b5a:	73fb      	strb	r3, [r7, #15]
 8000b5c:	e004      	b.n	8000b68 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000b5e:	2301      	movs	r3, #1
 8000b60:	73fb      	strb	r3, [r7, #15]
 8000b62:	e001      	b.n	8000b68 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000b64:	2301      	movs	r3, #1
 8000b66:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000b68:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	3710      	adds	r7, #16
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	20000008 	.word	0x20000008
 8000b78:	20000000 	.word	0x20000000
 8000b7c:	20000004 	.word	0x20000004

08000b80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000b84:	4b06      	ldr	r3, [pc, #24]	@ (8000ba0 <HAL_IncTick+0x20>)
 8000b86:	781b      	ldrb	r3, [r3, #0]
 8000b88:	461a      	mov	r2, r3
 8000b8a:	4b06      	ldr	r3, [pc, #24]	@ (8000ba4 <HAL_IncTick+0x24>)
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	4413      	add	r3, r2
 8000b90:	4a04      	ldr	r2, [pc, #16]	@ (8000ba4 <HAL_IncTick+0x24>)
 8000b92:	6013      	str	r3, [r2, #0]
}
 8000b94:	bf00      	nop
 8000b96:	46bd      	mov	sp, r7
 8000b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop
 8000ba0:	20000008 	.word	0x20000008
 8000ba4:	200005bc 	.word	0x200005bc

08000ba8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
  return uwTick;
 8000bac:	4b03      	ldr	r3, [pc, #12]	@ (8000bbc <HAL_GetTick+0x14>)
 8000bae:	681b      	ldr	r3, [r3, #0]
}
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop
 8000bbc:	200005bc 	.word	0x200005bc

08000bc0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b084      	sub	sp, #16
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bc8:	f7ff ffee 	bl	8000ba8 <HAL_GetTick>
 8000bcc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bd2:	68fb      	ldr	r3, [r7, #12]
 8000bd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bd8:	d005      	beq.n	8000be6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000bda:	4b0a      	ldr	r3, [pc, #40]	@ (8000c04 <HAL_Delay+0x44>)
 8000bdc:	781b      	ldrb	r3, [r3, #0]
 8000bde:	461a      	mov	r2, r3
 8000be0:	68fb      	ldr	r3, [r7, #12]
 8000be2:	4413      	add	r3, r2
 8000be4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000be6:	bf00      	nop
 8000be8:	f7ff ffde 	bl	8000ba8 <HAL_GetTick>
 8000bec:	4602      	mov	r2, r0
 8000bee:	68bb      	ldr	r3, [r7, #8]
 8000bf0:	1ad3      	subs	r3, r2, r3
 8000bf2:	68fa      	ldr	r2, [r7, #12]
 8000bf4:	429a      	cmp	r2, r3
 8000bf6:	d8f7      	bhi.n	8000be8 <HAL_Delay+0x28>
  {
  }
}
 8000bf8:	bf00      	nop
 8000bfa:	bf00      	nop
 8000bfc:	3710      	adds	r7, #16
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	20000008 	.word	0x20000008

08000c08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	b085      	sub	sp, #20
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	f003 0307 	and.w	r3, r3, #7
 8000c16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c18:	4b0c      	ldr	r3, [pc, #48]	@ (8000c4c <__NVIC_SetPriorityGrouping+0x44>)
 8000c1a:	68db      	ldr	r3, [r3, #12]
 8000c1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c1e:	68ba      	ldr	r2, [r7, #8]
 8000c20:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000c24:	4013      	ands	r3, r2
 8000c26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c2c:	68bb      	ldr	r3, [r7, #8]
 8000c2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c30:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000c34:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c3a:	4a04      	ldr	r2, [pc, #16]	@ (8000c4c <__NVIC_SetPriorityGrouping+0x44>)
 8000c3c:	68bb      	ldr	r3, [r7, #8]
 8000c3e:	60d3      	str	r3, [r2, #12]
}
 8000c40:	bf00      	nop
 8000c42:	3714      	adds	r7, #20
 8000c44:	46bd      	mov	sp, r7
 8000c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4a:	4770      	bx	lr
 8000c4c:	e000ed00 	.word	0xe000ed00

08000c50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c54:	4b04      	ldr	r3, [pc, #16]	@ (8000c68 <__NVIC_GetPriorityGrouping+0x18>)
 8000c56:	68db      	ldr	r3, [r3, #12]
 8000c58:	0a1b      	lsrs	r3, r3, #8
 8000c5a:	f003 0307 	and.w	r3, r3, #7
}
 8000c5e:	4618      	mov	r0, r3
 8000c60:	46bd      	mov	sp, r7
 8000c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c66:	4770      	bx	lr
 8000c68:	e000ed00 	.word	0xe000ed00

08000c6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	b083      	sub	sp, #12
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	4603      	mov	r3, r0
 8000c74:	6039      	str	r1, [r7, #0]
 8000c76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	db0a      	blt.n	8000c96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c80:	683b      	ldr	r3, [r7, #0]
 8000c82:	b2da      	uxtb	r2, r3
 8000c84:	490c      	ldr	r1, [pc, #48]	@ (8000cb8 <__NVIC_SetPriority+0x4c>)
 8000c86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c8a:	0112      	lsls	r2, r2, #4
 8000c8c:	b2d2      	uxtb	r2, r2
 8000c8e:	440b      	add	r3, r1
 8000c90:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c94:	e00a      	b.n	8000cac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c96:	683b      	ldr	r3, [r7, #0]
 8000c98:	b2da      	uxtb	r2, r3
 8000c9a:	4908      	ldr	r1, [pc, #32]	@ (8000cbc <__NVIC_SetPriority+0x50>)
 8000c9c:	79fb      	ldrb	r3, [r7, #7]
 8000c9e:	f003 030f 	and.w	r3, r3, #15
 8000ca2:	3b04      	subs	r3, #4
 8000ca4:	0112      	lsls	r2, r2, #4
 8000ca6:	b2d2      	uxtb	r2, r2
 8000ca8:	440b      	add	r3, r1
 8000caa:	761a      	strb	r2, [r3, #24]
}
 8000cac:	bf00      	nop
 8000cae:	370c      	adds	r7, #12
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb6:	4770      	bx	lr
 8000cb8:	e000e100 	.word	0xe000e100
 8000cbc:	e000ed00 	.word	0xe000ed00

08000cc0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b089      	sub	sp, #36	@ 0x24
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	60f8      	str	r0, [r7, #12]
 8000cc8:	60b9      	str	r1, [r7, #8]
 8000cca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	f003 0307 	and.w	r3, r3, #7
 8000cd2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cd4:	69fb      	ldr	r3, [r7, #28]
 8000cd6:	f1c3 0307 	rsb	r3, r3, #7
 8000cda:	2b04      	cmp	r3, #4
 8000cdc:	bf28      	it	cs
 8000cde:	2304      	movcs	r3, #4
 8000ce0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ce2:	69fb      	ldr	r3, [r7, #28]
 8000ce4:	3304      	adds	r3, #4
 8000ce6:	2b06      	cmp	r3, #6
 8000ce8:	d902      	bls.n	8000cf0 <NVIC_EncodePriority+0x30>
 8000cea:	69fb      	ldr	r3, [r7, #28]
 8000cec:	3b03      	subs	r3, #3
 8000cee:	e000      	b.n	8000cf2 <NVIC_EncodePriority+0x32>
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cf4:	f04f 32ff 	mov.w	r2, #4294967295
 8000cf8:	69bb      	ldr	r3, [r7, #24]
 8000cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8000cfe:	43da      	mvns	r2, r3
 8000d00:	68bb      	ldr	r3, [r7, #8]
 8000d02:	401a      	ands	r2, r3
 8000d04:	697b      	ldr	r3, [r7, #20]
 8000d06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d08:	f04f 31ff 	mov.w	r1, #4294967295
 8000d0c:	697b      	ldr	r3, [r7, #20]
 8000d0e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d12:	43d9      	mvns	r1, r3
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d18:	4313      	orrs	r3, r2
         );
}
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	3724      	adds	r7, #36	@ 0x24
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d24:	4770      	bx	lr
	...

08000d28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b082      	sub	sp, #8
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	3b01      	subs	r3, #1
 8000d34:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000d38:	d301      	bcc.n	8000d3e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d3a:	2301      	movs	r3, #1
 8000d3c:	e00f      	b.n	8000d5e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d3e:	4a0a      	ldr	r2, [pc, #40]	@ (8000d68 <SysTick_Config+0x40>)
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	3b01      	subs	r3, #1
 8000d44:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d46:	210f      	movs	r1, #15
 8000d48:	f04f 30ff 	mov.w	r0, #4294967295
 8000d4c:	f7ff ff8e 	bl	8000c6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d50:	4b05      	ldr	r3, [pc, #20]	@ (8000d68 <SysTick_Config+0x40>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d56:	4b04      	ldr	r3, [pc, #16]	@ (8000d68 <SysTick_Config+0x40>)
 8000d58:	2207      	movs	r2, #7
 8000d5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d5c:	2300      	movs	r3, #0
}
 8000d5e:	4618      	mov	r0, r3
 8000d60:	3708      	adds	r7, #8
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	e000e010 	.word	0xe000e010

08000d6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b082      	sub	sp, #8
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d74:	6878      	ldr	r0, [r7, #4]
 8000d76:	f7ff ff47 	bl	8000c08 <__NVIC_SetPriorityGrouping>
}
 8000d7a:	bf00      	nop
 8000d7c:	3708      	adds	r7, #8
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}

08000d82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d82:	b580      	push	{r7, lr}
 8000d84:	b086      	sub	sp, #24
 8000d86:	af00      	add	r7, sp, #0
 8000d88:	4603      	mov	r3, r0
 8000d8a:	60b9      	str	r1, [r7, #8]
 8000d8c:	607a      	str	r2, [r7, #4]
 8000d8e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000d90:	2300      	movs	r3, #0
 8000d92:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000d94:	f7ff ff5c 	bl	8000c50 <__NVIC_GetPriorityGrouping>
 8000d98:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d9a:	687a      	ldr	r2, [r7, #4]
 8000d9c:	68b9      	ldr	r1, [r7, #8]
 8000d9e:	6978      	ldr	r0, [r7, #20]
 8000da0:	f7ff ff8e 	bl	8000cc0 <NVIC_EncodePriority>
 8000da4:	4602      	mov	r2, r0
 8000da6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000daa:	4611      	mov	r1, r2
 8000dac:	4618      	mov	r0, r3
 8000dae:	f7ff ff5d 	bl	8000c6c <__NVIC_SetPriority>
}
 8000db2:	bf00      	nop
 8000db4:	3718      	adds	r7, #24
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}

08000dba <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dba:	b580      	push	{r7, lr}
 8000dbc:	b082      	sub	sp, #8
 8000dbe:	af00      	add	r7, sp, #0
 8000dc0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000dc2:	6878      	ldr	r0, [r7, #4]
 8000dc4:	f7ff ffb0 	bl	8000d28 <SysTick_Config>
 8000dc8:	4603      	mov	r3, r0
}
 8000dca:	4618      	mov	r0, r3
 8000dcc:	3708      	adds	r7, #8
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}
	...

08000dd4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	b087      	sub	sp, #28
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
 8000ddc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000dde:	2300      	movs	r3, #0
 8000de0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000de2:	e166      	b.n	80010b2 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	681a      	ldr	r2, [r3, #0]
 8000de8:	2101      	movs	r1, #1
 8000dea:	697b      	ldr	r3, [r7, #20]
 8000dec:	fa01 f303 	lsl.w	r3, r1, r3
 8000df0:	4013      	ands	r3, r2
 8000df2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	f000 8158 	beq.w	80010ac <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	685b      	ldr	r3, [r3, #4]
 8000e00:	f003 0303 	and.w	r3, r3, #3
 8000e04:	2b01      	cmp	r3, #1
 8000e06:	d005      	beq.n	8000e14 <HAL_GPIO_Init+0x40>
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	685b      	ldr	r3, [r3, #4]
 8000e0c:	f003 0303 	and.w	r3, r3, #3
 8000e10:	2b02      	cmp	r3, #2
 8000e12:	d130      	bne.n	8000e76 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	689b      	ldr	r3, [r3, #8]
 8000e18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000e1a:	697b      	ldr	r3, [r7, #20]
 8000e1c:	005b      	lsls	r3, r3, #1
 8000e1e:	2203      	movs	r2, #3
 8000e20:	fa02 f303 	lsl.w	r3, r2, r3
 8000e24:	43db      	mvns	r3, r3
 8000e26:	693a      	ldr	r2, [r7, #16]
 8000e28:	4013      	ands	r3, r2
 8000e2a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	68da      	ldr	r2, [r3, #12]
 8000e30:	697b      	ldr	r3, [r7, #20]
 8000e32:	005b      	lsls	r3, r3, #1
 8000e34:	fa02 f303 	lsl.w	r3, r2, r3
 8000e38:	693a      	ldr	r2, [r7, #16]
 8000e3a:	4313      	orrs	r3, r2
 8000e3c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	693a      	ldr	r2, [r7, #16]
 8000e42:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	685b      	ldr	r3, [r3, #4]
 8000e48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000e4a:	2201      	movs	r2, #1
 8000e4c:	697b      	ldr	r3, [r7, #20]
 8000e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e52:	43db      	mvns	r3, r3
 8000e54:	693a      	ldr	r2, [r7, #16]
 8000e56:	4013      	ands	r3, r2
 8000e58:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	685b      	ldr	r3, [r3, #4]
 8000e5e:	091b      	lsrs	r3, r3, #4
 8000e60:	f003 0201 	and.w	r2, r3, #1
 8000e64:	697b      	ldr	r3, [r7, #20]
 8000e66:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6a:	693a      	ldr	r2, [r7, #16]
 8000e6c:	4313      	orrs	r3, r2
 8000e6e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	693a      	ldr	r2, [r7, #16]
 8000e74:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	685b      	ldr	r3, [r3, #4]
 8000e7a:	f003 0303 	and.w	r3, r3, #3
 8000e7e:	2b03      	cmp	r3, #3
 8000e80:	d017      	beq.n	8000eb2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	68db      	ldr	r3, [r3, #12]
 8000e86:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000e88:	697b      	ldr	r3, [r7, #20]
 8000e8a:	005b      	lsls	r3, r3, #1
 8000e8c:	2203      	movs	r2, #3
 8000e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e92:	43db      	mvns	r3, r3
 8000e94:	693a      	ldr	r2, [r7, #16]
 8000e96:	4013      	ands	r3, r2
 8000e98:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	689a      	ldr	r2, [r3, #8]
 8000e9e:	697b      	ldr	r3, [r7, #20]
 8000ea0:	005b      	lsls	r3, r3, #1
 8000ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea6:	693a      	ldr	r2, [r7, #16]
 8000ea8:	4313      	orrs	r3, r2
 8000eaa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	693a      	ldr	r2, [r7, #16]
 8000eb0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	685b      	ldr	r3, [r3, #4]
 8000eb6:	f003 0303 	and.w	r3, r3, #3
 8000eba:	2b02      	cmp	r3, #2
 8000ebc:	d123      	bne.n	8000f06 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000ebe:	697b      	ldr	r3, [r7, #20]
 8000ec0:	08da      	lsrs	r2, r3, #3
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	3208      	adds	r2, #8
 8000ec6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000eca:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000ecc:	697b      	ldr	r3, [r7, #20]
 8000ece:	f003 0307 	and.w	r3, r3, #7
 8000ed2:	009b      	lsls	r3, r3, #2
 8000ed4:	220f      	movs	r2, #15
 8000ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eda:	43db      	mvns	r3, r3
 8000edc:	693a      	ldr	r2, [r7, #16]
 8000ede:	4013      	ands	r3, r2
 8000ee0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	691a      	ldr	r2, [r3, #16]
 8000ee6:	697b      	ldr	r3, [r7, #20]
 8000ee8:	f003 0307 	and.w	r3, r3, #7
 8000eec:	009b      	lsls	r3, r3, #2
 8000eee:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef2:	693a      	ldr	r2, [r7, #16]
 8000ef4:	4313      	orrs	r3, r2
 8000ef6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000ef8:	697b      	ldr	r3, [r7, #20]
 8000efa:	08da      	lsrs	r2, r3, #3
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	3208      	adds	r2, #8
 8000f00:	6939      	ldr	r1, [r7, #16]
 8000f02:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000f0c:	697b      	ldr	r3, [r7, #20]
 8000f0e:	005b      	lsls	r3, r3, #1
 8000f10:	2203      	movs	r2, #3
 8000f12:	fa02 f303 	lsl.w	r3, r2, r3
 8000f16:	43db      	mvns	r3, r3
 8000f18:	693a      	ldr	r2, [r7, #16]
 8000f1a:	4013      	ands	r3, r2
 8000f1c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	685b      	ldr	r3, [r3, #4]
 8000f22:	f003 0203 	and.w	r2, r3, #3
 8000f26:	697b      	ldr	r3, [r7, #20]
 8000f28:	005b      	lsls	r3, r3, #1
 8000f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2e:	693a      	ldr	r2, [r7, #16]
 8000f30:	4313      	orrs	r3, r2
 8000f32:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	693a      	ldr	r2, [r7, #16]
 8000f38:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	685b      	ldr	r3, [r3, #4]
 8000f3e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	f000 80b2 	beq.w	80010ac <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f48:	4b61      	ldr	r3, [pc, #388]	@ (80010d0 <HAL_GPIO_Init+0x2fc>)
 8000f4a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f4c:	4a60      	ldr	r2, [pc, #384]	@ (80010d0 <HAL_GPIO_Init+0x2fc>)
 8000f4e:	f043 0301 	orr.w	r3, r3, #1
 8000f52:	6613      	str	r3, [r2, #96]	@ 0x60
 8000f54:	4b5e      	ldr	r3, [pc, #376]	@ (80010d0 <HAL_GPIO_Init+0x2fc>)
 8000f56:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f58:	f003 0301 	and.w	r3, r3, #1
 8000f5c:	60bb      	str	r3, [r7, #8]
 8000f5e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000f60:	4a5c      	ldr	r2, [pc, #368]	@ (80010d4 <HAL_GPIO_Init+0x300>)
 8000f62:	697b      	ldr	r3, [r7, #20]
 8000f64:	089b      	lsrs	r3, r3, #2
 8000f66:	3302      	adds	r3, #2
 8000f68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f6c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000f6e:	697b      	ldr	r3, [r7, #20]
 8000f70:	f003 0303 	and.w	r3, r3, #3
 8000f74:	009b      	lsls	r3, r3, #2
 8000f76:	220f      	movs	r2, #15
 8000f78:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7c:	43db      	mvns	r3, r3
 8000f7e:	693a      	ldr	r2, [r7, #16]
 8000f80:	4013      	ands	r3, r2
 8000f82:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000f8a:	d02b      	beq.n	8000fe4 <HAL_GPIO_Init+0x210>
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	4a52      	ldr	r2, [pc, #328]	@ (80010d8 <HAL_GPIO_Init+0x304>)
 8000f90:	4293      	cmp	r3, r2
 8000f92:	d025      	beq.n	8000fe0 <HAL_GPIO_Init+0x20c>
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	4a51      	ldr	r2, [pc, #324]	@ (80010dc <HAL_GPIO_Init+0x308>)
 8000f98:	4293      	cmp	r3, r2
 8000f9a:	d01f      	beq.n	8000fdc <HAL_GPIO_Init+0x208>
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	4a50      	ldr	r2, [pc, #320]	@ (80010e0 <HAL_GPIO_Init+0x30c>)
 8000fa0:	4293      	cmp	r3, r2
 8000fa2:	d019      	beq.n	8000fd8 <HAL_GPIO_Init+0x204>
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	4a4f      	ldr	r2, [pc, #316]	@ (80010e4 <HAL_GPIO_Init+0x310>)
 8000fa8:	4293      	cmp	r3, r2
 8000faa:	d013      	beq.n	8000fd4 <HAL_GPIO_Init+0x200>
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	4a4e      	ldr	r2, [pc, #312]	@ (80010e8 <HAL_GPIO_Init+0x314>)
 8000fb0:	4293      	cmp	r3, r2
 8000fb2:	d00d      	beq.n	8000fd0 <HAL_GPIO_Init+0x1fc>
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	4a4d      	ldr	r2, [pc, #308]	@ (80010ec <HAL_GPIO_Init+0x318>)
 8000fb8:	4293      	cmp	r3, r2
 8000fba:	d007      	beq.n	8000fcc <HAL_GPIO_Init+0x1f8>
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	4a4c      	ldr	r2, [pc, #304]	@ (80010f0 <HAL_GPIO_Init+0x31c>)
 8000fc0:	4293      	cmp	r3, r2
 8000fc2:	d101      	bne.n	8000fc8 <HAL_GPIO_Init+0x1f4>
 8000fc4:	2307      	movs	r3, #7
 8000fc6:	e00e      	b.n	8000fe6 <HAL_GPIO_Init+0x212>
 8000fc8:	2308      	movs	r3, #8
 8000fca:	e00c      	b.n	8000fe6 <HAL_GPIO_Init+0x212>
 8000fcc:	2306      	movs	r3, #6
 8000fce:	e00a      	b.n	8000fe6 <HAL_GPIO_Init+0x212>
 8000fd0:	2305      	movs	r3, #5
 8000fd2:	e008      	b.n	8000fe6 <HAL_GPIO_Init+0x212>
 8000fd4:	2304      	movs	r3, #4
 8000fd6:	e006      	b.n	8000fe6 <HAL_GPIO_Init+0x212>
 8000fd8:	2303      	movs	r3, #3
 8000fda:	e004      	b.n	8000fe6 <HAL_GPIO_Init+0x212>
 8000fdc:	2302      	movs	r3, #2
 8000fde:	e002      	b.n	8000fe6 <HAL_GPIO_Init+0x212>
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	e000      	b.n	8000fe6 <HAL_GPIO_Init+0x212>
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	697a      	ldr	r2, [r7, #20]
 8000fe8:	f002 0203 	and.w	r2, r2, #3
 8000fec:	0092      	lsls	r2, r2, #2
 8000fee:	4093      	lsls	r3, r2
 8000ff0:	693a      	ldr	r2, [r7, #16]
 8000ff2:	4313      	orrs	r3, r2
 8000ff4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000ff6:	4937      	ldr	r1, [pc, #220]	@ (80010d4 <HAL_GPIO_Init+0x300>)
 8000ff8:	697b      	ldr	r3, [r7, #20]
 8000ffa:	089b      	lsrs	r3, r3, #2
 8000ffc:	3302      	adds	r3, #2
 8000ffe:	693a      	ldr	r2, [r7, #16]
 8001000:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001004:	4b3b      	ldr	r3, [pc, #236]	@ (80010f4 <HAL_GPIO_Init+0x320>)
 8001006:	689b      	ldr	r3, [r3, #8]
 8001008:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	43db      	mvns	r3, r3
 800100e:	693a      	ldr	r2, [r7, #16]
 8001010:	4013      	ands	r3, r2
 8001012:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	685b      	ldr	r3, [r3, #4]
 8001018:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800101c:	2b00      	cmp	r3, #0
 800101e:	d003      	beq.n	8001028 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8001020:	693a      	ldr	r2, [r7, #16]
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	4313      	orrs	r3, r2
 8001026:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001028:	4a32      	ldr	r2, [pc, #200]	@ (80010f4 <HAL_GPIO_Init+0x320>)
 800102a:	693b      	ldr	r3, [r7, #16]
 800102c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800102e:	4b31      	ldr	r3, [pc, #196]	@ (80010f4 <HAL_GPIO_Init+0x320>)
 8001030:	68db      	ldr	r3, [r3, #12]
 8001032:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	43db      	mvns	r3, r3
 8001038:	693a      	ldr	r2, [r7, #16]
 800103a:	4013      	ands	r3, r2
 800103c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	685b      	ldr	r3, [r3, #4]
 8001042:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001046:	2b00      	cmp	r3, #0
 8001048:	d003      	beq.n	8001052 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800104a:	693a      	ldr	r2, [r7, #16]
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	4313      	orrs	r3, r2
 8001050:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001052:	4a28      	ldr	r2, [pc, #160]	@ (80010f4 <HAL_GPIO_Init+0x320>)
 8001054:	693b      	ldr	r3, [r7, #16]
 8001056:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001058:	4b26      	ldr	r3, [pc, #152]	@ (80010f4 <HAL_GPIO_Init+0x320>)
 800105a:	685b      	ldr	r3, [r3, #4]
 800105c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	43db      	mvns	r3, r3
 8001062:	693a      	ldr	r2, [r7, #16]
 8001064:	4013      	ands	r3, r2
 8001066:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001070:	2b00      	cmp	r3, #0
 8001072:	d003      	beq.n	800107c <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8001074:	693a      	ldr	r2, [r7, #16]
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	4313      	orrs	r3, r2
 800107a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800107c:	4a1d      	ldr	r2, [pc, #116]	@ (80010f4 <HAL_GPIO_Init+0x320>)
 800107e:	693b      	ldr	r3, [r7, #16]
 8001080:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001082:	4b1c      	ldr	r3, [pc, #112]	@ (80010f4 <HAL_GPIO_Init+0x320>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	43db      	mvns	r3, r3
 800108c:	693a      	ldr	r2, [r7, #16]
 800108e:	4013      	ands	r3, r2
 8001090:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	685b      	ldr	r3, [r3, #4]
 8001096:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800109a:	2b00      	cmp	r3, #0
 800109c:	d003      	beq.n	80010a6 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800109e:	693a      	ldr	r2, [r7, #16]
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	4313      	orrs	r3, r2
 80010a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80010a6:	4a13      	ldr	r2, [pc, #76]	@ (80010f4 <HAL_GPIO_Init+0x320>)
 80010a8:	693b      	ldr	r3, [r7, #16]
 80010aa:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80010ac:	697b      	ldr	r3, [r7, #20]
 80010ae:	3301      	adds	r3, #1
 80010b0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	681a      	ldr	r2, [r3, #0]
 80010b6:	697b      	ldr	r3, [r7, #20]
 80010b8:	fa22 f303 	lsr.w	r3, r2, r3
 80010bc:	2b00      	cmp	r3, #0
 80010be:	f47f ae91 	bne.w	8000de4 <HAL_GPIO_Init+0x10>
  }
}
 80010c2:	bf00      	nop
 80010c4:	bf00      	nop
 80010c6:	371c      	adds	r7, #28
 80010c8:	46bd      	mov	sp, r7
 80010ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ce:	4770      	bx	lr
 80010d0:	40021000 	.word	0x40021000
 80010d4:	40010000 	.word	0x40010000
 80010d8:	48000400 	.word	0x48000400
 80010dc:	48000800 	.word	0x48000800
 80010e0:	48000c00 	.word	0x48000c00
 80010e4:	48001000 	.word	0x48001000
 80010e8:	48001400 	.word	0x48001400
 80010ec:	48001800 	.word	0x48001800
 80010f0:	48001c00 	.word	0x48001c00
 80010f4:	40010400 	.word	0x40010400

080010f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b083      	sub	sp, #12
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
 8001100:	460b      	mov	r3, r1
 8001102:	807b      	strh	r3, [r7, #2]
 8001104:	4613      	mov	r3, r2
 8001106:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001108:	787b      	ldrb	r3, [r7, #1]
 800110a:	2b00      	cmp	r3, #0
 800110c:	d003      	beq.n	8001116 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800110e:	887a      	ldrh	r2, [r7, #2]
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001114:	e002      	b.n	800111c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001116:	887a      	ldrh	r2, [r7, #2]
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800111c:	bf00      	nop
 800111e:	370c      	adds	r7, #12
 8001120:	46bd      	mov	sp, r7
 8001122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001126:	4770      	bx	lr

08001128 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001128:	b5f0      	push	{r4, r5, r6, r7, lr}
 800112a:	b08f      	sub	sp, #60	@ 0x3c
 800112c:	af0a      	add	r7, sp, #40	@ 0x28
 800112e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d101      	bne.n	800113a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001136:	2301      	movs	r3, #1
 8001138:	e116      	b.n	8001368 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	f893 34bd 	ldrb.w	r3, [r3, #1213]	@ 0x4bd
 8001146:	b2db      	uxtb	r3, r3
 8001148:	2b00      	cmp	r3, #0
 800114a:	d106      	bne.n	800115a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	2200      	movs	r2, #0
 8001150:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001154:	6878      	ldr	r0, [r7, #4]
 8001156:	f7ff fbb7 	bl	80008c8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	2203      	movs	r2, #3
 800115e:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001162:	68bb      	ldr	r3, [r7, #8]
 8001164:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001166:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800116a:	2b00      	cmp	r3, #0
 800116c:	d102      	bne.n	8001174 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	2200      	movs	r2, #0
 8001172:	60da      	str	r2, [r3, #12]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	4618      	mov	r0, r3
 800117a:	f002 fa10 	bl	800359e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	603b      	str	r3, [r7, #0]
 8001184:	687e      	ldr	r6, [r7, #4]
 8001186:	466d      	mov	r5, sp
 8001188:	f106 0410 	add.w	r4, r6, #16
 800118c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800118e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001190:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001192:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001194:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001198:	e885 0003 	stmia.w	r5, {r0, r1}
 800119c:	1d33      	adds	r3, r6, #4
 800119e:	cb0e      	ldmia	r3, {r1, r2, r3}
 80011a0:	6838      	ldr	r0, [r7, #0]
 80011a2:	f002 f9d0 	bl	8003546 <USB_CoreInit>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d005      	beq.n	80011b8 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	2202      	movs	r2, #2
 80011b0:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 80011b4:	2301      	movs	r3, #1
 80011b6:	e0d7      	b.n	8001368 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	2100      	movs	r1, #0
 80011be:	4618      	mov	r0, r3
 80011c0:	f002 f9fe 	bl	80035c0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80011c4:	2300      	movs	r3, #0
 80011c6:	73fb      	strb	r3, [r7, #15]
 80011c8:	e04a      	b.n	8001260 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80011ca:	7bfa      	ldrb	r2, [r7, #15]
 80011cc:	6879      	ldr	r1, [r7, #4]
 80011ce:	4613      	mov	r3, r2
 80011d0:	00db      	lsls	r3, r3, #3
 80011d2:	4413      	add	r3, r2
 80011d4:	009b      	lsls	r3, r3, #2
 80011d6:	440b      	add	r3, r1
 80011d8:	333d      	adds	r3, #61	@ 0x3d
 80011da:	2201      	movs	r2, #1
 80011dc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80011de:	7bfa      	ldrb	r2, [r7, #15]
 80011e0:	6879      	ldr	r1, [r7, #4]
 80011e2:	4613      	mov	r3, r2
 80011e4:	00db      	lsls	r3, r3, #3
 80011e6:	4413      	add	r3, r2
 80011e8:	009b      	lsls	r3, r3, #2
 80011ea:	440b      	add	r3, r1
 80011ec:	333c      	adds	r3, #60	@ 0x3c
 80011ee:	7bfa      	ldrb	r2, [r7, #15]
 80011f0:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 80011f2:	7bfa      	ldrb	r2, [r7, #15]
 80011f4:	7bfb      	ldrb	r3, [r7, #15]
 80011f6:	b298      	uxth	r0, r3
 80011f8:	6879      	ldr	r1, [r7, #4]
 80011fa:	4613      	mov	r3, r2
 80011fc:	00db      	lsls	r3, r3, #3
 80011fe:	4413      	add	r3, r2
 8001200:	009b      	lsls	r3, r3, #2
 8001202:	440b      	add	r3, r1
 8001204:	3356      	adds	r3, #86	@ 0x56
 8001206:	4602      	mov	r2, r0
 8001208:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800120a:	7bfa      	ldrb	r2, [r7, #15]
 800120c:	6879      	ldr	r1, [r7, #4]
 800120e:	4613      	mov	r3, r2
 8001210:	00db      	lsls	r3, r3, #3
 8001212:	4413      	add	r3, r2
 8001214:	009b      	lsls	r3, r3, #2
 8001216:	440b      	add	r3, r1
 8001218:	3340      	adds	r3, #64	@ 0x40
 800121a:	2200      	movs	r2, #0
 800121c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800121e:	7bfa      	ldrb	r2, [r7, #15]
 8001220:	6879      	ldr	r1, [r7, #4]
 8001222:	4613      	mov	r3, r2
 8001224:	00db      	lsls	r3, r3, #3
 8001226:	4413      	add	r3, r2
 8001228:	009b      	lsls	r3, r3, #2
 800122a:	440b      	add	r3, r1
 800122c:	3344      	adds	r3, #68	@ 0x44
 800122e:	2200      	movs	r2, #0
 8001230:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001232:	7bfa      	ldrb	r2, [r7, #15]
 8001234:	6879      	ldr	r1, [r7, #4]
 8001236:	4613      	mov	r3, r2
 8001238:	00db      	lsls	r3, r3, #3
 800123a:	4413      	add	r3, r2
 800123c:	009b      	lsls	r3, r3, #2
 800123e:	440b      	add	r3, r1
 8001240:	3348      	adds	r3, #72	@ 0x48
 8001242:	2200      	movs	r2, #0
 8001244:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001246:	7bfa      	ldrb	r2, [r7, #15]
 8001248:	6879      	ldr	r1, [r7, #4]
 800124a:	4613      	mov	r3, r2
 800124c:	00db      	lsls	r3, r3, #3
 800124e:	4413      	add	r3, r2
 8001250:	009b      	lsls	r3, r3, #2
 8001252:	440b      	add	r3, r1
 8001254:	334c      	adds	r3, #76	@ 0x4c
 8001256:	2200      	movs	r2, #0
 8001258:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800125a:	7bfb      	ldrb	r3, [r7, #15]
 800125c:	3301      	adds	r3, #1
 800125e:	73fb      	strb	r3, [r7, #15]
 8001260:	7bfa      	ldrb	r2, [r7, #15]
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	685b      	ldr	r3, [r3, #4]
 8001266:	429a      	cmp	r2, r3
 8001268:	d3af      	bcc.n	80011ca <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800126a:	2300      	movs	r3, #0
 800126c:	73fb      	strb	r3, [r7, #15]
 800126e:	e044      	b.n	80012fa <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001270:	7bfa      	ldrb	r2, [r7, #15]
 8001272:	6879      	ldr	r1, [r7, #4]
 8001274:	4613      	mov	r3, r2
 8001276:	00db      	lsls	r3, r3, #3
 8001278:	4413      	add	r3, r2
 800127a:	009b      	lsls	r3, r3, #2
 800127c:	440b      	add	r3, r1
 800127e:	f203 237d 	addw	r3, r3, #637	@ 0x27d
 8001282:	2200      	movs	r2, #0
 8001284:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001286:	7bfa      	ldrb	r2, [r7, #15]
 8001288:	6879      	ldr	r1, [r7, #4]
 800128a:	4613      	mov	r3, r2
 800128c:	00db      	lsls	r3, r3, #3
 800128e:	4413      	add	r3, r2
 8001290:	009b      	lsls	r3, r3, #2
 8001292:	440b      	add	r3, r1
 8001294:	f503 731f 	add.w	r3, r3, #636	@ 0x27c
 8001298:	7bfa      	ldrb	r2, [r7, #15]
 800129a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800129c:	7bfa      	ldrb	r2, [r7, #15]
 800129e:	6879      	ldr	r1, [r7, #4]
 80012a0:	4613      	mov	r3, r2
 80012a2:	00db      	lsls	r3, r3, #3
 80012a4:	4413      	add	r3, r2
 80012a6:	009b      	lsls	r3, r3, #2
 80012a8:	440b      	add	r3, r1
 80012aa:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 80012ae:	2200      	movs	r2, #0
 80012b0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80012b2:	7bfa      	ldrb	r2, [r7, #15]
 80012b4:	6879      	ldr	r1, [r7, #4]
 80012b6:	4613      	mov	r3, r2
 80012b8:	00db      	lsls	r3, r3, #3
 80012ba:	4413      	add	r3, r2
 80012bc:	009b      	lsls	r3, r3, #2
 80012be:	440b      	add	r3, r1
 80012c0:	f503 7321 	add.w	r3, r3, #644	@ 0x284
 80012c4:	2200      	movs	r2, #0
 80012c6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80012c8:	7bfa      	ldrb	r2, [r7, #15]
 80012ca:	6879      	ldr	r1, [r7, #4]
 80012cc:	4613      	mov	r3, r2
 80012ce:	00db      	lsls	r3, r3, #3
 80012d0:	4413      	add	r3, r2
 80012d2:	009b      	lsls	r3, r3, #2
 80012d4:	440b      	add	r3, r1
 80012d6:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 80012da:	2200      	movs	r2, #0
 80012dc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80012de:	7bfa      	ldrb	r2, [r7, #15]
 80012e0:	6879      	ldr	r1, [r7, #4]
 80012e2:	4613      	mov	r3, r2
 80012e4:	00db      	lsls	r3, r3, #3
 80012e6:	4413      	add	r3, r2
 80012e8:	009b      	lsls	r3, r3, #2
 80012ea:	440b      	add	r3, r1
 80012ec:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 80012f0:	2200      	movs	r2, #0
 80012f2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80012f4:	7bfb      	ldrb	r3, [r7, #15]
 80012f6:	3301      	adds	r3, #1
 80012f8:	73fb      	strb	r3, [r7, #15]
 80012fa:	7bfa      	ldrb	r2, [r7, #15]
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	429a      	cmp	r2, r3
 8001302:	d3b5      	bcc.n	8001270 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	603b      	str	r3, [r7, #0]
 800130a:	687e      	ldr	r6, [r7, #4]
 800130c:	466d      	mov	r5, sp
 800130e:	f106 0410 	add.w	r4, r6, #16
 8001312:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001314:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001316:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001318:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800131a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800131e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001322:	1d33      	adds	r3, r6, #4
 8001324:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001326:	6838      	ldr	r0, [r7, #0]
 8001328:	f002 f996 	bl	8003658 <USB_DevInit>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d005      	beq.n	800133e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	2202      	movs	r2, #2
 8001336:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 800133a:	2301      	movs	r3, #1
 800133c:	e014      	b.n	8001368 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	2200      	movs	r2, #0
 8001342:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	2201      	movs	r2, #1
 800134a:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001352:	2b01      	cmp	r3, #1
 8001354:	d102      	bne.n	800135c <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001356:	6878      	ldr	r0, [r7, #4]
 8001358:	f000 f80a 	bl	8001370 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4618      	mov	r0, r3
 8001362:	f002 fb38 	bl	80039d6 <USB_DevDisconnect>

  return HAL_OK;
 8001366:	2300      	movs	r3, #0
}
 8001368:	4618      	mov	r0, r3
 800136a:	3714      	adds	r7, #20
 800136c:	46bd      	mov	sp, r7
 800136e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001370 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001370:	b480      	push	{r7}
 8001372:	b085      	sub	sp, #20
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	2201      	movs	r2, #1
 8001382:	f8c3 2500 	str.w	r2, [r3, #1280]	@ 0x500
  hpcd->LPM_State = LPM_L0;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	2200      	movs	r2, #0
 800138a:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	699b      	ldr	r3, [r3, #24]
 8001392:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800139e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013a2:	f043 0303 	orr.w	r3, r3, #3
 80013a6:	68fa      	ldr	r2, [r7, #12]
 80013a8:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80013aa:	2300      	movs	r3, #0
}
 80013ac:	4618      	mov	r0, r3
 80013ae:	3714      	adds	r7, #20
 80013b0:	46bd      	mov	sp, r7
 80013b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b6:	4770      	bx	lr

080013b8 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80013b8:	b480      	push	{r7}
 80013ba:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80013bc:	4b05      	ldr	r3, [pc, #20]	@ (80013d4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4a04      	ldr	r2, [pc, #16]	@ (80013d4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80013c2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013c6:	6013      	str	r3, [r2, #0]
}
 80013c8:	bf00      	nop
 80013ca:	46bd      	mov	sp, r7
 80013cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d0:	4770      	bx	lr
 80013d2:	bf00      	nop
 80013d4:	40007000 	.word	0x40007000

080013d8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80013d8:	b480      	push	{r7}
 80013da:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80013dc:	4b04      	ldr	r3, [pc, #16]	@ (80013f0 <HAL_PWREx_GetVoltageRange+0x18>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80013e4:	4618      	mov	r0, r3
 80013e6:	46bd      	mov	sp, r7
 80013e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ec:	4770      	bx	lr
 80013ee:	bf00      	nop
 80013f0:	40007000 	.word	0x40007000

080013f4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b085      	sub	sp, #20
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001402:	d130      	bne.n	8001466 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001404:	4b23      	ldr	r3, [pc, #140]	@ (8001494 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800140c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001410:	d038      	beq.n	8001484 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001412:	4b20      	ldr	r3, [pc, #128]	@ (8001494 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800141a:	4a1e      	ldr	r2, [pc, #120]	@ (8001494 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800141c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001420:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001422:	4b1d      	ldr	r3, [pc, #116]	@ (8001498 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	2232      	movs	r2, #50	@ 0x32
 8001428:	fb02 f303 	mul.w	r3, r2, r3
 800142c:	4a1b      	ldr	r2, [pc, #108]	@ (800149c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800142e:	fba2 2303 	umull	r2, r3, r2, r3
 8001432:	0c9b      	lsrs	r3, r3, #18
 8001434:	3301      	adds	r3, #1
 8001436:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001438:	e002      	b.n	8001440 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	3b01      	subs	r3, #1
 800143e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001440:	4b14      	ldr	r3, [pc, #80]	@ (8001494 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001442:	695b      	ldr	r3, [r3, #20]
 8001444:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001448:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800144c:	d102      	bne.n	8001454 <HAL_PWREx_ControlVoltageScaling+0x60>
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	2b00      	cmp	r3, #0
 8001452:	d1f2      	bne.n	800143a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001454:	4b0f      	ldr	r3, [pc, #60]	@ (8001494 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001456:	695b      	ldr	r3, [r3, #20]
 8001458:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800145c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001460:	d110      	bne.n	8001484 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001462:	2303      	movs	r3, #3
 8001464:	e00f      	b.n	8001486 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001466:	4b0b      	ldr	r3, [pc, #44]	@ (8001494 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800146e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001472:	d007      	beq.n	8001484 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001474:	4b07      	ldr	r3, [pc, #28]	@ (8001494 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800147c:	4a05      	ldr	r2, [pc, #20]	@ (8001494 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800147e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001482:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001484:	2300      	movs	r3, #0
}
 8001486:	4618      	mov	r0, r3
 8001488:	3714      	adds	r7, #20
 800148a:	46bd      	mov	sp, r7
 800148c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001490:	4770      	bx	lr
 8001492:	bf00      	nop
 8001494:	40007000 	.word	0x40007000
 8001498:	20000000 	.word	0x20000000
 800149c:	431bde83 	.word	0x431bde83

080014a0 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80014a0:	b480      	push	{r7}
 80014a2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80014a4:	4b05      	ldr	r3, [pc, #20]	@ (80014bc <HAL_PWREx_EnableVddUSB+0x1c>)
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	4a04      	ldr	r2, [pc, #16]	@ (80014bc <HAL_PWREx_EnableVddUSB+0x1c>)
 80014aa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80014ae:	6053      	str	r3, [r2, #4]
}
 80014b0:	bf00      	nop
 80014b2:	46bd      	mov	sp, r7
 80014b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b8:	4770      	bx	lr
 80014ba:	bf00      	nop
 80014bc:	40007000 	.word	0x40007000

080014c0 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 80014c4:	4b05      	ldr	r3, [pc, #20]	@ (80014dc <HAL_PWREx_EnableVddIO2+0x1c>)
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	4a04      	ldr	r2, [pc, #16]	@ (80014dc <HAL_PWREx_EnableVddIO2+0x1c>)
 80014ca:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80014ce:	6053      	str	r3, [r2, #4]
}
 80014d0:	bf00      	nop
 80014d2:	46bd      	mov	sp, r7
 80014d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d8:	4770      	bx	lr
 80014da:	bf00      	nop
 80014dc:	40007000 	.word	0x40007000

080014e0 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b088      	sub	sp, #32
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d102      	bne.n	80014f4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80014ee:	2301      	movs	r3, #1
 80014f0:	f000 bc08 	b.w	8001d04 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80014f4:	4b96      	ldr	r3, [pc, #600]	@ (8001750 <HAL_RCC_OscConfig+0x270>)
 80014f6:	689b      	ldr	r3, [r3, #8]
 80014f8:	f003 030c 	and.w	r3, r3, #12
 80014fc:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80014fe:	4b94      	ldr	r3, [pc, #592]	@ (8001750 <HAL_RCC_OscConfig+0x270>)
 8001500:	68db      	ldr	r3, [r3, #12]
 8001502:	f003 0303 	and.w	r3, r3, #3
 8001506:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f003 0310 	and.w	r3, r3, #16
 8001510:	2b00      	cmp	r3, #0
 8001512:	f000 80e4 	beq.w	80016de <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001516:	69bb      	ldr	r3, [r7, #24]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d007      	beq.n	800152c <HAL_RCC_OscConfig+0x4c>
 800151c:	69bb      	ldr	r3, [r7, #24]
 800151e:	2b0c      	cmp	r3, #12
 8001520:	f040 808b 	bne.w	800163a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001524:	697b      	ldr	r3, [r7, #20]
 8001526:	2b01      	cmp	r3, #1
 8001528:	f040 8087 	bne.w	800163a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800152c:	4b88      	ldr	r3, [pc, #544]	@ (8001750 <HAL_RCC_OscConfig+0x270>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f003 0302 	and.w	r3, r3, #2
 8001534:	2b00      	cmp	r3, #0
 8001536:	d005      	beq.n	8001544 <HAL_RCC_OscConfig+0x64>
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	699b      	ldr	r3, [r3, #24]
 800153c:	2b00      	cmp	r3, #0
 800153e:	d101      	bne.n	8001544 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001540:	2301      	movs	r3, #1
 8001542:	e3df      	b.n	8001d04 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	6a1a      	ldr	r2, [r3, #32]
 8001548:	4b81      	ldr	r3, [pc, #516]	@ (8001750 <HAL_RCC_OscConfig+0x270>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f003 0308 	and.w	r3, r3, #8
 8001550:	2b00      	cmp	r3, #0
 8001552:	d004      	beq.n	800155e <HAL_RCC_OscConfig+0x7e>
 8001554:	4b7e      	ldr	r3, [pc, #504]	@ (8001750 <HAL_RCC_OscConfig+0x270>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800155c:	e005      	b.n	800156a <HAL_RCC_OscConfig+0x8a>
 800155e:	4b7c      	ldr	r3, [pc, #496]	@ (8001750 <HAL_RCC_OscConfig+0x270>)
 8001560:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001564:	091b      	lsrs	r3, r3, #4
 8001566:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800156a:	4293      	cmp	r3, r2
 800156c:	d223      	bcs.n	80015b6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6a1b      	ldr	r3, [r3, #32]
 8001572:	4618      	mov	r0, r3
 8001574:	f000 fd92 	bl	800209c <RCC_SetFlashLatencyFromMSIRange>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d001      	beq.n	8001582 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800157e:	2301      	movs	r3, #1
 8001580:	e3c0      	b.n	8001d04 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001582:	4b73      	ldr	r3, [pc, #460]	@ (8001750 <HAL_RCC_OscConfig+0x270>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	4a72      	ldr	r2, [pc, #456]	@ (8001750 <HAL_RCC_OscConfig+0x270>)
 8001588:	f043 0308 	orr.w	r3, r3, #8
 800158c:	6013      	str	r3, [r2, #0]
 800158e:	4b70      	ldr	r3, [pc, #448]	@ (8001750 <HAL_RCC_OscConfig+0x270>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6a1b      	ldr	r3, [r3, #32]
 800159a:	496d      	ldr	r1, [pc, #436]	@ (8001750 <HAL_RCC_OscConfig+0x270>)
 800159c:	4313      	orrs	r3, r2
 800159e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80015a0:	4b6b      	ldr	r3, [pc, #428]	@ (8001750 <HAL_RCC_OscConfig+0x270>)
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	69db      	ldr	r3, [r3, #28]
 80015ac:	021b      	lsls	r3, r3, #8
 80015ae:	4968      	ldr	r1, [pc, #416]	@ (8001750 <HAL_RCC_OscConfig+0x270>)
 80015b0:	4313      	orrs	r3, r2
 80015b2:	604b      	str	r3, [r1, #4]
 80015b4:	e025      	b.n	8001602 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80015b6:	4b66      	ldr	r3, [pc, #408]	@ (8001750 <HAL_RCC_OscConfig+0x270>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	4a65      	ldr	r2, [pc, #404]	@ (8001750 <HAL_RCC_OscConfig+0x270>)
 80015bc:	f043 0308 	orr.w	r3, r3, #8
 80015c0:	6013      	str	r3, [r2, #0]
 80015c2:	4b63      	ldr	r3, [pc, #396]	@ (8001750 <HAL_RCC_OscConfig+0x270>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6a1b      	ldr	r3, [r3, #32]
 80015ce:	4960      	ldr	r1, [pc, #384]	@ (8001750 <HAL_RCC_OscConfig+0x270>)
 80015d0:	4313      	orrs	r3, r2
 80015d2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80015d4:	4b5e      	ldr	r3, [pc, #376]	@ (8001750 <HAL_RCC_OscConfig+0x270>)
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	69db      	ldr	r3, [r3, #28]
 80015e0:	021b      	lsls	r3, r3, #8
 80015e2:	495b      	ldr	r1, [pc, #364]	@ (8001750 <HAL_RCC_OscConfig+0x270>)
 80015e4:	4313      	orrs	r3, r2
 80015e6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80015e8:	69bb      	ldr	r3, [r7, #24]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d109      	bne.n	8001602 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	6a1b      	ldr	r3, [r3, #32]
 80015f2:	4618      	mov	r0, r3
 80015f4:	f000 fd52 	bl	800209c <RCC_SetFlashLatencyFromMSIRange>
 80015f8:	4603      	mov	r3, r0
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d001      	beq.n	8001602 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80015fe:	2301      	movs	r3, #1
 8001600:	e380      	b.n	8001d04 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001602:	f000 fc87 	bl	8001f14 <HAL_RCC_GetSysClockFreq>
 8001606:	4602      	mov	r2, r0
 8001608:	4b51      	ldr	r3, [pc, #324]	@ (8001750 <HAL_RCC_OscConfig+0x270>)
 800160a:	689b      	ldr	r3, [r3, #8]
 800160c:	091b      	lsrs	r3, r3, #4
 800160e:	f003 030f 	and.w	r3, r3, #15
 8001612:	4950      	ldr	r1, [pc, #320]	@ (8001754 <HAL_RCC_OscConfig+0x274>)
 8001614:	5ccb      	ldrb	r3, [r1, r3]
 8001616:	f003 031f 	and.w	r3, r3, #31
 800161a:	fa22 f303 	lsr.w	r3, r2, r3
 800161e:	4a4e      	ldr	r2, [pc, #312]	@ (8001758 <HAL_RCC_OscConfig+0x278>)
 8001620:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001622:	4b4e      	ldr	r3, [pc, #312]	@ (800175c <HAL_RCC_OscConfig+0x27c>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	4618      	mov	r0, r3
 8001628:	f7ff fa6e 	bl	8000b08 <HAL_InitTick>
 800162c:	4603      	mov	r3, r0
 800162e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001630:	7bfb      	ldrb	r3, [r7, #15]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d052      	beq.n	80016dc <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001636:	7bfb      	ldrb	r3, [r7, #15]
 8001638:	e364      	b.n	8001d04 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	699b      	ldr	r3, [r3, #24]
 800163e:	2b00      	cmp	r3, #0
 8001640:	d032      	beq.n	80016a8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001642:	4b43      	ldr	r3, [pc, #268]	@ (8001750 <HAL_RCC_OscConfig+0x270>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4a42      	ldr	r2, [pc, #264]	@ (8001750 <HAL_RCC_OscConfig+0x270>)
 8001648:	f043 0301 	orr.w	r3, r3, #1
 800164c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800164e:	f7ff faab 	bl	8000ba8 <HAL_GetTick>
 8001652:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001654:	e008      	b.n	8001668 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001656:	f7ff faa7 	bl	8000ba8 <HAL_GetTick>
 800165a:	4602      	mov	r2, r0
 800165c:	693b      	ldr	r3, [r7, #16]
 800165e:	1ad3      	subs	r3, r2, r3
 8001660:	2b02      	cmp	r3, #2
 8001662:	d901      	bls.n	8001668 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001664:	2303      	movs	r3, #3
 8001666:	e34d      	b.n	8001d04 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001668:	4b39      	ldr	r3, [pc, #228]	@ (8001750 <HAL_RCC_OscConfig+0x270>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f003 0302 	and.w	r3, r3, #2
 8001670:	2b00      	cmp	r3, #0
 8001672:	d0f0      	beq.n	8001656 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001674:	4b36      	ldr	r3, [pc, #216]	@ (8001750 <HAL_RCC_OscConfig+0x270>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a35      	ldr	r2, [pc, #212]	@ (8001750 <HAL_RCC_OscConfig+0x270>)
 800167a:	f043 0308 	orr.w	r3, r3, #8
 800167e:	6013      	str	r3, [r2, #0]
 8001680:	4b33      	ldr	r3, [pc, #204]	@ (8001750 <HAL_RCC_OscConfig+0x270>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6a1b      	ldr	r3, [r3, #32]
 800168c:	4930      	ldr	r1, [pc, #192]	@ (8001750 <HAL_RCC_OscConfig+0x270>)
 800168e:	4313      	orrs	r3, r2
 8001690:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001692:	4b2f      	ldr	r3, [pc, #188]	@ (8001750 <HAL_RCC_OscConfig+0x270>)
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	69db      	ldr	r3, [r3, #28]
 800169e:	021b      	lsls	r3, r3, #8
 80016a0:	492b      	ldr	r1, [pc, #172]	@ (8001750 <HAL_RCC_OscConfig+0x270>)
 80016a2:	4313      	orrs	r3, r2
 80016a4:	604b      	str	r3, [r1, #4]
 80016a6:	e01a      	b.n	80016de <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80016a8:	4b29      	ldr	r3, [pc, #164]	@ (8001750 <HAL_RCC_OscConfig+0x270>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4a28      	ldr	r2, [pc, #160]	@ (8001750 <HAL_RCC_OscConfig+0x270>)
 80016ae:	f023 0301 	bic.w	r3, r3, #1
 80016b2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80016b4:	f7ff fa78 	bl	8000ba8 <HAL_GetTick>
 80016b8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80016ba:	e008      	b.n	80016ce <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80016bc:	f7ff fa74 	bl	8000ba8 <HAL_GetTick>
 80016c0:	4602      	mov	r2, r0
 80016c2:	693b      	ldr	r3, [r7, #16]
 80016c4:	1ad3      	subs	r3, r2, r3
 80016c6:	2b02      	cmp	r3, #2
 80016c8:	d901      	bls.n	80016ce <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80016ca:	2303      	movs	r3, #3
 80016cc:	e31a      	b.n	8001d04 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80016ce:	4b20      	ldr	r3, [pc, #128]	@ (8001750 <HAL_RCC_OscConfig+0x270>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f003 0302 	and.w	r3, r3, #2
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d1f0      	bne.n	80016bc <HAL_RCC_OscConfig+0x1dc>
 80016da:	e000      	b.n	80016de <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80016dc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f003 0301 	and.w	r3, r3, #1
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d073      	beq.n	80017d2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80016ea:	69bb      	ldr	r3, [r7, #24]
 80016ec:	2b08      	cmp	r3, #8
 80016ee:	d005      	beq.n	80016fc <HAL_RCC_OscConfig+0x21c>
 80016f0:	69bb      	ldr	r3, [r7, #24]
 80016f2:	2b0c      	cmp	r3, #12
 80016f4:	d10e      	bne.n	8001714 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80016f6:	697b      	ldr	r3, [r7, #20]
 80016f8:	2b03      	cmp	r3, #3
 80016fa:	d10b      	bne.n	8001714 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016fc:	4b14      	ldr	r3, [pc, #80]	@ (8001750 <HAL_RCC_OscConfig+0x270>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001704:	2b00      	cmp	r3, #0
 8001706:	d063      	beq.n	80017d0 <HAL_RCC_OscConfig+0x2f0>
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	2b00      	cmp	r3, #0
 800170e:	d15f      	bne.n	80017d0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001710:	2301      	movs	r3, #1
 8001712:	e2f7      	b.n	8001d04 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800171c:	d106      	bne.n	800172c <HAL_RCC_OscConfig+0x24c>
 800171e:	4b0c      	ldr	r3, [pc, #48]	@ (8001750 <HAL_RCC_OscConfig+0x270>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	4a0b      	ldr	r2, [pc, #44]	@ (8001750 <HAL_RCC_OscConfig+0x270>)
 8001724:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001728:	6013      	str	r3, [r2, #0]
 800172a:	e025      	b.n	8001778 <HAL_RCC_OscConfig+0x298>
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001734:	d114      	bne.n	8001760 <HAL_RCC_OscConfig+0x280>
 8001736:	4b06      	ldr	r3, [pc, #24]	@ (8001750 <HAL_RCC_OscConfig+0x270>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4a05      	ldr	r2, [pc, #20]	@ (8001750 <HAL_RCC_OscConfig+0x270>)
 800173c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001740:	6013      	str	r3, [r2, #0]
 8001742:	4b03      	ldr	r3, [pc, #12]	@ (8001750 <HAL_RCC_OscConfig+0x270>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4a02      	ldr	r2, [pc, #8]	@ (8001750 <HAL_RCC_OscConfig+0x270>)
 8001748:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800174c:	6013      	str	r3, [r2, #0]
 800174e:	e013      	b.n	8001778 <HAL_RCC_OscConfig+0x298>
 8001750:	40021000 	.word	0x40021000
 8001754:	08003b0c 	.word	0x08003b0c
 8001758:	20000000 	.word	0x20000000
 800175c:	20000004 	.word	0x20000004
 8001760:	4ba0      	ldr	r3, [pc, #640]	@ (80019e4 <HAL_RCC_OscConfig+0x504>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4a9f      	ldr	r2, [pc, #636]	@ (80019e4 <HAL_RCC_OscConfig+0x504>)
 8001766:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800176a:	6013      	str	r3, [r2, #0]
 800176c:	4b9d      	ldr	r3, [pc, #628]	@ (80019e4 <HAL_RCC_OscConfig+0x504>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a9c      	ldr	r2, [pc, #624]	@ (80019e4 <HAL_RCC_OscConfig+0x504>)
 8001772:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001776:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d013      	beq.n	80017a8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001780:	f7ff fa12 	bl	8000ba8 <HAL_GetTick>
 8001784:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001786:	e008      	b.n	800179a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001788:	f7ff fa0e 	bl	8000ba8 <HAL_GetTick>
 800178c:	4602      	mov	r2, r0
 800178e:	693b      	ldr	r3, [r7, #16]
 8001790:	1ad3      	subs	r3, r2, r3
 8001792:	2b64      	cmp	r3, #100	@ 0x64
 8001794:	d901      	bls.n	800179a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001796:	2303      	movs	r3, #3
 8001798:	e2b4      	b.n	8001d04 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800179a:	4b92      	ldr	r3, [pc, #584]	@ (80019e4 <HAL_RCC_OscConfig+0x504>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d0f0      	beq.n	8001788 <HAL_RCC_OscConfig+0x2a8>
 80017a6:	e014      	b.n	80017d2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017a8:	f7ff f9fe 	bl	8000ba8 <HAL_GetTick>
 80017ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80017ae:	e008      	b.n	80017c2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017b0:	f7ff f9fa 	bl	8000ba8 <HAL_GetTick>
 80017b4:	4602      	mov	r2, r0
 80017b6:	693b      	ldr	r3, [r7, #16]
 80017b8:	1ad3      	subs	r3, r2, r3
 80017ba:	2b64      	cmp	r3, #100	@ 0x64
 80017bc:	d901      	bls.n	80017c2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80017be:	2303      	movs	r3, #3
 80017c0:	e2a0      	b.n	8001d04 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80017c2:	4b88      	ldr	r3, [pc, #544]	@ (80019e4 <HAL_RCC_OscConfig+0x504>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d1f0      	bne.n	80017b0 <HAL_RCC_OscConfig+0x2d0>
 80017ce:	e000      	b.n	80017d2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f003 0302 	and.w	r3, r3, #2
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d060      	beq.n	80018a0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80017de:	69bb      	ldr	r3, [r7, #24]
 80017e0:	2b04      	cmp	r3, #4
 80017e2:	d005      	beq.n	80017f0 <HAL_RCC_OscConfig+0x310>
 80017e4:	69bb      	ldr	r3, [r7, #24]
 80017e6:	2b0c      	cmp	r3, #12
 80017e8:	d119      	bne.n	800181e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80017ea:	697b      	ldr	r3, [r7, #20]
 80017ec:	2b02      	cmp	r3, #2
 80017ee:	d116      	bne.n	800181e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80017f0:	4b7c      	ldr	r3, [pc, #496]	@ (80019e4 <HAL_RCC_OscConfig+0x504>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d005      	beq.n	8001808 <HAL_RCC_OscConfig+0x328>
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	68db      	ldr	r3, [r3, #12]
 8001800:	2b00      	cmp	r3, #0
 8001802:	d101      	bne.n	8001808 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001804:	2301      	movs	r3, #1
 8001806:	e27d      	b.n	8001d04 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001808:	4b76      	ldr	r3, [pc, #472]	@ (80019e4 <HAL_RCC_OscConfig+0x504>)
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	691b      	ldr	r3, [r3, #16]
 8001814:	061b      	lsls	r3, r3, #24
 8001816:	4973      	ldr	r1, [pc, #460]	@ (80019e4 <HAL_RCC_OscConfig+0x504>)
 8001818:	4313      	orrs	r3, r2
 800181a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800181c:	e040      	b.n	80018a0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	68db      	ldr	r3, [r3, #12]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d023      	beq.n	800186e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001826:	4b6f      	ldr	r3, [pc, #444]	@ (80019e4 <HAL_RCC_OscConfig+0x504>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4a6e      	ldr	r2, [pc, #440]	@ (80019e4 <HAL_RCC_OscConfig+0x504>)
 800182c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001830:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001832:	f7ff f9b9 	bl	8000ba8 <HAL_GetTick>
 8001836:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001838:	e008      	b.n	800184c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800183a:	f7ff f9b5 	bl	8000ba8 <HAL_GetTick>
 800183e:	4602      	mov	r2, r0
 8001840:	693b      	ldr	r3, [r7, #16]
 8001842:	1ad3      	subs	r3, r2, r3
 8001844:	2b02      	cmp	r3, #2
 8001846:	d901      	bls.n	800184c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001848:	2303      	movs	r3, #3
 800184a:	e25b      	b.n	8001d04 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800184c:	4b65      	ldr	r3, [pc, #404]	@ (80019e4 <HAL_RCC_OscConfig+0x504>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001854:	2b00      	cmp	r3, #0
 8001856:	d0f0      	beq.n	800183a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001858:	4b62      	ldr	r3, [pc, #392]	@ (80019e4 <HAL_RCC_OscConfig+0x504>)
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	691b      	ldr	r3, [r3, #16]
 8001864:	061b      	lsls	r3, r3, #24
 8001866:	495f      	ldr	r1, [pc, #380]	@ (80019e4 <HAL_RCC_OscConfig+0x504>)
 8001868:	4313      	orrs	r3, r2
 800186a:	604b      	str	r3, [r1, #4]
 800186c:	e018      	b.n	80018a0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800186e:	4b5d      	ldr	r3, [pc, #372]	@ (80019e4 <HAL_RCC_OscConfig+0x504>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4a5c      	ldr	r2, [pc, #368]	@ (80019e4 <HAL_RCC_OscConfig+0x504>)
 8001874:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001878:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800187a:	f7ff f995 	bl	8000ba8 <HAL_GetTick>
 800187e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001880:	e008      	b.n	8001894 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001882:	f7ff f991 	bl	8000ba8 <HAL_GetTick>
 8001886:	4602      	mov	r2, r0
 8001888:	693b      	ldr	r3, [r7, #16]
 800188a:	1ad3      	subs	r3, r2, r3
 800188c:	2b02      	cmp	r3, #2
 800188e:	d901      	bls.n	8001894 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001890:	2303      	movs	r3, #3
 8001892:	e237      	b.n	8001d04 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001894:	4b53      	ldr	r3, [pc, #332]	@ (80019e4 <HAL_RCC_OscConfig+0x504>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800189c:	2b00      	cmp	r3, #0
 800189e:	d1f0      	bne.n	8001882 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f003 0308 	and.w	r3, r3, #8
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d03c      	beq.n	8001926 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	695b      	ldr	r3, [r3, #20]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d01c      	beq.n	80018ee <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018b4:	4b4b      	ldr	r3, [pc, #300]	@ (80019e4 <HAL_RCC_OscConfig+0x504>)
 80018b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80018ba:	4a4a      	ldr	r2, [pc, #296]	@ (80019e4 <HAL_RCC_OscConfig+0x504>)
 80018bc:	f043 0301 	orr.w	r3, r3, #1
 80018c0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018c4:	f7ff f970 	bl	8000ba8 <HAL_GetTick>
 80018c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80018ca:	e008      	b.n	80018de <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018cc:	f7ff f96c 	bl	8000ba8 <HAL_GetTick>
 80018d0:	4602      	mov	r2, r0
 80018d2:	693b      	ldr	r3, [r7, #16]
 80018d4:	1ad3      	subs	r3, r2, r3
 80018d6:	2b02      	cmp	r3, #2
 80018d8:	d901      	bls.n	80018de <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80018da:	2303      	movs	r3, #3
 80018dc:	e212      	b.n	8001d04 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80018de:	4b41      	ldr	r3, [pc, #260]	@ (80019e4 <HAL_RCC_OscConfig+0x504>)
 80018e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80018e4:	f003 0302 	and.w	r3, r3, #2
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d0ef      	beq.n	80018cc <HAL_RCC_OscConfig+0x3ec>
 80018ec:	e01b      	b.n	8001926 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018ee:	4b3d      	ldr	r3, [pc, #244]	@ (80019e4 <HAL_RCC_OscConfig+0x504>)
 80018f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80018f4:	4a3b      	ldr	r2, [pc, #236]	@ (80019e4 <HAL_RCC_OscConfig+0x504>)
 80018f6:	f023 0301 	bic.w	r3, r3, #1
 80018fa:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018fe:	f7ff f953 	bl	8000ba8 <HAL_GetTick>
 8001902:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001904:	e008      	b.n	8001918 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001906:	f7ff f94f 	bl	8000ba8 <HAL_GetTick>
 800190a:	4602      	mov	r2, r0
 800190c:	693b      	ldr	r3, [r7, #16]
 800190e:	1ad3      	subs	r3, r2, r3
 8001910:	2b02      	cmp	r3, #2
 8001912:	d901      	bls.n	8001918 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001914:	2303      	movs	r3, #3
 8001916:	e1f5      	b.n	8001d04 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001918:	4b32      	ldr	r3, [pc, #200]	@ (80019e4 <HAL_RCC_OscConfig+0x504>)
 800191a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800191e:	f003 0302 	and.w	r3, r3, #2
 8001922:	2b00      	cmp	r3, #0
 8001924:	d1ef      	bne.n	8001906 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f003 0304 	and.w	r3, r3, #4
 800192e:	2b00      	cmp	r3, #0
 8001930:	f000 80a6 	beq.w	8001a80 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001934:	2300      	movs	r3, #0
 8001936:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001938:	4b2a      	ldr	r3, [pc, #168]	@ (80019e4 <HAL_RCC_OscConfig+0x504>)
 800193a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800193c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001940:	2b00      	cmp	r3, #0
 8001942:	d10d      	bne.n	8001960 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001944:	4b27      	ldr	r3, [pc, #156]	@ (80019e4 <HAL_RCC_OscConfig+0x504>)
 8001946:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001948:	4a26      	ldr	r2, [pc, #152]	@ (80019e4 <HAL_RCC_OscConfig+0x504>)
 800194a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800194e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001950:	4b24      	ldr	r3, [pc, #144]	@ (80019e4 <HAL_RCC_OscConfig+0x504>)
 8001952:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001954:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001958:	60bb      	str	r3, [r7, #8]
 800195a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800195c:	2301      	movs	r3, #1
 800195e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001960:	4b21      	ldr	r3, [pc, #132]	@ (80019e8 <HAL_RCC_OscConfig+0x508>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001968:	2b00      	cmp	r3, #0
 800196a:	d118      	bne.n	800199e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800196c:	4b1e      	ldr	r3, [pc, #120]	@ (80019e8 <HAL_RCC_OscConfig+0x508>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a1d      	ldr	r2, [pc, #116]	@ (80019e8 <HAL_RCC_OscConfig+0x508>)
 8001972:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001976:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001978:	f7ff f916 	bl	8000ba8 <HAL_GetTick>
 800197c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800197e:	e008      	b.n	8001992 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001980:	f7ff f912 	bl	8000ba8 <HAL_GetTick>
 8001984:	4602      	mov	r2, r0
 8001986:	693b      	ldr	r3, [r7, #16]
 8001988:	1ad3      	subs	r3, r2, r3
 800198a:	2b02      	cmp	r3, #2
 800198c:	d901      	bls.n	8001992 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800198e:	2303      	movs	r3, #3
 8001990:	e1b8      	b.n	8001d04 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001992:	4b15      	ldr	r3, [pc, #84]	@ (80019e8 <HAL_RCC_OscConfig+0x508>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800199a:	2b00      	cmp	r3, #0
 800199c:	d0f0      	beq.n	8001980 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	689b      	ldr	r3, [r3, #8]
 80019a2:	2b01      	cmp	r3, #1
 80019a4:	d108      	bne.n	80019b8 <HAL_RCC_OscConfig+0x4d8>
 80019a6:	4b0f      	ldr	r3, [pc, #60]	@ (80019e4 <HAL_RCC_OscConfig+0x504>)
 80019a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80019ac:	4a0d      	ldr	r2, [pc, #52]	@ (80019e4 <HAL_RCC_OscConfig+0x504>)
 80019ae:	f043 0301 	orr.w	r3, r3, #1
 80019b2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80019b6:	e029      	b.n	8001a0c <HAL_RCC_OscConfig+0x52c>
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	689b      	ldr	r3, [r3, #8]
 80019bc:	2b05      	cmp	r3, #5
 80019be:	d115      	bne.n	80019ec <HAL_RCC_OscConfig+0x50c>
 80019c0:	4b08      	ldr	r3, [pc, #32]	@ (80019e4 <HAL_RCC_OscConfig+0x504>)
 80019c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80019c6:	4a07      	ldr	r2, [pc, #28]	@ (80019e4 <HAL_RCC_OscConfig+0x504>)
 80019c8:	f043 0304 	orr.w	r3, r3, #4
 80019cc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80019d0:	4b04      	ldr	r3, [pc, #16]	@ (80019e4 <HAL_RCC_OscConfig+0x504>)
 80019d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80019d6:	4a03      	ldr	r2, [pc, #12]	@ (80019e4 <HAL_RCC_OscConfig+0x504>)
 80019d8:	f043 0301 	orr.w	r3, r3, #1
 80019dc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80019e0:	e014      	b.n	8001a0c <HAL_RCC_OscConfig+0x52c>
 80019e2:	bf00      	nop
 80019e4:	40021000 	.word	0x40021000
 80019e8:	40007000 	.word	0x40007000
 80019ec:	4b9d      	ldr	r3, [pc, #628]	@ (8001c64 <HAL_RCC_OscConfig+0x784>)
 80019ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80019f2:	4a9c      	ldr	r2, [pc, #624]	@ (8001c64 <HAL_RCC_OscConfig+0x784>)
 80019f4:	f023 0301 	bic.w	r3, r3, #1
 80019f8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80019fc:	4b99      	ldr	r3, [pc, #612]	@ (8001c64 <HAL_RCC_OscConfig+0x784>)
 80019fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a02:	4a98      	ldr	r2, [pc, #608]	@ (8001c64 <HAL_RCC_OscConfig+0x784>)
 8001a04:	f023 0304 	bic.w	r3, r3, #4
 8001a08:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	689b      	ldr	r3, [r3, #8]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d016      	beq.n	8001a42 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a14:	f7ff f8c8 	bl	8000ba8 <HAL_GetTick>
 8001a18:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a1a:	e00a      	b.n	8001a32 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a1c:	f7ff f8c4 	bl	8000ba8 <HAL_GetTick>
 8001a20:	4602      	mov	r2, r0
 8001a22:	693b      	ldr	r3, [r7, #16]
 8001a24:	1ad3      	subs	r3, r2, r3
 8001a26:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d901      	bls.n	8001a32 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001a2e:	2303      	movs	r3, #3
 8001a30:	e168      	b.n	8001d04 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a32:	4b8c      	ldr	r3, [pc, #560]	@ (8001c64 <HAL_RCC_OscConfig+0x784>)
 8001a34:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a38:	f003 0302 	and.w	r3, r3, #2
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d0ed      	beq.n	8001a1c <HAL_RCC_OscConfig+0x53c>
 8001a40:	e015      	b.n	8001a6e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a42:	f7ff f8b1 	bl	8000ba8 <HAL_GetTick>
 8001a46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a48:	e00a      	b.n	8001a60 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a4a:	f7ff f8ad 	bl	8000ba8 <HAL_GetTick>
 8001a4e:	4602      	mov	r2, r0
 8001a50:	693b      	ldr	r3, [r7, #16]
 8001a52:	1ad3      	subs	r3, r2, r3
 8001a54:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a58:	4293      	cmp	r3, r2
 8001a5a:	d901      	bls.n	8001a60 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001a5c:	2303      	movs	r3, #3
 8001a5e:	e151      	b.n	8001d04 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a60:	4b80      	ldr	r3, [pc, #512]	@ (8001c64 <HAL_RCC_OscConfig+0x784>)
 8001a62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a66:	f003 0302 	and.w	r3, r3, #2
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d1ed      	bne.n	8001a4a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001a6e:	7ffb      	ldrb	r3, [r7, #31]
 8001a70:	2b01      	cmp	r3, #1
 8001a72:	d105      	bne.n	8001a80 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a74:	4b7b      	ldr	r3, [pc, #492]	@ (8001c64 <HAL_RCC_OscConfig+0x784>)
 8001a76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a78:	4a7a      	ldr	r2, [pc, #488]	@ (8001c64 <HAL_RCC_OscConfig+0x784>)
 8001a7a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001a7e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f003 0320 	and.w	r3, r3, #32
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d03c      	beq.n	8001b06 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d01c      	beq.n	8001ace <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001a94:	4b73      	ldr	r3, [pc, #460]	@ (8001c64 <HAL_RCC_OscConfig+0x784>)
 8001a96:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001a9a:	4a72      	ldr	r2, [pc, #456]	@ (8001c64 <HAL_RCC_OscConfig+0x784>)
 8001a9c:	f043 0301 	orr.w	r3, r3, #1
 8001aa0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001aa4:	f7ff f880 	bl	8000ba8 <HAL_GetTick>
 8001aa8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001aaa:	e008      	b.n	8001abe <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001aac:	f7ff f87c 	bl	8000ba8 <HAL_GetTick>
 8001ab0:	4602      	mov	r2, r0
 8001ab2:	693b      	ldr	r3, [r7, #16]
 8001ab4:	1ad3      	subs	r3, r2, r3
 8001ab6:	2b02      	cmp	r3, #2
 8001ab8:	d901      	bls.n	8001abe <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001aba:	2303      	movs	r3, #3
 8001abc:	e122      	b.n	8001d04 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001abe:	4b69      	ldr	r3, [pc, #420]	@ (8001c64 <HAL_RCC_OscConfig+0x784>)
 8001ac0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001ac4:	f003 0302 	and.w	r3, r3, #2
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d0ef      	beq.n	8001aac <HAL_RCC_OscConfig+0x5cc>
 8001acc:	e01b      	b.n	8001b06 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001ace:	4b65      	ldr	r3, [pc, #404]	@ (8001c64 <HAL_RCC_OscConfig+0x784>)
 8001ad0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001ad4:	4a63      	ldr	r2, [pc, #396]	@ (8001c64 <HAL_RCC_OscConfig+0x784>)
 8001ad6:	f023 0301 	bic.w	r3, r3, #1
 8001ada:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ade:	f7ff f863 	bl	8000ba8 <HAL_GetTick>
 8001ae2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001ae4:	e008      	b.n	8001af8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001ae6:	f7ff f85f 	bl	8000ba8 <HAL_GetTick>
 8001aea:	4602      	mov	r2, r0
 8001aec:	693b      	ldr	r3, [r7, #16]
 8001aee:	1ad3      	subs	r3, r2, r3
 8001af0:	2b02      	cmp	r3, #2
 8001af2:	d901      	bls.n	8001af8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001af4:	2303      	movs	r3, #3
 8001af6:	e105      	b.n	8001d04 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001af8:	4b5a      	ldr	r3, [pc, #360]	@ (8001c64 <HAL_RCC_OscConfig+0x784>)
 8001afa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001afe:	f003 0302 	and.w	r3, r3, #2
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d1ef      	bne.n	8001ae6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	f000 80f9 	beq.w	8001d02 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b14:	2b02      	cmp	r3, #2
 8001b16:	f040 80cf 	bne.w	8001cb8 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001b1a:	4b52      	ldr	r3, [pc, #328]	@ (8001c64 <HAL_RCC_OscConfig+0x784>)
 8001b1c:	68db      	ldr	r3, [r3, #12]
 8001b1e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	f003 0203 	and.w	r2, r3, #3
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b2a:	429a      	cmp	r2, r3
 8001b2c:	d12c      	bne.n	8001b88 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001b2e:	697b      	ldr	r3, [r7, #20]
 8001b30:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b38:	3b01      	subs	r3, #1
 8001b3a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b3c:	429a      	cmp	r2, r3
 8001b3e:	d123      	bne.n	8001b88 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b4a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001b4c:	429a      	cmp	r2, r3
 8001b4e:	d11b      	bne.n	8001b88 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001b50:	697b      	ldr	r3, [r7, #20]
 8001b52:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b5a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b5c:	429a      	cmp	r2, r3
 8001b5e:	d113      	bne.n	8001b88 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b60:	697b      	ldr	r3, [r7, #20]
 8001b62:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b6a:	085b      	lsrs	r3, r3, #1
 8001b6c:	3b01      	subs	r3, #1
 8001b6e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001b70:	429a      	cmp	r2, r3
 8001b72:	d109      	bne.n	8001b88 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001b74:	697b      	ldr	r3, [r7, #20]
 8001b76:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b7e:	085b      	lsrs	r3, r3, #1
 8001b80:	3b01      	subs	r3, #1
 8001b82:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b84:	429a      	cmp	r2, r3
 8001b86:	d071      	beq.n	8001c6c <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001b88:	69bb      	ldr	r3, [r7, #24]
 8001b8a:	2b0c      	cmp	r3, #12
 8001b8c:	d068      	beq.n	8001c60 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001b8e:	4b35      	ldr	r3, [pc, #212]	@ (8001c64 <HAL_RCC_OscConfig+0x784>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d105      	bne.n	8001ba6 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001b9a:	4b32      	ldr	r3, [pc, #200]	@ (8001c64 <HAL_RCC_OscConfig+0x784>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d001      	beq.n	8001baa <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	e0ac      	b.n	8001d04 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001baa:	4b2e      	ldr	r3, [pc, #184]	@ (8001c64 <HAL_RCC_OscConfig+0x784>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4a2d      	ldr	r2, [pc, #180]	@ (8001c64 <HAL_RCC_OscConfig+0x784>)
 8001bb0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001bb4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001bb6:	f7fe fff7 	bl	8000ba8 <HAL_GetTick>
 8001bba:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001bbc:	e008      	b.n	8001bd0 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bbe:	f7fe fff3 	bl	8000ba8 <HAL_GetTick>
 8001bc2:	4602      	mov	r2, r0
 8001bc4:	693b      	ldr	r3, [r7, #16]
 8001bc6:	1ad3      	subs	r3, r2, r3
 8001bc8:	2b02      	cmp	r3, #2
 8001bca:	d901      	bls.n	8001bd0 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8001bcc:	2303      	movs	r3, #3
 8001bce:	e099      	b.n	8001d04 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001bd0:	4b24      	ldr	r3, [pc, #144]	@ (8001c64 <HAL_RCC_OscConfig+0x784>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d1f0      	bne.n	8001bbe <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001bdc:	4b21      	ldr	r3, [pc, #132]	@ (8001c64 <HAL_RCC_OscConfig+0x784>)
 8001bde:	68da      	ldr	r2, [r3, #12]
 8001be0:	4b21      	ldr	r3, [pc, #132]	@ (8001c68 <HAL_RCC_OscConfig+0x788>)
 8001be2:	4013      	ands	r3, r2
 8001be4:	687a      	ldr	r2, [r7, #4]
 8001be6:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001be8:	687a      	ldr	r2, [r7, #4]
 8001bea:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001bec:	3a01      	subs	r2, #1
 8001bee:	0112      	lsls	r2, r2, #4
 8001bf0:	4311      	orrs	r1, r2
 8001bf2:	687a      	ldr	r2, [r7, #4]
 8001bf4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001bf6:	0212      	lsls	r2, r2, #8
 8001bf8:	4311      	orrs	r1, r2
 8001bfa:	687a      	ldr	r2, [r7, #4]
 8001bfc:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001bfe:	0852      	lsrs	r2, r2, #1
 8001c00:	3a01      	subs	r2, #1
 8001c02:	0552      	lsls	r2, r2, #21
 8001c04:	4311      	orrs	r1, r2
 8001c06:	687a      	ldr	r2, [r7, #4]
 8001c08:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001c0a:	0852      	lsrs	r2, r2, #1
 8001c0c:	3a01      	subs	r2, #1
 8001c0e:	0652      	lsls	r2, r2, #25
 8001c10:	4311      	orrs	r1, r2
 8001c12:	687a      	ldr	r2, [r7, #4]
 8001c14:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001c16:	06d2      	lsls	r2, r2, #27
 8001c18:	430a      	orrs	r2, r1
 8001c1a:	4912      	ldr	r1, [pc, #72]	@ (8001c64 <HAL_RCC_OscConfig+0x784>)
 8001c1c:	4313      	orrs	r3, r2
 8001c1e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001c20:	4b10      	ldr	r3, [pc, #64]	@ (8001c64 <HAL_RCC_OscConfig+0x784>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4a0f      	ldr	r2, [pc, #60]	@ (8001c64 <HAL_RCC_OscConfig+0x784>)
 8001c26:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001c2a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001c2c:	4b0d      	ldr	r3, [pc, #52]	@ (8001c64 <HAL_RCC_OscConfig+0x784>)
 8001c2e:	68db      	ldr	r3, [r3, #12]
 8001c30:	4a0c      	ldr	r2, [pc, #48]	@ (8001c64 <HAL_RCC_OscConfig+0x784>)
 8001c32:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001c36:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001c38:	f7fe ffb6 	bl	8000ba8 <HAL_GetTick>
 8001c3c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c3e:	e008      	b.n	8001c52 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c40:	f7fe ffb2 	bl	8000ba8 <HAL_GetTick>
 8001c44:	4602      	mov	r2, r0
 8001c46:	693b      	ldr	r3, [r7, #16]
 8001c48:	1ad3      	subs	r3, r2, r3
 8001c4a:	2b02      	cmp	r3, #2
 8001c4c:	d901      	bls.n	8001c52 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8001c4e:	2303      	movs	r3, #3
 8001c50:	e058      	b.n	8001d04 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c52:	4b04      	ldr	r3, [pc, #16]	@ (8001c64 <HAL_RCC_OscConfig+0x784>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d0f0      	beq.n	8001c40 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001c5e:	e050      	b.n	8001d02 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001c60:	2301      	movs	r3, #1
 8001c62:	e04f      	b.n	8001d04 <HAL_RCC_OscConfig+0x824>
 8001c64:	40021000 	.word	0x40021000
 8001c68:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c6c:	4b27      	ldr	r3, [pc, #156]	@ (8001d0c <HAL_RCC_OscConfig+0x82c>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d144      	bne.n	8001d02 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001c78:	4b24      	ldr	r3, [pc, #144]	@ (8001d0c <HAL_RCC_OscConfig+0x82c>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a23      	ldr	r2, [pc, #140]	@ (8001d0c <HAL_RCC_OscConfig+0x82c>)
 8001c7e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001c82:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001c84:	4b21      	ldr	r3, [pc, #132]	@ (8001d0c <HAL_RCC_OscConfig+0x82c>)
 8001c86:	68db      	ldr	r3, [r3, #12]
 8001c88:	4a20      	ldr	r2, [pc, #128]	@ (8001d0c <HAL_RCC_OscConfig+0x82c>)
 8001c8a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001c8e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001c90:	f7fe ff8a 	bl	8000ba8 <HAL_GetTick>
 8001c94:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c96:	e008      	b.n	8001caa <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c98:	f7fe ff86 	bl	8000ba8 <HAL_GetTick>
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	693b      	ldr	r3, [r7, #16]
 8001ca0:	1ad3      	subs	r3, r2, r3
 8001ca2:	2b02      	cmp	r3, #2
 8001ca4:	d901      	bls.n	8001caa <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8001ca6:	2303      	movs	r3, #3
 8001ca8:	e02c      	b.n	8001d04 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001caa:	4b18      	ldr	r3, [pc, #96]	@ (8001d0c <HAL_RCC_OscConfig+0x82c>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d0f0      	beq.n	8001c98 <HAL_RCC_OscConfig+0x7b8>
 8001cb6:	e024      	b.n	8001d02 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001cb8:	69bb      	ldr	r3, [r7, #24]
 8001cba:	2b0c      	cmp	r3, #12
 8001cbc:	d01f      	beq.n	8001cfe <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cbe:	4b13      	ldr	r3, [pc, #76]	@ (8001d0c <HAL_RCC_OscConfig+0x82c>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4a12      	ldr	r2, [pc, #72]	@ (8001d0c <HAL_RCC_OscConfig+0x82c>)
 8001cc4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001cc8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cca:	f7fe ff6d 	bl	8000ba8 <HAL_GetTick>
 8001cce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001cd0:	e008      	b.n	8001ce4 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cd2:	f7fe ff69 	bl	8000ba8 <HAL_GetTick>
 8001cd6:	4602      	mov	r2, r0
 8001cd8:	693b      	ldr	r3, [r7, #16]
 8001cda:	1ad3      	subs	r3, r2, r3
 8001cdc:	2b02      	cmp	r3, #2
 8001cde:	d901      	bls.n	8001ce4 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8001ce0:	2303      	movs	r3, #3
 8001ce2:	e00f      	b.n	8001d04 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ce4:	4b09      	ldr	r3, [pc, #36]	@ (8001d0c <HAL_RCC_OscConfig+0x82c>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d1f0      	bne.n	8001cd2 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001cf0:	4b06      	ldr	r3, [pc, #24]	@ (8001d0c <HAL_RCC_OscConfig+0x82c>)
 8001cf2:	68da      	ldr	r2, [r3, #12]
 8001cf4:	4905      	ldr	r1, [pc, #20]	@ (8001d0c <HAL_RCC_OscConfig+0x82c>)
 8001cf6:	4b06      	ldr	r3, [pc, #24]	@ (8001d10 <HAL_RCC_OscConfig+0x830>)
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	60cb      	str	r3, [r1, #12]
 8001cfc:	e001      	b.n	8001d02 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	e000      	b.n	8001d04 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8001d02:	2300      	movs	r3, #0
}
 8001d04:	4618      	mov	r0, r3
 8001d06:	3720      	adds	r7, #32
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}
 8001d0c:	40021000 	.word	0x40021000
 8001d10:	feeefffc 	.word	0xfeeefffc

08001d14 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b084      	sub	sp, #16
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
 8001d1c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d101      	bne.n	8001d28 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d24:	2301      	movs	r3, #1
 8001d26:	e0e7      	b.n	8001ef8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d28:	4b75      	ldr	r3, [pc, #468]	@ (8001f00 <HAL_RCC_ClockConfig+0x1ec>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f003 0307 	and.w	r3, r3, #7
 8001d30:	683a      	ldr	r2, [r7, #0]
 8001d32:	429a      	cmp	r2, r3
 8001d34:	d910      	bls.n	8001d58 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d36:	4b72      	ldr	r3, [pc, #456]	@ (8001f00 <HAL_RCC_ClockConfig+0x1ec>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f023 0207 	bic.w	r2, r3, #7
 8001d3e:	4970      	ldr	r1, [pc, #448]	@ (8001f00 <HAL_RCC_ClockConfig+0x1ec>)
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	4313      	orrs	r3, r2
 8001d44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d46:	4b6e      	ldr	r3, [pc, #440]	@ (8001f00 <HAL_RCC_ClockConfig+0x1ec>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f003 0307 	and.w	r3, r3, #7
 8001d4e:	683a      	ldr	r2, [r7, #0]
 8001d50:	429a      	cmp	r2, r3
 8001d52:	d001      	beq.n	8001d58 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001d54:	2301      	movs	r3, #1
 8001d56:	e0cf      	b.n	8001ef8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f003 0302 	and.w	r3, r3, #2
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d010      	beq.n	8001d86 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	689a      	ldr	r2, [r3, #8]
 8001d68:	4b66      	ldr	r3, [pc, #408]	@ (8001f04 <HAL_RCC_ClockConfig+0x1f0>)
 8001d6a:	689b      	ldr	r3, [r3, #8]
 8001d6c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001d70:	429a      	cmp	r2, r3
 8001d72:	d908      	bls.n	8001d86 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d74:	4b63      	ldr	r3, [pc, #396]	@ (8001f04 <HAL_RCC_ClockConfig+0x1f0>)
 8001d76:	689b      	ldr	r3, [r3, #8]
 8001d78:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	689b      	ldr	r3, [r3, #8]
 8001d80:	4960      	ldr	r1, [pc, #384]	@ (8001f04 <HAL_RCC_ClockConfig+0x1f0>)
 8001d82:	4313      	orrs	r3, r2
 8001d84:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f003 0301 	and.w	r3, r3, #1
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d04c      	beq.n	8001e2c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	2b03      	cmp	r3, #3
 8001d98:	d107      	bne.n	8001daa <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d9a:	4b5a      	ldr	r3, [pc, #360]	@ (8001f04 <HAL_RCC_ClockConfig+0x1f0>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d121      	bne.n	8001dea <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001da6:	2301      	movs	r3, #1
 8001da8:	e0a6      	b.n	8001ef8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	685b      	ldr	r3, [r3, #4]
 8001dae:	2b02      	cmp	r3, #2
 8001db0:	d107      	bne.n	8001dc2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001db2:	4b54      	ldr	r3, [pc, #336]	@ (8001f04 <HAL_RCC_ClockConfig+0x1f0>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d115      	bne.n	8001dea <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	e09a      	b.n	8001ef8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d107      	bne.n	8001dda <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001dca:	4b4e      	ldr	r3, [pc, #312]	@ (8001f04 <HAL_RCC_ClockConfig+0x1f0>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f003 0302 	and.w	r3, r3, #2
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d109      	bne.n	8001dea <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	e08e      	b.n	8001ef8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001dda:	4b4a      	ldr	r3, [pc, #296]	@ (8001f04 <HAL_RCC_ClockConfig+0x1f0>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d101      	bne.n	8001dea <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001de6:	2301      	movs	r3, #1
 8001de8:	e086      	b.n	8001ef8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001dea:	4b46      	ldr	r3, [pc, #280]	@ (8001f04 <HAL_RCC_ClockConfig+0x1f0>)
 8001dec:	689b      	ldr	r3, [r3, #8]
 8001dee:	f023 0203 	bic.w	r2, r3, #3
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	4943      	ldr	r1, [pc, #268]	@ (8001f04 <HAL_RCC_ClockConfig+0x1f0>)
 8001df8:	4313      	orrs	r3, r2
 8001dfa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001dfc:	f7fe fed4 	bl	8000ba8 <HAL_GetTick>
 8001e00:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e02:	e00a      	b.n	8001e1a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e04:	f7fe fed0 	bl	8000ba8 <HAL_GetTick>
 8001e08:	4602      	mov	r2, r0
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	1ad3      	subs	r3, r2, r3
 8001e0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d901      	bls.n	8001e1a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001e16:	2303      	movs	r3, #3
 8001e18:	e06e      	b.n	8001ef8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e1a:	4b3a      	ldr	r3, [pc, #232]	@ (8001f04 <HAL_RCC_ClockConfig+0x1f0>)
 8001e1c:	689b      	ldr	r3, [r3, #8]
 8001e1e:	f003 020c 	and.w	r2, r3, #12
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	009b      	lsls	r3, r3, #2
 8001e28:	429a      	cmp	r2, r3
 8001e2a:	d1eb      	bne.n	8001e04 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f003 0302 	and.w	r3, r3, #2
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d010      	beq.n	8001e5a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	689a      	ldr	r2, [r3, #8]
 8001e3c:	4b31      	ldr	r3, [pc, #196]	@ (8001f04 <HAL_RCC_ClockConfig+0x1f0>)
 8001e3e:	689b      	ldr	r3, [r3, #8]
 8001e40:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001e44:	429a      	cmp	r2, r3
 8001e46:	d208      	bcs.n	8001e5a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e48:	4b2e      	ldr	r3, [pc, #184]	@ (8001f04 <HAL_RCC_ClockConfig+0x1f0>)
 8001e4a:	689b      	ldr	r3, [r3, #8]
 8001e4c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	689b      	ldr	r3, [r3, #8]
 8001e54:	492b      	ldr	r1, [pc, #172]	@ (8001f04 <HAL_RCC_ClockConfig+0x1f0>)
 8001e56:	4313      	orrs	r3, r2
 8001e58:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e5a:	4b29      	ldr	r3, [pc, #164]	@ (8001f00 <HAL_RCC_ClockConfig+0x1ec>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f003 0307 	and.w	r3, r3, #7
 8001e62:	683a      	ldr	r2, [r7, #0]
 8001e64:	429a      	cmp	r2, r3
 8001e66:	d210      	bcs.n	8001e8a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e68:	4b25      	ldr	r3, [pc, #148]	@ (8001f00 <HAL_RCC_ClockConfig+0x1ec>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f023 0207 	bic.w	r2, r3, #7
 8001e70:	4923      	ldr	r1, [pc, #140]	@ (8001f00 <HAL_RCC_ClockConfig+0x1ec>)
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	4313      	orrs	r3, r2
 8001e76:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e78:	4b21      	ldr	r3, [pc, #132]	@ (8001f00 <HAL_RCC_ClockConfig+0x1ec>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f003 0307 	and.w	r3, r3, #7
 8001e80:	683a      	ldr	r2, [r7, #0]
 8001e82:	429a      	cmp	r2, r3
 8001e84:	d001      	beq.n	8001e8a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001e86:	2301      	movs	r3, #1
 8001e88:	e036      	b.n	8001ef8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f003 0304 	and.w	r3, r3, #4
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d008      	beq.n	8001ea8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e96:	4b1b      	ldr	r3, [pc, #108]	@ (8001f04 <HAL_RCC_ClockConfig+0x1f0>)
 8001e98:	689b      	ldr	r3, [r3, #8]
 8001e9a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	68db      	ldr	r3, [r3, #12]
 8001ea2:	4918      	ldr	r1, [pc, #96]	@ (8001f04 <HAL_RCC_ClockConfig+0x1f0>)
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f003 0308 	and.w	r3, r3, #8
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d009      	beq.n	8001ec8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001eb4:	4b13      	ldr	r3, [pc, #76]	@ (8001f04 <HAL_RCC_ClockConfig+0x1f0>)
 8001eb6:	689b      	ldr	r3, [r3, #8]
 8001eb8:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	691b      	ldr	r3, [r3, #16]
 8001ec0:	00db      	lsls	r3, r3, #3
 8001ec2:	4910      	ldr	r1, [pc, #64]	@ (8001f04 <HAL_RCC_ClockConfig+0x1f0>)
 8001ec4:	4313      	orrs	r3, r2
 8001ec6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001ec8:	f000 f824 	bl	8001f14 <HAL_RCC_GetSysClockFreq>
 8001ecc:	4602      	mov	r2, r0
 8001ece:	4b0d      	ldr	r3, [pc, #52]	@ (8001f04 <HAL_RCC_ClockConfig+0x1f0>)
 8001ed0:	689b      	ldr	r3, [r3, #8]
 8001ed2:	091b      	lsrs	r3, r3, #4
 8001ed4:	f003 030f 	and.w	r3, r3, #15
 8001ed8:	490b      	ldr	r1, [pc, #44]	@ (8001f08 <HAL_RCC_ClockConfig+0x1f4>)
 8001eda:	5ccb      	ldrb	r3, [r1, r3]
 8001edc:	f003 031f 	and.w	r3, r3, #31
 8001ee0:	fa22 f303 	lsr.w	r3, r2, r3
 8001ee4:	4a09      	ldr	r2, [pc, #36]	@ (8001f0c <HAL_RCC_ClockConfig+0x1f8>)
 8001ee6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001ee8:	4b09      	ldr	r3, [pc, #36]	@ (8001f10 <HAL_RCC_ClockConfig+0x1fc>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4618      	mov	r0, r3
 8001eee:	f7fe fe0b 	bl	8000b08 <HAL_InitTick>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	72fb      	strb	r3, [r7, #11]

  return status;
 8001ef6:	7afb      	ldrb	r3, [r7, #11]
}
 8001ef8:	4618      	mov	r0, r3
 8001efa:	3710      	adds	r7, #16
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bd80      	pop	{r7, pc}
 8001f00:	40022000 	.word	0x40022000
 8001f04:	40021000 	.word	0x40021000
 8001f08:	08003b0c 	.word	0x08003b0c
 8001f0c:	20000000 	.word	0x20000000
 8001f10:	20000004 	.word	0x20000004

08001f14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b089      	sub	sp, #36	@ 0x24
 8001f18:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	61fb      	str	r3, [r7, #28]
 8001f1e:	2300      	movs	r3, #0
 8001f20:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f22:	4b3e      	ldr	r3, [pc, #248]	@ (800201c <HAL_RCC_GetSysClockFreq+0x108>)
 8001f24:	689b      	ldr	r3, [r3, #8]
 8001f26:	f003 030c 	and.w	r3, r3, #12
 8001f2a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f2c:	4b3b      	ldr	r3, [pc, #236]	@ (800201c <HAL_RCC_GetSysClockFreq+0x108>)
 8001f2e:	68db      	ldr	r3, [r3, #12]
 8001f30:	f003 0303 	and.w	r3, r3, #3
 8001f34:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001f36:	693b      	ldr	r3, [r7, #16]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d005      	beq.n	8001f48 <HAL_RCC_GetSysClockFreq+0x34>
 8001f3c:	693b      	ldr	r3, [r7, #16]
 8001f3e:	2b0c      	cmp	r3, #12
 8001f40:	d121      	bne.n	8001f86 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	2b01      	cmp	r3, #1
 8001f46:	d11e      	bne.n	8001f86 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001f48:	4b34      	ldr	r3, [pc, #208]	@ (800201c <HAL_RCC_GetSysClockFreq+0x108>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f003 0308 	and.w	r3, r3, #8
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d107      	bne.n	8001f64 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001f54:	4b31      	ldr	r3, [pc, #196]	@ (800201c <HAL_RCC_GetSysClockFreq+0x108>)
 8001f56:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f5a:	0a1b      	lsrs	r3, r3, #8
 8001f5c:	f003 030f 	and.w	r3, r3, #15
 8001f60:	61fb      	str	r3, [r7, #28]
 8001f62:	e005      	b.n	8001f70 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001f64:	4b2d      	ldr	r3, [pc, #180]	@ (800201c <HAL_RCC_GetSysClockFreq+0x108>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	091b      	lsrs	r3, r3, #4
 8001f6a:	f003 030f 	and.w	r3, r3, #15
 8001f6e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001f70:	4a2b      	ldr	r2, [pc, #172]	@ (8002020 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001f72:	69fb      	ldr	r3, [r7, #28]
 8001f74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f78:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001f7a:	693b      	ldr	r3, [r7, #16]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d10d      	bne.n	8001f9c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001f80:	69fb      	ldr	r3, [r7, #28]
 8001f82:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001f84:	e00a      	b.n	8001f9c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001f86:	693b      	ldr	r3, [r7, #16]
 8001f88:	2b04      	cmp	r3, #4
 8001f8a:	d102      	bne.n	8001f92 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001f8c:	4b25      	ldr	r3, [pc, #148]	@ (8002024 <HAL_RCC_GetSysClockFreq+0x110>)
 8001f8e:	61bb      	str	r3, [r7, #24]
 8001f90:	e004      	b.n	8001f9c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001f92:	693b      	ldr	r3, [r7, #16]
 8001f94:	2b08      	cmp	r3, #8
 8001f96:	d101      	bne.n	8001f9c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001f98:	4b23      	ldr	r3, [pc, #140]	@ (8002028 <HAL_RCC_GetSysClockFreq+0x114>)
 8001f9a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001f9c:	693b      	ldr	r3, [r7, #16]
 8001f9e:	2b0c      	cmp	r3, #12
 8001fa0:	d134      	bne.n	800200c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001fa2:	4b1e      	ldr	r3, [pc, #120]	@ (800201c <HAL_RCC_GetSysClockFreq+0x108>)
 8001fa4:	68db      	ldr	r3, [r3, #12]
 8001fa6:	f003 0303 	and.w	r3, r3, #3
 8001faa:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001fac:	68bb      	ldr	r3, [r7, #8]
 8001fae:	2b02      	cmp	r3, #2
 8001fb0:	d003      	beq.n	8001fba <HAL_RCC_GetSysClockFreq+0xa6>
 8001fb2:	68bb      	ldr	r3, [r7, #8]
 8001fb4:	2b03      	cmp	r3, #3
 8001fb6:	d003      	beq.n	8001fc0 <HAL_RCC_GetSysClockFreq+0xac>
 8001fb8:	e005      	b.n	8001fc6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001fba:	4b1a      	ldr	r3, [pc, #104]	@ (8002024 <HAL_RCC_GetSysClockFreq+0x110>)
 8001fbc:	617b      	str	r3, [r7, #20]
      break;
 8001fbe:	e005      	b.n	8001fcc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001fc0:	4b19      	ldr	r3, [pc, #100]	@ (8002028 <HAL_RCC_GetSysClockFreq+0x114>)
 8001fc2:	617b      	str	r3, [r7, #20]
      break;
 8001fc4:	e002      	b.n	8001fcc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001fc6:	69fb      	ldr	r3, [r7, #28]
 8001fc8:	617b      	str	r3, [r7, #20]
      break;
 8001fca:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001fcc:	4b13      	ldr	r3, [pc, #76]	@ (800201c <HAL_RCC_GetSysClockFreq+0x108>)
 8001fce:	68db      	ldr	r3, [r3, #12]
 8001fd0:	091b      	lsrs	r3, r3, #4
 8001fd2:	f003 0307 	and.w	r3, r3, #7
 8001fd6:	3301      	adds	r3, #1
 8001fd8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001fda:	4b10      	ldr	r3, [pc, #64]	@ (800201c <HAL_RCC_GetSysClockFreq+0x108>)
 8001fdc:	68db      	ldr	r3, [r3, #12]
 8001fde:	0a1b      	lsrs	r3, r3, #8
 8001fe0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001fe4:	697a      	ldr	r2, [r7, #20]
 8001fe6:	fb03 f202 	mul.w	r2, r3, r2
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ff0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001ff2:	4b0a      	ldr	r3, [pc, #40]	@ (800201c <HAL_RCC_GetSysClockFreq+0x108>)
 8001ff4:	68db      	ldr	r3, [r3, #12]
 8001ff6:	0e5b      	lsrs	r3, r3, #25
 8001ff8:	f003 0303 	and.w	r3, r3, #3
 8001ffc:	3301      	adds	r3, #1
 8001ffe:	005b      	lsls	r3, r3, #1
 8002000:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002002:	697a      	ldr	r2, [r7, #20]
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	fbb2 f3f3 	udiv	r3, r2, r3
 800200a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800200c:	69bb      	ldr	r3, [r7, #24]
}
 800200e:	4618      	mov	r0, r3
 8002010:	3724      	adds	r7, #36	@ 0x24
 8002012:	46bd      	mov	sp, r7
 8002014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002018:	4770      	bx	lr
 800201a:	bf00      	nop
 800201c:	40021000 	.word	0x40021000
 8002020:	08003b24 	.word	0x08003b24
 8002024:	00f42400 	.word	0x00f42400
 8002028:	007a1200 	.word	0x007a1200

0800202c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800202c:	b480      	push	{r7}
 800202e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002030:	4b03      	ldr	r3, [pc, #12]	@ (8002040 <HAL_RCC_GetHCLKFreq+0x14>)
 8002032:	681b      	ldr	r3, [r3, #0]
}
 8002034:	4618      	mov	r0, r3
 8002036:	46bd      	mov	sp, r7
 8002038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203c:	4770      	bx	lr
 800203e:	bf00      	nop
 8002040:	20000000 	.word	0x20000000

08002044 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002048:	f7ff fff0 	bl	800202c <HAL_RCC_GetHCLKFreq>
 800204c:	4602      	mov	r2, r0
 800204e:	4b06      	ldr	r3, [pc, #24]	@ (8002068 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002050:	689b      	ldr	r3, [r3, #8]
 8002052:	0a1b      	lsrs	r3, r3, #8
 8002054:	f003 0307 	and.w	r3, r3, #7
 8002058:	4904      	ldr	r1, [pc, #16]	@ (800206c <HAL_RCC_GetPCLK1Freq+0x28>)
 800205a:	5ccb      	ldrb	r3, [r1, r3]
 800205c:	f003 031f 	and.w	r3, r3, #31
 8002060:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002064:	4618      	mov	r0, r3
 8002066:	bd80      	pop	{r7, pc}
 8002068:	40021000 	.word	0x40021000
 800206c:	08003b1c 	.word	0x08003b1c

08002070 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002074:	f7ff ffda 	bl	800202c <HAL_RCC_GetHCLKFreq>
 8002078:	4602      	mov	r2, r0
 800207a:	4b06      	ldr	r3, [pc, #24]	@ (8002094 <HAL_RCC_GetPCLK2Freq+0x24>)
 800207c:	689b      	ldr	r3, [r3, #8]
 800207e:	0adb      	lsrs	r3, r3, #11
 8002080:	f003 0307 	and.w	r3, r3, #7
 8002084:	4904      	ldr	r1, [pc, #16]	@ (8002098 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002086:	5ccb      	ldrb	r3, [r1, r3]
 8002088:	f003 031f 	and.w	r3, r3, #31
 800208c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002090:	4618      	mov	r0, r3
 8002092:	bd80      	pop	{r7, pc}
 8002094:	40021000 	.word	0x40021000
 8002098:	08003b1c 	.word	0x08003b1c

0800209c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b086      	sub	sp, #24
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80020a4:	2300      	movs	r3, #0
 80020a6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80020a8:	4b2a      	ldr	r3, [pc, #168]	@ (8002154 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d003      	beq.n	80020bc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80020b4:	f7ff f990 	bl	80013d8 <HAL_PWREx_GetVoltageRange>
 80020b8:	6178      	str	r0, [r7, #20]
 80020ba:	e014      	b.n	80020e6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80020bc:	4b25      	ldr	r3, [pc, #148]	@ (8002154 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020c0:	4a24      	ldr	r2, [pc, #144]	@ (8002154 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020c2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80020c6:	6593      	str	r3, [r2, #88]	@ 0x58
 80020c8:	4b22      	ldr	r3, [pc, #136]	@ (8002154 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020d0:	60fb      	str	r3, [r7, #12]
 80020d2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80020d4:	f7ff f980 	bl	80013d8 <HAL_PWREx_GetVoltageRange>
 80020d8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80020da:	4b1e      	ldr	r3, [pc, #120]	@ (8002154 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020de:	4a1d      	ldr	r2, [pc, #116]	@ (8002154 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020e0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80020e4:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80020e6:	697b      	ldr	r3, [r7, #20]
 80020e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80020ec:	d10b      	bne.n	8002106 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2b80      	cmp	r3, #128	@ 0x80
 80020f2:	d919      	bls.n	8002128 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2ba0      	cmp	r3, #160	@ 0xa0
 80020f8:	d902      	bls.n	8002100 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80020fa:	2302      	movs	r3, #2
 80020fc:	613b      	str	r3, [r7, #16]
 80020fe:	e013      	b.n	8002128 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002100:	2301      	movs	r3, #1
 8002102:	613b      	str	r3, [r7, #16]
 8002104:	e010      	b.n	8002128 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2b80      	cmp	r3, #128	@ 0x80
 800210a:	d902      	bls.n	8002112 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800210c:	2303      	movs	r3, #3
 800210e:	613b      	str	r3, [r7, #16]
 8002110:	e00a      	b.n	8002128 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2b80      	cmp	r3, #128	@ 0x80
 8002116:	d102      	bne.n	800211e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002118:	2302      	movs	r3, #2
 800211a:	613b      	str	r3, [r7, #16]
 800211c:	e004      	b.n	8002128 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2b70      	cmp	r3, #112	@ 0x70
 8002122:	d101      	bne.n	8002128 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002124:	2301      	movs	r3, #1
 8002126:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002128:	4b0b      	ldr	r3, [pc, #44]	@ (8002158 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f023 0207 	bic.w	r2, r3, #7
 8002130:	4909      	ldr	r1, [pc, #36]	@ (8002158 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002132:	693b      	ldr	r3, [r7, #16]
 8002134:	4313      	orrs	r3, r2
 8002136:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002138:	4b07      	ldr	r3, [pc, #28]	@ (8002158 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f003 0307 	and.w	r3, r3, #7
 8002140:	693a      	ldr	r2, [r7, #16]
 8002142:	429a      	cmp	r2, r3
 8002144:	d001      	beq.n	800214a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002146:	2301      	movs	r3, #1
 8002148:	e000      	b.n	800214c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800214a:	2300      	movs	r3, #0
}
 800214c:	4618      	mov	r0, r3
 800214e:	3718      	adds	r7, #24
 8002150:	46bd      	mov	sp, r7
 8002152:	bd80      	pop	{r7, pc}
 8002154:	40021000 	.word	0x40021000
 8002158:	40022000 	.word	0x40022000

0800215c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b086      	sub	sp, #24
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002164:	2300      	movs	r3, #0
 8002166:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002168:	2300      	movs	r3, #0
 800216a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002174:	2b00      	cmp	r3, #0
 8002176:	d041      	beq.n	80021fc <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800217c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002180:	d02a      	beq.n	80021d8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002182:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002186:	d824      	bhi.n	80021d2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002188:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800218c:	d008      	beq.n	80021a0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800218e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002192:	d81e      	bhi.n	80021d2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002194:	2b00      	cmp	r3, #0
 8002196:	d00a      	beq.n	80021ae <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002198:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800219c:	d010      	beq.n	80021c0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800219e:	e018      	b.n	80021d2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80021a0:	4b86      	ldr	r3, [pc, #536]	@ (80023bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021a2:	68db      	ldr	r3, [r3, #12]
 80021a4:	4a85      	ldr	r2, [pc, #532]	@ (80023bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021a6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80021aa:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80021ac:	e015      	b.n	80021da <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	3304      	adds	r3, #4
 80021b2:	2100      	movs	r1, #0
 80021b4:	4618      	mov	r0, r3
 80021b6:	f000 fadd 	bl	8002774 <RCCEx_PLLSAI1_Config>
 80021ba:	4603      	mov	r3, r0
 80021bc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80021be:	e00c      	b.n	80021da <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	3320      	adds	r3, #32
 80021c4:	2100      	movs	r1, #0
 80021c6:	4618      	mov	r0, r3
 80021c8:	f000 fbc6 	bl	8002958 <RCCEx_PLLSAI2_Config>
 80021cc:	4603      	mov	r3, r0
 80021ce:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80021d0:	e003      	b.n	80021da <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80021d2:	2301      	movs	r3, #1
 80021d4:	74fb      	strb	r3, [r7, #19]
      break;
 80021d6:	e000      	b.n	80021da <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80021d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80021da:	7cfb      	ldrb	r3, [r7, #19]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d10b      	bne.n	80021f8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80021e0:	4b76      	ldr	r3, [pc, #472]	@ (80023bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021e6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80021ee:	4973      	ldr	r1, [pc, #460]	@ (80023bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021f0:	4313      	orrs	r3, r2
 80021f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80021f6:	e001      	b.n	80021fc <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80021f8:	7cfb      	ldrb	r3, [r7, #19]
 80021fa:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002204:	2b00      	cmp	r3, #0
 8002206:	d041      	beq.n	800228c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800220c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002210:	d02a      	beq.n	8002268 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002212:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002216:	d824      	bhi.n	8002262 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002218:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800221c:	d008      	beq.n	8002230 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800221e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002222:	d81e      	bhi.n	8002262 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002224:	2b00      	cmp	r3, #0
 8002226:	d00a      	beq.n	800223e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002228:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800222c:	d010      	beq.n	8002250 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800222e:	e018      	b.n	8002262 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002230:	4b62      	ldr	r3, [pc, #392]	@ (80023bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002232:	68db      	ldr	r3, [r3, #12]
 8002234:	4a61      	ldr	r2, [pc, #388]	@ (80023bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002236:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800223a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800223c:	e015      	b.n	800226a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	3304      	adds	r3, #4
 8002242:	2100      	movs	r1, #0
 8002244:	4618      	mov	r0, r3
 8002246:	f000 fa95 	bl	8002774 <RCCEx_PLLSAI1_Config>
 800224a:	4603      	mov	r3, r0
 800224c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800224e:	e00c      	b.n	800226a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	3320      	adds	r3, #32
 8002254:	2100      	movs	r1, #0
 8002256:	4618      	mov	r0, r3
 8002258:	f000 fb7e 	bl	8002958 <RCCEx_PLLSAI2_Config>
 800225c:	4603      	mov	r3, r0
 800225e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002260:	e003      	b.n	800226a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002262:	2301      	movs	r3, #1
 8002264:	74fb      	strb	r3, [r7, #19]
      break;
 8002266:	e000      	b.n	800226a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002268:	bf00      	nop
    }

    if(ret == HAL_OK)
 800226a:	7cfb      	ldrb	r3, [r7, #19]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d10b      	bne.n	8002288 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002270:	4b52      	ldr	r3, [pc, #328]	@ (80023bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002272:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002276:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800227e:	494f      	ldr	r1, [pc, #316]	@ (80023bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002280:	4313      	orrs	r3, r2
 8002282:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002286:	e001      	b.n	800228c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002288:	7cfb      	ldrb	r3, [r7, #19]
 800228a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002294:	2b00      	cmp	r3, #0
 8002296:	f000 80a0 	beq.w	80023da <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800229a:	2300      	movs	r3, #0
 800229c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800229e:	4b47      	ldr	r3, [pc, #284]	@ (80023bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d101      	bne.n	80022ae <HAL_RCCEx_PeriphCLKConfig+0x152>
 80022aa:	2301      	movs	r3, #1
 80022ac:	e000      	b.n	80022b0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80022ae:	2300      	movs	r3, #0
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d00d      	beq.n	80022d0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022b4:	4b41      	ldr	r3, [pc, #260]	@ (80023bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022b8:	4a40      	ldr	r2, [pc, #256]	@ (80023bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022ba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80022be:	6593      	str	r3, [r2, #88]	@ 0x58
 80022c0:	4b3e      	ldr	r3, [pc, #248]	@ (80023bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022c8:	60bb      	str	r3, [r7, #8]
 80022ca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022cc:	2301      	movs	r3, #1
 80022ce:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80022d0:	4b3b      	ldr	r3, [pc, #236]	@ (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a3a      	ldr	r2, [pc, #232]	@ (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80022d6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80022da:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80022dc:	f7fe fc64 	bl	8000ba8 <HAL_GetTick>
 80022e0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80022e2:	e009      	b.n	80022f8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022e4:	f7fe fc60 	bl	8000ba8 <HAL_GetTick>
 80022e8:	4602      	mov	r2, r0
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	1ad3      	subs	r3, r2, r3
 80022ee:	2b02      	cmp	r3, #2
 80022f0:	d902      	bls.n	80022f8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80022f2:	2303      	movs	r3, #3
 80022f4:	74fb      	strb	r3, [r7, #19]
        break;
 80022f6:	e005      	b.n	8002304 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80022f8:	4b31      	ldr	r3, [pc, #196]	@ (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002300:	2b00      	cmp	r3, #0
 8002302:	d0ef      	beq.n	80022e4 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002304:	7cfb      	ldrb	r3, [r7, #19]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d15c      	bne.n	80023c4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800230a:	4b2c      	ldr	r3, [pc, #176]	@ (80023bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800230c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002310:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002314:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002316:	697b      	ldr	r3, [r7, #20]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d01f      	beq.n	800235c <HAL_RCCEx_PeriphCLKConfig+0x200>
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002322:	697a      	ldr	r2, [r7, #20]
 8002324:	429a      	cmp	r2, r3
 8002326:	d019      	beq.n	800235c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002328:	4b24      	ldr	r3, [pc, #144]	@ (80023bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800232a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800232e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002332:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002334:	4b21      	ldr	r3, [pc, #132]	@ (80023bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002336:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800233a:	4a20      	ldr	r2, [pc, #128]	@ (80023bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800233c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002340:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002344:	4b1d      	ldr	r3, [pc, #116]	@ (80023bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002346:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800234a:	4a1c      	ldr	r2, [pc, #112]	@ (80023bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800234c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002350:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002354:	4a19      	ldr	r2, [pc, #100]	@ (80023bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002356:	697b      	ldr	r3, [r7, #20]
 8002358:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800235c:	697b      	ldr	r3, [r7, #20]
 800235e:	f003 0301 	and.w	r3, r3, #1
 8002362:	2b00      	cmp	r3, #0
 8002364:	d016      	beq.n	8002394 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002366:	f7fe fc1f 	bl	8000ba8 <HAL_GetTick>
 800236a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800236c:	e00b      	b.n	8002386 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800236e:	f7fe fc1b 	bl	8000ba8 <HAL_GetTick>
 8002372:	4602      	mov	r2, r0
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	1ad3      	subs	r3, r2, r3
 8002378:	f241 3288 	movw	r2, #5000	@ 0x1388
 800237c:	4293      	cmp	r3, r2
 800237e:	d902      	bls.n	8002386 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002380:	2303      	movs	r3, #3
 8002382:	74fb      	strb	r3, [r7, #19]
            break;
 8002384:	e006      	b.n	8002394 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002386:	4b0d      	ldr	r3, [pc, #52]	@ (80023bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002388:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800238c:	f003 0302 	and.w	r3, r3, #2
 8002390:	2b00      	cmp	r3, #0
 8002392:	d0ec      	beq.n	800236e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002394:	7cfb      	ldrb	r3, [r7, #19]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d10c      	bne.n	80023b4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800239a:	4b08      	ldr	r3, [pc, #32]	@ (80023bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800239c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023a0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023aa:	4904      	ldr	r1, [pc, #16]	@ (80023bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023ac:	4313      	orrs	r3, r2
 80023ae:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80023b2:	e009      	b.n	80023c8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80023b4:	7cfb      	ldrb	r3, [r7, #19]
 80023b6:	74bb      	strb	r3, [r7, #18]
 80023b8:	e006      	b.n	80023c8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80023ba:	bf00      	nop
 80023bc:	40021000 	.word	0x40021000
 80023c0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80023c4:	7cfb      	ldrb	r3, [r7, #19]
 80023c6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80023c8:	7c7b      	ldrb	r3, [r7, #17]
 80023ca:	2b01      	cmp	r3, #1
 80023cc:	d105      	bne.n	80023da <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023ce:	4ba6      	ldr	r3, [pc, #664]	@ (8002668 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80023d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023d2:	4aa5      	ldr	r2, [pc, #660]	@ (8002668 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80023d4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80023d8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f003 0301 	and.w	r3, r3, #1
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d00a      	beq.n	80023fc <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80023e6:	4ba0      	ldr	r3, [pc, #640]	@ (8002668 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80023e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023ec:	f023 0203 	bic.w	r2, r3, #3
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023f4:	499c      	ldr	r1, [pc, #624]	@ (8002668 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80023f6:	4313      	orrs	r3, r2
 80023f8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f003 0302 	and.w	r3, r3, #2
 8002404:	2b00      	cmp	r3, #0
 8002406:	d00a      	beq.n	800241e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002408:	4b97      	ldr	r3, [pc, #604]	@ (8002668 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800240a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800240e:	f023 020c 	bic.w	r2, r3, #12
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002416:	4994      	ldr	r1, [pc, #592]	@ (8002668 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002418:	4313      	orrs	r3, r2
 800241a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f003 0304 	and.w	r3, r3, #4
 8002426:	2b00      	cmp	r3, #0
 8002428:	d00a      	beq.n	8002440 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800242a:	4b8f      	ldr	r3, [pc, #572]	@ (8002668 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800242c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002430:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002438:	498b      	ldr	r1, [pc, #556]	@ (8002668 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800243a:	4313      	orrs	r3, r2
 800243c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f003 0308 	and.w	r3, r3, #8
 8002448:	2b00      	cmp	r3, #0
 800244a:	d00a      	beq.n	8002462 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800244c:	4b86      	ldr	r3, [pc, #536]	@ (8002668 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800244e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002452:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800245a:	4983      	ldr	r1, [pc, #524]	@ (8002668 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800245c:	4313      	orrs	r3, r2
 800245e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f003 0310 	and.w	r3, r3, #16
 800246a:	2b00      	cmp	r3, #0
 800246c:	d00a      	beq.n	8002484 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800246e:	4b7e      	ldr	r3, [pc, #504]	@ (8002668 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002470:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002474:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800247c:	497a      	ldr	r1, [pc, #488]	@ (8002668 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800247e:	4313      	orrs	r3, r2
 8002480:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f003 0320 	and.w	r3, r3, #32
 800248c:	2b00      	cmp	r3, #0
 800248e:	d00a      	beq.n	80024a6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002490:	4b75      	ldr	r3, [pc, #468]	@ (8002668 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002492:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002496:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800249e:	4972      	ldr	r1, [pc, #456]	@ (8002668 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80024a0:	4313      	orrs	r3, r2
 80024a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d00a      	beq.n	80024c8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80024b2:	4b6d      	ldr	r3, [pc, #436]	@ (8002668 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80024b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024b8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024c0:	4969      	ldr	r1, [pc, #420]	@ (8002668 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80024c2:	4313      	orrs	r3, r2
 80024c4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d00a      	beq.n	80024ea <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80024d4:	4b64      	ldr	r3, [pc, #400]	@ (8002668 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80024d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024da:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80024e2:	4961      	ldr	r1, [pc, #388]	@ (8002668 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80024e4:	4313      	orrs	r3, r2
 80024e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d00a      	beq.n	800250c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80024f6:	4b5c      	ldr	r3, [pc, #368]	@ (8002668 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80024f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024fc:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002504:	4958      	ldr	r1, [pc, #352]	@ (8002668 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002506:	4313      	orrs	r3, r2
 8002508:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002514:	2b00      	cmp	r3, #0
 8002516:	d00a      	beq.n	800252e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002518:	4b53      	ldr	r3, [pc, #332]	@ (8002668 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800251a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800251e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002526:	4950      	ldr	r1, [pc, #320]	@ (8002668 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002528:	4313      	orrs	r3, r2
 800252a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002536:	2b00      	cmp	r3, #0
 8002538:	d00a      	beq.n	8002550 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800253a:	4b4b      	ldr	r3, [pc, #300]	@ (8002668 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800253c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002540:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002548:	4947      	ldr	r1, [pc, #284]	@ (8002668 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800254a:	4313      	orrs	r3, r2
 800254c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002558:	2b00      	cmp	r3, #0
 800255a:	d00a      	beq.n	8002572 <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800255c:	4b42      	ldr	r3, [pc, #264]	@ (8002668 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800255e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002562:	f023 0203 	bic.w	r2, r3, #3
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800256a:	493f      	ldr	r1, [pc, #252]	@ (8002668 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800256c:	4313      	orrs	r3, r2
 800256e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800257a:	2b00      	cmp	r3, #0
 800257c:	d028      	beq.n	80025d0 <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800257e:	4b3a      	ldr	r3, [pc, #232]	@ (8002668 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002580:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002584:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800258c:	4936      	ldr	r1, [pc, #216]	@ (8002668 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800258e:	4313      	orrs	r3, r2
 8002590:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002598:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800259c:	d106      	bne.n	80025ac <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800259e:	4b32      	ldr	r3, [pc, #200]	@ (8002668 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80025a0:	68db      	ldr	r3, [r3, #12]
 80025a2:	4a31      	ldr	r2, [pc, #196]	@ (8002668 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80025a4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80025a8:	60d3      	str	r3, [r2, #12]
 80025aa:	e011      	b.n	80025d0 <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025b0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80025b4:	d10c      	bne.n	80025d0 <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	3304      	adds	r3, #4
 80025ba:	2101      	movs	r1, #1
 80025bc:	4618      	mov	r0, r3
 80025be:	f000 f8d9 	bl	8002774 <RCCEx_PLLSAI1_Config>
 80025c2:	4603      	mov	r3, r0
 80025c4:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80025c6:	7cfb      	ldrb	r3, [r7, #19]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d001      	beq.n	80025d0 <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 80025cc:	7cfb      	ldrb	r3, [r7, #19]
 80025ce:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d028      	beq.n	800262e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80025dc:	4b22      	ldr	r3, [pc, #136]	@ (8002668 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80025de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025e2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80025ea:	491f      	ldr	r1, [pc, #124]	@ (8002668 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80025ec:	4313      	orrs	r3, r2
 80025ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80025f6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80025fa:	d106      	bne.n	800260a <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80025fc:	4b1a      	ldr	r3, [pc, #104]	@ (8002668 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80025fe:	68db      	ldr	r3, [r3, #12]
 8002600:	4a19      	ldr	r2, [pc, #100]	@ (8002668 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002602:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002606:	60d3      	str	r3, [r2, #12]
 8002608:	e011      	b.n	800262e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800260e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002612:	d10c      	bne.n	800262e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	3304      	adds	r3, #4
 8002618:	2101      	movs	r1, #1
 800261a:	4618      	mov	r0, r3
 800261c:	f000 f8aa 	bl	8002774 <RCCEx_PLLSAI1_Config>
 8002620:	4603      	mov	r3, r0
 8002622:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002624:	7cfb      	ldrb	r3, [r7, #19]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d001      	beq.n	800262e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 800262a:	7cfb      	ldrb	r3, [r7, #19]
 800262c:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002636:	2b00      	cmp	r3, #0
 8002638:	d02a      	beq.n	8002690 <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800263a:	4b0b      	ldr	r3, [pc, #44]	@ (8002668 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800263c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002640:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002648:	4907      	ldr	r1, [pc, #28]	@ (8002668 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800264a:	4313      	orrs	r3, r2
 800264c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002654:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002658:	d108      	bne.n	800266c <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800265a:	4b03      	ldr	r3, [pc, #12]	@ (8002668 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800265c:	68db      	ldr	r3, [r3, #12]
 800265e:	4a02      	ldr	r2, [pc, #8]	@ (8002668 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002660:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002664:	60d3      	str	r3, [r2, #12]
 8002666:	e013      	b.n	8002690 <HAL_RCCEx_PeriphCLKConfig+0x534>
 8002668:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002670:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002674:	d10c      	bne.n	8002690 <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	3304      	adds	r3, #4
 800267a:	2101      	movs	r1, #1
 800267c:	4618      	mov	r0, r3
 800267e:	f000 f879 	bl	8002774 <RCCEx_PLLSAI1_Config>
 8002682:	4603      	mov	r3, r0
 8002684:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002686:	7cfb      	ldrb	r3, [r7, #19]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d001      	beq.n	8002690 <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 800268c:	7cfb      	ldrb	r3, [r7, #19]
 800268e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002698:	2b00      	cmp	r3, #0
 800269a:	d02f      	beq.n	80026fc <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800269c:	4b2c      	ldr	r3, [pc, #176]	@ (8002750 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800269e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026a2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80026aa:	4929      	ldr	r1, [pc, #164]	@ (8002750 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80026ac:	4313      	orrs	r3, r2
 80026ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80026b6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80026ba:	d10d      	bne.n	80026d8 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	3304      	adds	r3, #4
 80026c0:	2102      	movs	r1, #2
 80026c2:	4618      	mov	r0, r3
 80026c4:	f000 f856 	bl	8002774 <RCCEx_PLLSAI1_Config>
 80026c8:	4603      	mov	r3, r0
 80026ca:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80026cc:	7cfb      	ldrb	r3, [r7, #19]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d014      	beq.n	80026fc <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 80026d2:	7cfb      	ldrb	r3, [r7, #19]
 80026d4:	74bb      	strb	r3, [r7, #18]
 80026d6:	e011      	b.n	80026fc <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80026dc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80026e0:	d10c      	bne.n	80026fc <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	3320      	adds	r3, #32
 80026e6:	2102      	movs	r1, #2
 80026e8:	4618      	mov	r0, r3
 80026ea:	f000 f935 	bl	8002958 <RCCEx_PLLSAI2_Config>
 80026ee:	4603      	mov	r3, r0
 80026f0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80026f2:	7cfb      	ldrb	r3, [r7, #19]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d001      	beq.n	80026fc <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 80026f8:	7cfb      	ldrb	r3, [r7, #19]
 80026fa:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002704:	2b00      	cmp	r3, #0
 8002706:	d00b      	beq.n	8002720 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002708:	4b11      	ldr	r3, [pc, #68]	@ (8002750 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800270a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800270e:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002718:	490d      	ldr	r1, [pc, #52]	@ (8002750 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800271a:	4313      	orrs	r3, r2
 800271c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002728:	2b00      	cmp	r3, #0
 800272a:	d00b      	beq.n	8002744 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800272c:	4b08      	ldr	r3, [pc, #32]	@ (8002750 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800272e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002732:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800273c:	4904      	ldr	r1, [pc, #16]	@ (8002750 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800273e:	4313      	orrs	r3, r2
 8002740:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002744:	7cbb      	ldrb	r3, [r7, #18]
}
 8002746:	4618      	mov	r0, r3
 8002748:	3718      	adds	r7, #24
 800274a:	46bd      	mov	sp, r7
 800274c:	bd80      	pop	{r7, pc}
 800274e:	bf00      	nop
 8002750:	40021000 	.word	0x40021000

08002754 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8002754:	b480      	push	{r7}
 8002756:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8002758:	4b05      	ldr	r3, [pc, #20]	@ (8002770 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a04      	ldr	r2, [pc, #16]	@ (8002770 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800275e:	f043 0304 	orr.w	r3, r3, #4
 8002762:	6013      	str	r3, [r2, #0]
}
 8002764:	bf00      	nop
 8002766:	46bd      	mov	sp, r7
 8002768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276c:	4770      	bx	lr
 800276e:	bf00      	nop
 8002770:	40021000 	.word	0x40021000

08002774 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b084      	sub	sp, #16
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
 800277c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800277e:	2300      	movs	r3, #0
 8002780:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002782:	4b74      	ldr	r3, [pc, #464]	@ (8002954 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002784:	68db      	ldr	r3, [r3, #12]
 8002786:	f003 0303 	and.w	r3, r3, #3
 800278a:	2b00      	cmp	r3, #0
 800278c:	d018      	beq.n	80027c0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800278e:	4b71      	ldr	r3, [pc, #452]	@ (8002954 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002790:	68db      	ldr	r3, [r3, #12]
 8002792:	f003 0203 	and.w	r2, r3, #3
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	429a      	cmp	r2, r3
 800279c:	d10d      	bne.n	80027ba <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
       ||
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d009      	beq.n	80027ba <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80027a6:	4b6b      	ldr	r3, [pc, #428]	@ (8002954 <RCCEx_PLLSAI1_Config+0x1e0>)
 80027a8:	68db      	ldr	r3, [r3, #12]
 80027aa:	091b      	lsrs	r3, r3, #4
 80027ac:	f003 0307 	and.w	r3, r3, #7
 80027b0:	1c5a      	adds	r2, r3, #1
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	685b      	ldr	r3, [r3, #4]
       ||
 80027b6:	429a      	cmp	r2, r3
 80027b8:	d047      	beq.n	800284a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
 80027bc:	73fb      	strb	r3, [r7, #15]
 80027be:	e044      	b.n	800284a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	2b03      	cmp	r3, #3
 80027c6:	d018      	beq.n	80027fa <RCCEx_PLLSAI1_Config+0x86>
 80027c8:	2b03      	cmp	r3, #3
 80027ca:	d825      	bhi.n	8002818 <RCCEx_PLLSAI1_Config+0xa4>
 80027cc:	2b01      	cmp	r3, #1
 80027ce:	d002      	beq.n	80027d6 <RCCEx_PLLSAI1_Config+0x62>
 80027d0:	2b02      	cmp	r3, #2
 80027d2:	d009      	beq.n	80027e8 <RCCEx_PLLSAI1_Config+0x74>
 80027d4:	e020      	b.n	8002818 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80027d6:	4b5f      	ldr	r3, [pc, #380]	@ (8002954 <RCCEx_PLLSAI1_Config+0x1e0>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f003 0302 	and.w	r3, r3, #2
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d11d      	bne.n	800281e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80027e2:	2301      	movs	r3, #1
 80027e4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027e6:	e01a      	b.n	800281e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80027e8:	4b5a      	ldr	r3, [pc, #360]	@ (8002954 <RCCEx_PLLSAI1_Config+0x1e0>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d116      	bne.n	8002822 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80027f4:	2301      	movs	r3, #1
 80027f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027f8:	e013      	b.n	8002822 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80027fa:	4b56      	ldr	r3, [pc, #344]	@ (8002954 <RCCEx_PLLSAI1_Config+0x1e0>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002802:	2b00      	cmp	r3, #0
 8002804:	d10f      	bne.n	8002826 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002806:	4b53      	ldr	r3, [pc, #332]	@ (8002954 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800280e:	2b00      	cmp	r3, #0
 8002810:	d109      	bne.n	8002826 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002812:	2301      	movs	r3, #1
 8002814:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002816:	e006      	b.n	8002826 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002818:	2301      	movs	r3, #1
 800281a:	73fb      	strb	r3, [r7, #15]
      break;
 800281c:	e004      	b.n	8002828 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800281e:	bf00      	nop
 8002820:	e002      	b.n	8002828 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002822:	bf00      	nop
 8002824:	e000      	b.n	8002828 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002826:	bf00      	nop
    }

    if(status == HAL_OK)
 8002828:	7bfb      	ldrb	r3, [r7, #15]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d10d      	bne.n	800284a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800282e:	4b49      	ldr	r3, [pc, #292]	@ (8002954 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002830:	68db      	ldr	r3, [r3, #12]
 8002832:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6819      	ldr	r1, [r3, #0]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	3b01      	subs	r3, #1
 8002840:	011b      	lsls	r3, r3, #4
 8002842:	430b      	orrs	r3, r1
 8002844:	4943      	ldr	r1, [pc, #268]	@ (8002954 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002846:	4313      	orrs	r3, r2
 8002848:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800284a:	7bfb      	ldrb	r3, [r7, #15]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d17c      	bne.n	800294a <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002850:	4b40      	ldr	r3, [pc, #256]	@ (8002954 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a3f      	ldr	r2, [pc, #252]	@ (8002954 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002856:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800285a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800285c:	f7fe f9a4 	bl	8000ba8 <HAL_GetTick>
 8002860:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002862:	e009      	b.n	8002878 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002864:	f7fe f9a0 	bl	8000ba8 <HAL_GetTick>
 8002868:	4602      	mov	r2, r0
 800286a:	68bb      	ldr	r3, [r7, #8]
 800286c:	1ad3      	subs	r3, r2, r3
 800286e:	2b02      	cmp	r3, #2
 8002870:	d902      	bls.n	8002878 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002872:	2303      	movs	r3, #3
 8002874:	73fb      	strb	r3, [r7, #15]
        break;
 8002876:	e005      	b.n	8002884 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002878:	4b36      	ldr	r3, [pc, #216]	@ (8002954 <RCCEx_PLLSAI1_Config+0x1e0>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002880:	2b00      	cmp	r3, #0
 8002882:	d1ef      	bne.n	8002864 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002884:	7bfb      	ldrb	r3, [r7, #15]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d15f      	bne.n	800294a <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d110      	bne.n	80028b2 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002890:	4b30      	ldr	r3, [pc, #192]	@ (8002954 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002892:	691b      	ldr	r3, [r3, #16]
 8002894:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8002898:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800289c:	687a      	ldr	r2, [r7, #4]
 800289e:	6892      	ldr	r2, [r2, #8]
 80028a0:	0211      	lsls	r1, r2, #8
 80028a2:	687a      	ldr	r2, [r7, #4]
 80028a4:	68d2      	ldr	r2, [r2, #12]
 80028a6:	06d2      	lsls	r2, r2, #27
 80028a8:	430a      	orrs	r2, r1
 80028aa:	492a      	ldr	r1, [pc, #168]	@ (8002954 <RCCEx_PLLSAI1_Config+0x1e0>)
 80028ac:	4313      	orrs	r3, r2
 80028ae:	610b      	str	r3, [r1, #16]
 80028b0:	e027      	b.n	8002902 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	2b01      	cmp	r3, #1
 80028b6:	d112      	bne.n	80028de <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80028b8:	4b26      	ldr	r3, [pc, #152]	@ (8002954 <RCCEx_PLLSAI1_Config+0x1e0>)
 80028ba:	691b      	ldr	r3, [r3, #16]
 80028bc:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80028c0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80028c4:	687a      	ldr	r2, [r7, #4]
 80028c6:	6892      	ldr	r2, [r2, #8]
 80028c8:	0211      	lsls	r1, r2, #8
 80028ca:	687a      	ldr	r2, [r7, #4]
 80028cc:	6912      	ldr	r2, [r2, #16]
 80028ce:	0852      	lsrs	r2, r2, #1
 80028d0:	3a01      	subs	r2, #1
 80028d2:	0552      	lsls	r2, r2, #21
 80028d4:	430a      	orrs	r2, r1
 80028d6:	491f      	ldr	r1, [pc, #124]	@ (8002954 <RCCEx_PLLSAI1_Config+0x1e0>)
 80028d8:	4313      	orrs	r3, r2
 80028da:	610b      	str	r3, [r1, #16]
 80028dc:	e011      	b.n	8002902 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80028de:	4b1d      	ldr	r3, [pc, #116]	@ (8002954 <RCCEx_PLLSAI1_Config+0x1e0>)
 80028e0:	691b      	ldr	r3, [r3, #16]
 80028e2:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80028e6:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80028ea:	687a      	ldr	r2, [r7, #4]
 80028ec:	6892      	ldr	r2, [r2, #8]
 80028ee:	0211      	lsls	r1, r2, #8
 80028f0:	687a      	ldr	r2, [r7, #4]
 80028f2:	6952      	ldr	r2, [r2, #20]
 80028f4:	0852      	lsrs	r2, r2, #1
 80028f6:	3a01      	subs	r2, #1
 80028f8:	0652      	lsls	r2, r2, #25
 80028fa:	430a      	orrs	r2, r1
 80028fc:	4915      	ldr	r1, [pc, #84]	@ (8002954 <RCCEx_PLLSAI1_Config+0x1e0>)
 80028fe:	4313      	orrs	r3, r2
 8002900:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002902:	4b14      	ldr	r3, [pc, #80]	@ (8002954 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4a13      	ldr	r2, [pc, #76]	@ (8002954 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002908:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800290c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800290e:	f7fe f94b 	bl	8000ba8 <HAL_GetTick>
 8002912:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002914:	e009      	b.n	800292a <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002916:	f7fe f947 	bl	8000ba8 <HAL_GetTick>
 800291a:	4602      	mov	r2, r0
 800291c:	68bb      	ldr	r3, [r7, #8]
 800291e:	1ad3      	subs	r3, r2, r3
 8002920:	2b02      	cmp	r3, #2
 8002922:	d902      	bls.n	800292a <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8002924:	2303      	movs	r3, #3
 8002926:	73fb      	strb	r3, [r7, #15]
          break;
 8002928:	e005      	b.n	8002936 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800292a:	4b0a      	ldr	r3, [pc, #40]	@ (8002954 <RCCEx_PLLSAI1_Config+0x1e0>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002932:	2b00      	cmp	r3, #0
 8002934:	d0ef      	beq.n	8002916 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8002936:	7bfb      	ldrb	r3, [r7, #15]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d106      	bne.n	800294a <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800293c:	4b05      	ldr	r3, [pc, #20]	@ (8002954 <RCCEx_PLLSAI1_Config+0x1e0>)
 800293e:	691a      	ldr	r2, [r3, #16]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	699b      	ldr	r3, [r3, #24]
 8002944:	4903      	ldr	r1, [pc, #12]	@ (8002954 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002946:	4313      	orrs	r3, r2
 8002948:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800294a:	7bfb      	ldrb	r3, [r7, #15]
}
 800294c:	4618      	mov	r0, r3
 800294e:	3710      	adds	r7, #16
 8002950:	46bd      	mov	sp, r7
 8002952:	bd80      	pop	{r7, pc}
 8002954:	40021000 	.word	0x40021000

08002958 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b084      	sub	sp, #16
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
 8002960:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002962:	2300      	movs	r3, #0
 8002964:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002966:	4b69      	ldr	r3, [pc, #420]	@ (8002b0c <RCCEx_PLLSAI2_Config+0x1b4>)
 8002968:	68db      	ldr	r3, [r3, #12]
 800296a:	f003 0303 	and.w	r3, r3, #3
 800296e:	2b00      	cmp	r3, #0
 8002970:	d018      	beq.n	80029a4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002972:	4b66      	ldr	r3, [pc, #408]	@ (8002b0c <RCCEx_PLLSAI2_Config+0x1b4>)
 8002974:	68db      	ldr	r3, [r3, #12]
 8002976:	f003 0203 	and.w	r2, r3, #3
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	429a      	cmp	r2, r3
 8002980:	d10d      	bne.n	800299e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
       ||
 8002986:	2b00      	cmp	r3, #0
 8002988:	d009      	beq.n	800299e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800298a:	4b60      	ldr	r3, [pc, #384]	@ (8002b0c <RCCEx_PLLSAI2_Config+0x1b4>)
 800298c:	68db      	ldr	r3, [r3, #12]
 800298e:	091b      	lsrs	r3, r3, #4
 8002990:	f003 0307 	and.w	r3, r3, #7
 8002994:	1c5a      	adds	r2, r3, #1
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	685b      	ldr	r3, [r3, #4]
       ||
 800299a:	429a      	cmp	r2, r3
 800299c:	d047      	beq.n	8002a2e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800299e:	2301      	movs	r3, #1
 80029a0:	73fb      	strb	r3, [r7, #15]
 80029a2:	e044      	b.n	8002a2e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	2b03      	cmp	r3, #3
 80029aa:	d018      	beq.n	80029de <RCCEx_PLLSAI2_Config+0x86>
 80029ac:	2b03      	cmp	r3, #3
 80029ae:	d825      	bhi.n	80029fc <RCCEx_PLLSAI2_Config+0xa4>
 80029b0:	2b01      	cmp	r3, #1
 80029b2:	d002      	beq.n	80029ba <RCCEx_PLLSAI2_Config+0x62>
 80029b4:	2b02      	cmp	r3, #2
 80029b6:	d009      	beq.n	80029cc <RCCEx_PLLSAI2_Config+0x74>
 80029b8:	e020      	b.n	80029fc <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80029ba:	4b54      	ldr	r3, [pc, #336]	@ (8002b0c <RCCEx_PLLSAI2_Config+0x1b4>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f003 0302 	and.w	r3, r3, #2
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d11d      	bne.n	8002a02 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80029c6:	2301      	movs	r3, #1
 80029c8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029ca:	e01a      	b.n	8002a02 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80029cc:	4b4f      	ldr	r3, [pc, #316]	@ (8002b0c <RCCEx_PLLSAI2_Config+0x1b4>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d116      	bne.n	8002a06 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80029d8:	2301      	movs	r3, #1
 80029da:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029dc:	e013      	b.n	8002a06 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80029de:	4b4b      	ldr	r3, [pc, #300]	@ (8002b0c <RCCEx_PLLSAI2_Config+0x1b4>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d10f      	bne.n	8002a0a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80029ea:	4b48      	ldr	r3, [pc, #288]	@ (8002b0c <RCCEx_PLLSAI2_Config+0x1b4>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d109      	bne.n	8002a0a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80029f6:	2301      	movs	r3, #1
 80029f8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80029fa:	e006      	b.n	8002a0a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80029fc:	2301      	movs	r3, #1
 80029fe:	73fb      	strb	r3, [r7, #15]
      break;
 8002a00:	e004      	b.n	8002a0c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002a02:	bf00      	nop
 8002a04:	e002      	b.n	8002a0c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002a06:	bf00      	nop
 8002a08:	e000      	b.n	8002a0c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002a0a:	bf00      	nop
    }

    if(status == HAL_OK)
 8002a0c:	7bfb      	ldrb	r3, [r7, #15]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d10d      	bne.n	8002a2e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002a12:	4b3e      	ldr	r3, [pc, #248]	@ (8002b0c <RCCEx_PLLSAI2_Config+0x1b4>)
 8002a14:	68db      	ldr	r3, [r3, #12]
 8002a16:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6819      	ldr	r1, [r3, #0]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	3b01      	subs	r3, #1
 8002a24:	011b      	lsls	r3, r3, #4
 8002a26:	430b      	orrs	r3, r1
 8002a28:	4938      	ldr	r1, [pc, #224]	@ (8002b0c <RCCEx_PLLSAI2_Config+0x1b4>)
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002a2e:	7bfb      	ldrb	r3, [r7, #15]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d166      	bne.n	8002b02 <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002a34:	4b35      	ldr	r3, [pc, #212]	@ (8002b0c <RCCEx_PLLSAI2_Config+0x1b4>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a34      	ldr	r2, [pc, #208]	@ (8002b0c <RCCEx_PLLSAI2_Config+0x1b4>)
 8002a3a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002a3e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a40:	f7fe f8b2 	bl	8000ba8 <HAL_GetTick>
 8002a44:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002a46:	e009      	b.n	8002a5c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002a48:	f7fe f8ae 	bl	8000ba8 <HAL_GetTick>
 8002a4c:	4602      	mov	r2, r0
 8002a4e:	68bb      	ldr	r3, [r7, #8]
 8002a50:	1ad3      	subs	r3, r2, r3
 8002a52:	2b02      	cmp	r3, #2
 8002a54:	d902      	bls.n	8002a5c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002a56:	2303      	movs	r3, #3
 8002a58:	73fb      	strb	r3, [r7, #15]
        break;
 8002a5a:	e005      	b.n	8002a68 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002a5c:	4b2b      	ldr	r3, [pc, #172]	@ (8002b0c <RCCEx_PLLSAI2_Config+0x1b4>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d1ef      	bne.n	8002a48 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002a68:	7bfb      	ldrb	r3, [r7, #15]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d149      	bne.n	8002b02 <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d110      	bne.n	8002a96 <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002a74:	4b25      	ldr	r3, [pc, #148]	@ (8002b0c <RCCEx_PLLSAI2_Config+0x1b4>)
 8002a76:	695b      	ldr	r3, [r3, #20]
 8002a78:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8002a7c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002a80:	687a      	ldr	r2, [r7, #4]
 8002a82:	6892      	ldr	r2, [r2, #8]
 8002a84:	0211      	lsls	r1, r2, #8
 8002a86:	687a      	ldr	r2, [r7, #4]
 8002a88:	68d2      	ldr	r2, [r2, #12]
 8002a8a:	06d2      	lsls	r2, r2, #27
 8002a8c:	430a      	orrs	r2, r1
 8002a8e:	491f      	ldr	r1, [pc, #124]	@ (8002b0c <RCCEx_PLLSAI2_Config+0x1b4>)
 8002a90:	4313      	orrs	r3, r2
 8002a92:	614b      	str	r3, [r1, #20]
 8002a94:	e011      	b.n	8002aba <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002a96:	4b1d      	ldr	r3, [pc, #116]	@ (8002b0c <RCCEx_PLLSAI2_Config+0x1b4>)
 8002a98:	695b      	ldr	r3, [r3, #20]
 8002a9a:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002a9e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002aa2:	687a      	ldr	r2, [r7, #4]
 8002aa4:	6892      	ldr	r2, [r2, #8]
 8002aa6:	0211      	lsls	r1, r2, #8
 8002aa8:	687a      	ldr	r2, [r7, #4]
 8002aaa:	6912      	ldr	r2, [r2, #16]
 8002aac:	0852      	lsrs	r2, r2, #1
 8002aae:	3a01      	subs	r2, #1
 8002ab0:	0652      	lsls	r2, r2, #25
 8002ab2:	430a      	orrs	r2, r1
 8002ab4:	4915      	ldr	r1, [pc, #84]	@ (8002b0c <RCCEx_PLLSAI2_Config+0x1b4>)
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002aba:	4b14      	ldr	r3, [pc, #80]	@ (8002b0c <RCCEx_PLLSAI2_Config+0x1b4>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4a13      	ldr	r2, [pc, #76]	@ (8002b0c <RCCEx_PLLSAI2_Config+0x1b4>)
 8002ac0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ac4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ac6:	f7fe f86f 	bl	8000ba8 <HAL_GetTick>
 8002aca:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002acc:	e009      	b.n	8002ae2 <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002ace:	f7fe f86b 	bl	8000ba8 <HAL_GetTick>
 8002ad2:	4602      	mov	r2, r0
 8002ad4:	68bb      	ldr	r3, [r7, #8]
 8002ad6:	1ad3      	subs	r3, r2, r3
 8002ad8:	2b02      	cmp	r3, #2
 8002ada:	d902      	bls.n	8002ae2 <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 8002adc:	2303      	movs	r3, #3
 8002ade:	73fb      	strb	r3, [r7, #15]
          break;
 8002ae0:	e005      	b.n	8002aee <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002ae2:	4b0a      	ldr	r3, [pc, #40]	@ (8002b0c <RCCEx_PLLSAI2_Config+0x1b4>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d0ef      	beq.n	8002ace <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 8002aee:	7bfb      	ldrb	r3, [r7, #15]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d106      	bne.n	8002b02 <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002af4:	4b05      	ldr	r3, [pc, #20]	@ (8002b0c <RCCEx_PLLSAI2_Config+0x1b4>)
 8002af6:	695a      	ldr	r2, [r3, #20]
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	695b      	ldr	r3, [r3, #20]
 8002afc:	4903      	ldr	r1, [pc, #12]	@ (8002b0c <RCCEx_PLLSAI2_Config+0x1b4>)
 8002afe:	4313      	orrs	r3, r2
 8002b00:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002b02:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b04:	4618      	mov	r0, r3
 8002b06:	3710      	adds	r7, #16
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bd80      	pop	{r7, pc}
 8002b0c:	40021000 	.word	0x40021000

08002b10 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b082      	sub	sp, #8
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d101      	bne.n	8002b22 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	e040      	b.n	8002ba4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d106      	bne.n	8002b38 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002b32:	6878      	ldr	r0, [r7, #4]
 8002b34:	f7fd fe68 	bl	8000808 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2224      	movs	r2, #36	@ 0x24
 8002b3c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	681a      	ldr	r2, [r3, #0]
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f022 0201 	bic.w	r2, r2, #1
 8002b4c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d002      	beq.n	8002b5c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002b56:	6878      	ldr	r0, [r7, #4]
 8002b58:	f000 fae0 	bl	800311c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002b5c:	6878      	ldr	r0, [r7, #4]
 8002b5e:	f000 f825 	bl	8002bac <UART_SetConfig>
 8002b62:	4603      	mov	r3, r0
 8002b64:	2b01      	cmp	r3, #1
 8002b66:	d101      	bne.n	8002b6c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002b68:	2301      	movs	r3, #1
 8002b6a:	e01b      	b.n	8002ba4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	685a      	ldr	r2, [r3, #4]
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002b7a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	689a      	ldr	r2, [r3, #8]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002b8a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	681a      	ldr	r2, [r3, #0]
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f042 0201 	orr.w	r2, r2, #1
 8002b9a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002b9c:	6878      	ldr	r0, [r7, #4]
 8002b9e:	f000 fb5f 	bl	8003260 <UART_CheckIdleState>
 8002ba2:	4603      	mov	r3, r0
}
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	3708      	adds	r7, #8
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bd80      	pop	{r7, pc}

08002bac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002bac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002bb0:	b08a      	sub	sp, #40	@ 0x28
 8002bb2:	af00      	add	r7, sp, #0
 8002bb4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	689a      	ldr	r2, [r3, #8]
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	691b      	ldr	r3, [r3, #16]
 8002bc4:	431a      	orrs	r2, r3
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	695b      	ldr	r3, [r3, #20]
 8002bca:	431a      	orrs	r2, r3
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	69db      	ldr	r3, [r3, #28]
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	681a      	ldr	r2, [r3, #0]
 8002bda:	4ba4      	ldr	r3, [pc, #656]	@ (8002e6c <UART_SetConfig+0x2c0>)
 8002bdc:	4013      	ands	r3, r2
 8002bde:	68fa      	ldr	r2, [r7, #12]
 8002be0:	6812      	ldr	r2, [r2, #0]
 8002be2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002be4:	430b      	orrs	r3, r1
 8002be6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	68da      	ldr	r2, [r3, #12]
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	430a      	orrs	r2, r1
 8002bfc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	699b      	ldr	r3, [r3, #24]
 8002c02:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a99      	ldr	r2, [pc, #612]	@ (8002e70 <UART_SetConfig+0x2c4>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d004      	beq.n	8002c18 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	6a1b      	ldr	r3, [r3, #32]
 8002c12:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c14:	4313      	orrs	r3, r2
 8002c16:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	689b      	ldr	r3, [r3, #8]
 8002c1e:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c28:	430a      	orrs	r2, r1
 8002c2a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a90      	ldr	r2, [pc, #576]	@ (8002e74 <UART_SetConfig+0x2c8>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d126      	bne.n	8002c84 <UART_SetConfig+0xd8>
 8002c36:	4b90      	ldr	r3, [pc, #576]	@ (8002e78 <UART_SetConfig+0x2cc>)
 8002c38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c3c:	f003 0303 	and.w	r3, r3, #3
 8002c40:	2b03      	cmp	r3, #3
 8002c42:	d81b      	bhi.n	8002c7c <UART_SetConfig+0xd0>
 8002c44:	a201      	add	r2, pc, #4	@ (adr r2, 8002c4c <UART_SetConfig+0xa0>)
 8002c46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c4a:	bf00      	nop
 8002c4c:	08002c5d 	.word	0x08002c5d
 8002c50:	08002c6d 	.word	0x08002c6d
 8002c54:	08002c65 	.word	0x08002c65
 8002c58:	08002c75 	.word	0x08002c75
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002c62:	e116      	b.n	8002e92 <UART_SetConfig+0x2e6>
 8002c64:	2302      	movs	r3, #2
 8002c66:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002c6a:	e112      	b.n	8002e92 <UART_SetConfig+0x2e6>
 8002c6c:	2304      	movs	r3, #4
 8002c6e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002c72:	e10e      	b.n	8002e92 <UART_SetConfig+0x2e6>
 8002c74:	2308      	movs	r3, #8
 8002c76:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002c7a:	e10a      	b.n	8002e92 <UART_SetConfig+0x2e6>
 8002c7c:	2310      	movs	r3, #16
 8002c7e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002c82:	e106      	b.n	8002e92 <UART_SetConfig+0x2e6>
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a7c      	ldr	r2, [pc, #496]	@ (8002e7c <UART_SetConfig+0x2d0>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d138      	bne.n	8002d00 <UART_SetConfig+0x154>
 8002c8e:	4b7a      	ldr	r3, [pc, #488]	@ (8002e78 <UART_SetConfig+0x2cc>)
 8002c90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c94:	f003 030c 	and.w	r3, r3, #12
 8002c98:	2b0c      	cmp	r3, #12
 8002c9a:	d82d      	bhi.n	8002cf8 <UART_SetConfig+0x14c>
 8002c9c:	a201      	add	r2, pc, #4	@ (adr r2, 8002ca4 <UART_SetConfig+0xf8>)
 8002c9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ca2:	bf00      	nop
 8002ca4:	08002cd9 	.word	0x08002cd9
 8002ca8:	08002cf9 	.word	0x08002cf9
 8002cac:	08002cf9 	.word	0x08002cf9
 8002cb0:	08002cf9 	.word	0x08002cf9
 8002cb4:	08002ce9 	.word	0x08002ce9
 8002cb8:	08002cf9 	.word	0x08002cf9
 8002cbc:	08002cf9 	.word	0x08002cf9
 8002cc0:	08002cf9 	.word	0x08002cf9
 8002cc4:	08002ce1 	.word	0x08002ce1
 8002cc8:	08002cf9 	.word	0x08002cf9
 8002ccc:	08002cf9 	.word	0x08002cf9
 8002cd0:	08002cf9 	.word	0x08002cf9
 8002cd4:	08002cf1 	.word	0x08002cf1
 8002cd8:	2300      	movs	r3, #0
 8002cda:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002cde:	e0d8      	b.n	8002e92 <UART_SetConfig+0x2e6>
 8002ce0:	2302      	movs	r3, #2
 8002ce2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002ce6:	e0d4      	b.n	8002e92 <UART_SetConfig+0x2e6>
 8002ce8:	2304      	movs	r3, #4
 8002cea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002cee:	e0d0      	b.n	8002e92 <UART_SetConfig+0x2e6>
 8002cf0:	2308      	movs	r3, #8
 8002cf2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002cf6:	e0cc      	b.n	8002e92 <UART_SetConfig+0x2e6>
 8002cf8:	2310      	movs	r3, #16
 8002cfa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002cfe:	e0c8      	b.n	8002e92 <UART_SetConfig+0x2e6>
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a5e      	ldr	r2, [pc, #376]	@ (8002e80 <UART_SetConfig+0x2d4>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d125      	bne.n	8002d56 <UART_SetConfig+0x1aa>
 8002d0a:	4b5b      	ldr	r3, [pc, #364]	@ (8002e78 <UART_SetConfig+0x2cc>)
 8002d0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d10:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8002d14:	2b30      	cmp	r3, #48	@ 0x30
 8002d16:	d016      	beq.n	8002d46 <UART_SetConfig+0x19a>
 8002d18:	2b30      	cmp	r3, #48	@ 0x30
 8002d1a:	d818      	bhi.n	8002d4e <UART_SetConfig+0x1a2>
 8002d1c:	2b20      	cmp	r3, #32
 8002d1e:	d00a      	beq.n	8002d36 <UART_SetConfig+0x18a>
 8002d20:	2b20      	cmp	r3, #32
 8002d22:	d814      	bhi.n	8002d4e <UART_SetConfig+0x1a2>
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d002      	beq.n	8002d2e <UART_SetConfig+0x182>
 8002d28:	2b10      	cmp	r3, #16
 8002d2a:	d008      	beq.n	8002d3e <UART_SetConfig+0x192>
 8002d2c:	e00f      	b.n	8002d4e <UART_SetConfig+0x1a2>
 8002d2e:	2300      	movs	r3, #0
 8002d30:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002d34:	e0ad      	b.n	8002e92 <UART_SetConfig+0x2e6>
 8002d36:	2302      	movs	r3, #2
 8002d38:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002d3c:	e0a9      	b.n	8002e92 <UART_SetConfig+0x2e6>
 8002d3e:	2304      	movs	r3, #4
 8002d40:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002d44:	e0a5      	b.n	8002e92 <UART_SetConfig+0x2e6>
 8002d46:	2308      	movs	r3, #8
 8002d48:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002d4c:	e0a1      	b.n	8002e92 <UART_SetConfig+0x2e6>
 8002d4e:	2310      	movs	r3, #16
 8002d50:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002d54:	e09d      	b.n	8002e92 <UART_SetConfig+0x2e6>
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4a4a      	ldr	r2, [pc, #296]	@ (8002e84 <UART_SetConfig+0x2d8>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d125      	bne.n	8002dac <UART_SetConfig+0x200>
 8002d60:	4b45      	ldr	r3, [pc, #276]	@ (8002e78 <UART_SetConfig+0x2cc>)
 8002d62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d66:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8002d6a:	2bc0      	cmp	r3, #192	@ 0xc0
 8002d6c:	d016      	beq.n	8002d9c <UART_SetConfig+0x1f0>
 8002d6e:	2bc0      	cmp	r3, #192	@ 0xc0
 8002d70:	d818      	bhi.n	8002da4 <UART_SetConfig+0x1f8>
 8002d72:	2b80      	cmp	r3, #128	@ 0x80
 8002d74:	d00a      	beq.n	8002d8c <UART_SetConfig+0x1e0>
 8002d76:	2b80      	cmp	r3, #128	@ 0x80
 8002d78:	d814      	bhi.n	8002da4 <UART_SetConfig+0x1f8>
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d002      	beq.n	8002d84 <UART_SetConfig+0x1d8>
 8002d7e:	2b40      	cmp	r3, #64	@ 0x40
 8002d80:	d008      	beq.n	8002d94 <UART_SetConfig+0x1e8>
 8002d82:	e00f      	b.n	8002da4 <UART_SetConfig+0x1f8>
 8002d84:	2300      	movs	r3, #0
 8002d86:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002d8a:	e082      	b.n	8002e92 <UART_SetConfig+0x2e6>
 8002d8c:	2302      	movs	r3, #2
 8002d8e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002d92:	e07e      	b.n	8002e92 <UART_SetConfig+0x2e6>
 8002d94:	2304      	movs	r3, #4
 8002d96:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002d9a:	e07a      	b.n	8002e92 <UART_SetConfig+0x2e6>
 8002d9c:	2308      	movs	r3, #8
 8002d9e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002da2:	e076      	b.n	8002e92 <UART_SetConfig+0x2e6>
 8002da4:	2310      	movs	r3, #16
 8002da6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002daa:	e072      	b.n	8002e92 <UART_SetConfig+0x2e6>
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a35      	ldr	r2, [pc, #212]	@ (8002e88 <UART_SetConfig+0x2dc>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d12a      	bne.n	8002e0c <UART_SetConfig+0x260>
 8002db6:	4b30      	ldr	r3, [pc, #192]	@ (8002e78 <UART_SetConfig+0x2cc>)
 8002db8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002dbc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002dc0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002dc4:	d01a      	beq.n	8002dfc <UART_SetConfig+0x250>
 8002dc6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002dca:	d81b      	bhi.n	8002e04 <UART_SetConfig+0x258>
 8002dcc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002dd0:	d00c      	beq.n	8002dec <UART_SetConfig+0x240>
 8002dd2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002dd6:	d815      	bhi.n	8002e04 <UART_SetConfig+0x258>
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d003      	beq.n	8002de4 <UART_SetConfig+0x238>
 8002ddc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002de0:	d008      	beq.n	8002df4 <UART_SetConfig+0x248>
 8002de2:	e00f      	b.n	8002e04 <UART_SetConfig+0x258>
 8002de4:	2300      	movs	r3, #0
 8002de6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002dea:	e052      	b.n	8002e92 <UART_SetConfig+0x2e6>
 8002dec:	2302      	movs	r3, #2
 8002dee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002df2:	e04e      	b.n	8002e92 <UART_SetConfig+0x2e6>
 8002df4:	2304      	movs	r3, #4
 8002df6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002dfa:	e04a      	b.n	8002e92 <UART_SetConfig+0x2e6>
 8002dfc:	2308      	movs	r3, #8
 8002dfe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002e02:	e046      	b.n	8002e92 <UART_SetConfig+0x2e6>
 8002e04:	2310      	movs	r3, #16
 8002e06:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002e0a:	e042      	b.n	8002e92 <UART_SetConfig+0x2e6>
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a17      	ldr	r2, [pc, #92]	@ (8002e70 <UART_SetConfig+0x2c4>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d13a      	bne.n	8002e8c <UART_SetConfig+0x2e0>
 8002e16:	4b18      	ldr	r3, [pc, #96]	@ (8002e78 <UART_SetConfig+0x2cc>)
 8002e18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e1c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002e20:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002e24:	d01a      	beq.n	8002e5c <UART_SetConfig+0x2b0>
 8002e26:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002e2a:	d81b      	bhi.n	8002e64 <UART_SetConfig+0x2b8>
 8002e2c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002e30:	d00c      	beq.n	8002e4c <UART_SetConfig+0x2a0>
 8002e32:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002e36:	d815      	bhi.n	8002e64 <UART_SetConfig+0x2b8>
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d003      	beq.n	8002e44 <UART_SetConfig+0x298>
 8002e3c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002e40:	d008      	beq.n	8002e54 <UART_SetConfig+0x2a8>
 8002e42:	e00f      	b.n	8002e64 <UART_SetConfig+0x2b8>
 8002e44:	2300      	movs	r3, #0
 8002e46:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002e4a:	e022      	b.n	8002e92 <UART_SetConfig+0x2e6>
 8002e4c:	2302      	movs	r3, #2
 8002e4e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002e52:	e01e      	b.n	8002e92 <UART_SetConfig+0x2e6>
 8002e54:	2304      	movs	r3, #4
 8002e56:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002e5a:	e01a      	b.n	8002e92 <UART_SetConfig+0x2e6>
 8002e5c:	2308      	movs	r3, #8
 8002e5e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002e62:	e016      	b.n	8002e92 <UART_SetConfig+0x2e6>
 8002e64:	2310      	movs	r3, #16
 8002e66:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002e6a:	e012      	b.n	8002e92 <UART_SetConfig+0x2e6>
 8002e6c:	efff69f3 	.word	0xefff69f3
 8002e70:	40008000 	.word	0x40008000
 8002e74:	40013800 	.word	0x40013800
 8002e78:	40021000 	.word	0x40021000
 8002e7c:	40004400 	.word	0x40004400
 8002e80:	40004800 	.word	0x40004800
 8002e84:	40004c00 	.word	0x40004c00
 8002e88:	40005000 	.word	0x40005000
 8002e8c:	2310      	movs	r3, #16
 8002e8e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4a9f      	ldr	r2, [pc, #636]	@ (8003114 <UART_SetConfig+0x568>)
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d17a      	bne.n	8002f92 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002e9c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002ea0:	2b08      	cmp	r3, #8
 8002ea2:	d824      	bhi.n	8002eee <UART_SetConfig+0x342>
 8002ea4:	a201      	add	r2, pc, #4	@ (adr r2, 8002eac <UART_SetConfig+0x300>)
 8002ea6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002eaa:	bf00      	nop
 8002eac:	08002ed1 	.word	0x08002ed1
 8002eb0:	08002eef 	.word	0x08002eef
 8002eb4:	08002ed9 	.word	0x08002ed9
 8002eb8:	08002eef 	.word	0x08002eef
 8002ebc:	08002edf 	.word	0x08002edf
 8002ec0:	08002eef 	.word	0x08002eef
 8002ec4:	08002eef 	.word	0x08002eef
 8002ec8:	08002eef 	.word	0x08002eef
 8002ecc:	08002ee7 	.word	0x08002ee7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002ed0:	f7ff f8b8 	bl	8002044 <HAL_RCC_GetPCLK1Freq>
 8002ed4:	61f8      	str	r0, [r7, #28]
        break;
 8002ed6:	e010      	b.n	8002efa <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002ed8:	4b8f      	ldr	r3, [pc, #572]	@ (8003118 <UART_SetConfig+0x56c>)
 8002eda:	61fb      	str	r3, [r7, #28]
        break;
 8002edc:	e00d      	b.n	8002efa <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002ede:	f7ff f819 	bl	8001f14 <HAL_RCC_GetSysClockFreq>
 8002ee2:	61f8      	str	r0, [r7, #28]
        break;
 8002ee4:	e009      	b.n	8002efa <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002ee6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002eea:	61fb      	str	r3, [r7, #28]
        break;
 8002eec:	e005      	b.n	8002efa <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8002eee:	2300      	movs	r3, #0
 8002ef0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8002ef8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002efa:	69fb      	ldr	r3, [r7, #28]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	f000 80fb 	beq.w	80030f8 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	685a      	ldr	r2, [r3, #4]
 8002f06:	4613      	mov	r3, r2
 8002f08:	005b      	lsls	r3, r3, #1
 8002f0a:	4413      	add	r3, r2
 8002f0c:	69fa      	ldr	r2, [r7, #28]
 8002f0e:	429a      	cmp	r2, r3
 8002f10:	d305      	bcc.n	8002f1e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002f18:	69fa      	ldr	r2, [r7, #28]
 8002f1a:	429a      	cmp	r2, r3
 8002f1c:	d903      	bls.n	8002f26 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8002f24:	e0e8      	b.n	80030f8 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002f26:	69fb      	ldr	r3, [r7, #28]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	461c      	mov	r4, r3
 8002f2c:	4615      	mov	r5, r2
 8002f2e:	f04f 0200 	mov.w	r2, #0
 8002f32:	f04f 0300 	mov.w	r3, #0
 8002f36:	022b      	lsls	r3, r5, #8
 8002f38:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8002f3c:	0222      	lsls	r2, r4, #8
 8002f3e:	68f9      	ldr	r1, [r7, #12]
 8002f40:	6849      	ldr	r1, [r1, #4]
 8002f42:	0849      	lsrs	r1, r1, #1
 8002f44:	2000      	movs	r0, #0
 8002f46:	4688      	mov	r8, r1
 8002f48:	4681      	mov	r9, r0
 8002f4a:	eb12 0a08 	adds.w	sl, r2, r8
 8002f4e:	eb43 0b09 	adc.w	fp, r3, r9
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	2200      	movs	r2, #0
 8002f58:	603b      	str	r3, [r7, #0]
 8002f5a:	607a      	str	r2, [r7, #4]
 8002f5c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002f60:	4650      	mov	r0, sl
 8002f62:	4659      	mov	r1, fp
 8002f64:	f7fd f942 	bl	80001ec <__aeabi_uldivmod>
 8002f68:	4602      	mov	r2, r0
 8002f6a:	460b      	mov	r3, r1
 8002f6c:	4613      	mov	r3, r2
 8002f6e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002f70:	69bb      	ldr	r3, [r7, #24]
 8002f72:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002f76:	d308      	bcc.n	8002f8a <UART_SetConfig+0x3de>
 8002f78:	69bb      	ldr	r3, [r7, #24]
 8002f7a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002f7e:	d204      	bcs.n	8002f8a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	69ba      	ldr	r2, [r7, #24]
 8002f86:	60da      	str	r2, [r3, #12]
 8002f88:	e0b6      	b.n	80030f8 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8002f90:	e0b2      	b.n	80030f8 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	69db      	ldr	r3, [r3, #28]
 8002f96:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002f9a:	d15e      	bne.n	800305a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8002f9c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002fa0:	2b08      	cmp	r3, #8
 8002fa2:	d828      	bhi.n	8002ff6 <UART_SetConfig+0x44a>
 8002fa4:	a201      	add	r2, pc, #4	@ (adr r2, 8002fac <UART_SetConfig+0x400>)
 8002fa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002faa:	bf00      	nop
 8002fac:	08002fd1 	.word	0x08002fd1
 8002fb0:	08002fd9 	.word	0x08002fd9
 8002fb4:	08002fe1 	.word	0x08002fe1
 8002fb8:	08002ff7 	.word	0x08002ff7
 8002fbc:	08002fe7 	.word	0x08002fe7
 8002fc0:	08002ff7 	.word	0x08002ff7
 8002fc4:	08002ff7 	.word	0x08002ff7
 8002fc8:	08002ff7 	.word	0x08002ff7
 8002fcc:	08002fef 	.word	0x08002fef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002fd0:	f7ff f838 	bl	8002044 <HAL_RCC_GetPCLK1Freq>
 8002fd4:	61f8      	str	r0, [r7, #28]
        break;
 8002fd6:	e014      	b.n	8003002 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002fd8:	f7ff f84a 	bl	8002070 <HAL_RCC_GetPCLK2Freq>
 8002fdc:	61f8      	str	r0, [r7, #28]
        break;
 8002fde:	e010      	b.n	8003002 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002fe0:	4b4d      	ldr	r3, [pc, #308]	@ (8003118 <UART_SetConfig+0x56c>)
 8002fe2:	61fb      	str	r3, [r7, #28]
        break;
 8002fe4:	e00d      	b.n	8003002 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002fe6:	f7fe ff95 	bl	8001f14 <HAL_RCC_GetSysClockFreq>
 8002fea:	61f8      	str	r0, [r7, #28]
        break;
 8002fec:	e009      	b.n	8003002 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002fee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002ff2:	61fb      	str	r3, [r7, #28]
        break;
 8002ff4:	e005      	b.n	8003002 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003000:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003002:	69fb      	ldr	r3, [r7, #28]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d077      	beq.n	80030f8 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003008:	69fb      	ldr	r3, [r7, #28]
 800300a:	005a      	lsls	r2, r3, #1
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	085b      	lsrs	r3, r3, #1
 8003012:	441a      	add	r2, r3
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	fbb2 f3f3 	udiv	r3, r2, r3
 800301c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800301e:	69bb      	ldr	r3, [r7, #24]
 8003020:	2b0f      	cmp	r3, #15
 8003022:	d916      	bls.n	8003052 <UART_SetConfig+0x4a6>
 8003024:	69bb      	ldr	r3, [r7, #24]
 8003026:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800302a:	d212      	bcs.n	8003052 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800302c:	69bb      	ldr	r3, [r7, #24]
 800302e:	b29b      	uxth	r3, r3
 8003030:	f023 030f 	bic.w	r3, r3, #15
 8003034:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003036:	69bb      	ldr	r3, [r7, #24]
 8003038:	085b      	lsrs	r3, r3, #1
 800303a:	b29b      	uxth	r3, r3
 800303c:	f003 0307 	and.w	r3, r3, #7
 8003040:	b29a      	uxth	r2, r3
 8003042:	8afb      	ldrh	r3, [r7, #22]
 8003044:	4313      	orrs	r3, r2
 8003046:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	8afa      	ldrh	r2, [r7, #22]
 800304e:	60da      	str	r2, [r3, #12]
 8003050:	e052      	b.n	80030f8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003052:	2301      	movs	r3, #1
 8003054:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003058:	e04e      	b.n	80030f8 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800305a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800305e:	2b08      	cmp	r3, #8
 8003060:	d827      	bhi.n	80030b2 <UART_SetConfig+0x506>
 8003062:	a201      	add	r2, pc, #4	@ (adr r2, 8003068 <UART_SetConfig+0x4bc>)
 8003064:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003068:	0800308d 	.word	0x0800308d
 800306c:	08003095 	.word	0x08003095
 8003070:	0800309d 	.word	0x0800309d
 8003074:	080030b3 	.word	0x080030b3
 8003078:	080030a3 	.word	0x080030a3
 800307c:	080030b3 	.word	0x080030b3
 8003080:	080030b3 	.word	0x080030b3
 8003084:	080030b3 	.word	0x080030b3
 8003088:	080030ab 	.word	0x080030ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800308c:	f7fe ffda 	bl	8002044 <HAL_RCC_GetPCLK1Freq>
 8003090:	61f8      	str	r0, [r7, #28]
        break;
 8003092:	e014      	b.n	80030be <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003094:	f7fe ffec 	bl	8002070 <HAL_RCC_GetPCLK2Freq>
 8003098:	61f8      	str	r0, [r7, #28]
        break;
 800309a:	e010      	b.n	80030be <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800309c:	4b1e      	ldr	r3, [pc, #120]	@ (8003118 <UART_SetConfig+0x56c>)
 800309e:	61fb      	str	r3, [r7, #28]
        break;
 80030a0:	e00d      	b.n	80030be <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80030a2:	f7fe ff37 	bl	8001f14 <HAL_RCC_GetSysClockFreq>
 80030a6:	61f8      	str	r0, [r7, #28]
        break;
 80030a8:	e009      	b.n	80030be <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80030aa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80030ae:	61fb      	str	r3, [r7, #28]
        break;
 80030b0:	e005      	b.n	80030be <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80030b2:	2300      	movs	r3, #0
 80030b4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80030b6:	2301      	movs	r3, #1
 80030b8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80030bc:	bf00      	nop
    }

    if (pclk != 0U)
 80030be:	69fb      	ldr	r3, [r7, #28]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d019      	beq.n	80030f8 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	085a      	lsrs	r2, r3, #1
 80030ca:	69fb      	ldr	r3, [r7, #28]
 80030cc:	441a      	add	r2, r3
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80030d6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80030d8:	69bb      	ldr	r3, [r7, #24]
 80030da:	2b0f      	cmp	r3, #15
 80030dc:	d909      	bls.n	80030f2 <UART_SetConfig+0x546>
 80030de:	69bb      	ldr	r3, [r7, #24]
 80030e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80030e4:	d205      	bcs.n	80030f2 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80030e6:	69bb      	ldr	r3, [r7, #24]
 80030e8:	b29a      	uxth	r2, r3
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	60da      	str	r2, [r3, #12]
 80030f0:	e002      	b.n	80030f8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80030f2:	2301      	movs	r3, #1
 80030f4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	2200      	movs	r2, #0
 80030fc:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	2200      	movs	r2, #0
 8003102:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003104:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8003108:	4618      	mov	r0, r3
 800310a:	3728      	adds	r7, #40	@ 0x28
 800310c:	46bd      	mov	sp, r7
 800310e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003112:	bf00      	nop
 8003114:	40008000 	.word	0x40008000
 8003118:	00f42400 	.word	0x00f42400

0800311c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800311c:	b480      	push	{r7}
 800311e:	b083      	sub	sp, #12
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003128:	f003 0308 	and.w	r3, r3, #8
 800312c:	2b00      	cmp	r3, #0
 800312e:	d00a      	beq.n	8003146 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	430a      	orrs	r2, r1
 8003144:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800314a:	f003 0301 	and.w	r3, r3, #1
 800314e:	2b00      	cmp	r3, #0
 8003150:	d00a      	beq.n	8003168 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	430a      	orrs	r2, r1
 8003166:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800316c:	f003 0302 	and.w	r3, r3, #2
 8003170:	2b00      	cmp	r3, #0
 8003172:	d00a      	beq.n	800318a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	430a      	orrs	r2, r1
 8003188:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800318e:	f003 0304 	and.w	r3, r3, #4
 8003192:	2b00      	cmp	r3, #0
 8003194:	d00a      	beq.n	80031ac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	430a      	orrs	r2, r1
 80031aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031b0:	f003 0310 	and.w	r3, r3, #16
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d00a      	beq.n	80031ce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	689b      	ldr	r3, [r3, #8]
 80031be:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	430a      	orrs	r2, r1
 80031cc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031d2:	f003 0320 	and.w	r3, r3, #32
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d00a      	beq.n	80031f0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	689b      	ldr	r3, [r3, #8]
 80031e0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	430a      	orrs	r2, r1
 80031ee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d01a      	beq.n	8003232 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	430a      	orrs	r2, r1
 8003210:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003216:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800321a:	d10a      	bne.n	8003232 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	430a      	orrs	r2, r1
 8003230:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003236:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800323a:	2b00      	cmp	r3, #0
 800323c:	d00a      	beq.n	8003254 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	430a      	orrs	r2, r1
 8003252:	605a      	str	r2, [r3, #4]
  }
}
 8003254:	bf00      	nop
 8003256:	370c      	adds	r7, #12
 8003258:	46bd      	mov	sp, r7
 800325a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325e:	4770      	bx	lr

08003260 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b098      	sub	sp, #96	@ 0x60
 8003264:	af02      	add	r7, sp, #8
 8003266:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2200      	movs	r2, #0
 800326c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003270:	f7fd fc9a 	bl	8000ba8 <HAL_GetTick>
 8003274:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f003 0308 	and.w	r3, r3, #8
 8003280:	2b08      	cmp	r3, #8
 8003282:	d12e      	bne.n	80032e2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003284:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003288:	9300      	str	r3, [sp, #0]
 800328a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800328c:	2200      	movs	r2, #0
 800328e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003292:	6878      	ldr	r0, [r7, #4]
 8003294:	f000 f88c 	bl	80033b0 <UART_WaitOnFlagUntilTimeout>
 8003298:	4603      	mov	r3, r0
 800329a:	2b00      	cmp	r3, #0
 800329c:	d021      	beq.n	80032e2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032a6:	e853 3f00 	ldrex	r3, [r3]
 80032aa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80032ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80032ae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80032b2:	653b      	str	r3, [r7, #80]	@ 0x50
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	461a      	mov	r2, r3
 80032ba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80032bc:	647b      	str	r3, [r7, #68]	@ 0x44
 80032be:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032c0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80032c2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80032c4:	e841 2300 	strex	r3, r2, [r1]
 80032c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80032ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d1e6      	bne.n	800329e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2220      	movs	r2, #32
 80032d4:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2200      	movs	r2, #0
 80032da:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80032de:	2303      	movs	r3, #3
 80032e0:	e062      	b.n	80033a8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f003 0304 	and.w	r3, r3, #4
 80032ec:	2b04      	cmp	r3, #4
 80032ee:	d149      	bne.n	8003384 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80032f0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80032f4:	9300      	str	r3, [sp, #0]
 80032f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80032f8:	2200      	movs	r2, #0
 80032fa:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80032fe:	6878      	ldr	r0, [r7, #4]
 8003300:	f000 f856 	bl	80033b0 <UART_WaitOnFlagUntilTimeout>
 8003304:	4603      	mov	r3, r0
 8003306:	2b00      	cmp	r3, #0
 8003308:	d03c      	beq.n	8003384 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003310:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003312:	e853 3f00 	ldrex	r3, [r3]
 8003316:	623b      	str	r3, [r7, #32]
   return(result);
 8003318:	6a3b      	ldr	r3, [r7, #32]
 800331a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800331e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	461a      	mov	r2, r3
 8003326:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003328:	633b      	str	r3, [r7, #48]	@ 0x30
 800332a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800332c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800332e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003330:	e841 2300 	strex	r3, r2, [r1]
 8003334:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003336:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003338:	2b00      	cmp	r3, #0
 800333a:	d1e6      	bne.n	800330a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	3308      	adds	r3, #8
 8003342:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003344:	693b      	ldr	r3, [r7, #16]
 8003346:	e853 3f00 	ldrex	r3, [r3]
 800334a:	60fb      	str	r3, [r7, #12]
   return(result);
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	f023 0301 	bic.w	r3, r3, #1
 8003352:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	3308      	adds	r3, #8
 800335a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800335c:	61fa      	str	r2, [r7, #28]
 800335e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003360:	69b9      	ldr	r1, [r7, #24]
 8003362:	69fa      	ldr	r2, [r7, #28]
 8003364:	e841 2300 	strex	r3, r2, [r1]
 8003368:	617b      	str	r3, [r7, #20]
   return(result);
 800336a:	697b      	ldr	r3, [r7, #20]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d1e5      	bne.n	800333c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2220      	movs	r2, #32
 8003374:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2200      	movs	r2, #0
 800337c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003380:	2303      	movs	r3, #3
 8003382:	e011      	b.n	80033a8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2220      	movs	r2, #32
 8003388:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2220      	movs	r2, #32
 800338e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2200      	movs	r2, #0
 8003396:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2200      	movs	r2, #0
 800339c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2200      	movs	r2, #0
 80033a2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80033a6:	2300      	movs	r3, #0
}
 80033a8:	4618      	mov	r0, r3
 80033aa:	3758      	adds	r7, #88	@ 0x58
 80033ac:	46bd      	mov	sp, r7
 80033ae:	bd80      	pop	{r7, pc}

080033b0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b084      	sub	sp, #16
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	60f8      	str	r0, [r7, #12]
 80033b8:	60b9      	str	r1, [r7, #8]
 80033ba:	603b      	str	r3, [r7, #0]
 80033bc:	4613      	mov	r3, r2
 80033be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033c0:	e049      	b.n	8003456 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033c2:	69bb      	ldr	r3, [r7, #24]
 80033c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033c8:	d045      	beq.n	8003456 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033ca:	f7fd fbed 	bl	8000ba8 <HAL_GetTick>
 80033ce:	4602      	mov	r2, r0
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	1ad3      	subs	r3, r2, r3
 80033d4:	69ba      	ldr	r2, [r7, #24]
 80033d6:	429a      	cmp	r2, r3
 80033d8:	d302      	bcc.n	80033e0 <UART_WaitOnFlagUntilTimeout+0x30>
 80033da:	69bb      	ldr	r3, [r7, #24]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d101      	bne.n	80033e4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80033e0:	2303      	movs	r3, #3
 80033e2:	e048      	b.n	8003476 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f003 0304 	and.w	r3, r3, #4
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d031      	beq.n	8003456 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	69db      	ldr	r3, [r3, #28]
 80033f8:	f003 0308 	and.w	r3, r3, #8
 80033fc:	2b08      	cmp	r3, #8
 80033fe:	d110      	bne.n	8003422 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	2208      	movs	r2, #8
 8003406:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003408:	68f8      	ldr	r0, [r7, #12]
 800340a:	f000 f838 	bl	800347e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	2208      	movs	r2, #8
 8003412:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	2200      	movs	r2, #0
 800341a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800341e:	2301      	movs	r3, #1
 8003420:	e029      	b.n	8003476 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	69db      	ldr	r3, [r3, #28]
 8003428:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800342c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003430:	d111      	bne.n	8003456 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800343a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800343c:	68f8      	ldr	r0, [r7, #12]
 800343e:	f000 f81e 	bl	800347e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	2220      	movs	r2, #32
 8003446:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	2200      	movs	r2, #0
 800344e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8003452:	2303      	movs	r3, #3
 8003454:	e00f      	b.n	8003476 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	69da      	ldr	r2, [r3, #28]
 800345c:	68bb      	ldr	r3, [r7, #8]
 800345e:	4013      	ands	r3, r2
 8003460:	68ba      	ldr	r2, [r7, #8]
 8003462:	429a      	cmp	r2, r3
 8003464:	bf0c      	ite	eq
 8003466:	2301      	moveq	r3, #1
 8003468:	2300      	movne	r3, #0
 800346a:	b2db      	uxtb	r3, r3
 800346c:	461a      	mov	r2, r3
 800346e:	79fb      	ldrb	r3, [r7, #7]
 8003470:	429a      	cmp	r2, r3
 8003472:	d0a6      	beq.n	80033c2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003474:	2300      	movs	r3, #0
}
 8003476:	4618      	mov	r0, r3
 8003478:	3710      	adds	r7, #16
 800347a:	46bd      	mov	sp, r7
 800347c:	bd80      	pop	{r7, pc}

0800347e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800347e:	b480      	push	{r7}
 8003480:	b095      	sub	sp, #84	@ 0x54
 8003482:	af00      	add	r7, sp, #0
 8003484:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800348c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800348e:	e853 3f00 	ldrex	r3, [r3]
 8003492:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003494:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003496:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800349a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	461a      	mov	r2, r3
 80034a2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80034a4:	643b      	str	r3, [r7, #64]	@ 0x40
 80034a6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034a8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80034aa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80034ac:	e841 2300 	strex	r3, r2, [r1]
 80034b0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80034b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d1e6      	bne.n	8003486 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	3308      	adds	r3, #8
 80034be:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034c0:	6a3b      	ldr	r3, [r7, #32]
 80034c2:	e853 3f00 	ldrex	r3, [r3]
 80034c6:	61fb      	str	r3, [r7, #28]
   return(result);
 80034c8:	69fb      	ldr	r3, [r7, #28]
 80034ca:	f023 0301 	bic.w	r3, r3, #1
 80034ce:	64bb      	str	r3, [r7, #72]	@ 0x48
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	3308      	adds	r3, #8
 80034d6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80034d8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80034da:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034dc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80034de:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80034e0:	e841 2300 	strex	r3, r2, [r1]
 80034e4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80034e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d1e5      	bne.n	80034b8 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034f0:	2b01      	cmp	r3, #1
 80034f2:	d118      	bne.n	8003526 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	e853 3f00 	ldrex	r3, [r3]
 8003500:	60bb      	str	r3, [r7, #8]
   return(result);
 8003502:	68bb      	ldr	r3, [r7, #8]
 8003504:	f023 0310 	bic.w	r3, r3, #16
 8003508:	647b      	str	r3, [r7, #68]	@ 0x44
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	461a      	mov	r2, r3
 8003510:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003512:	61bb      	str	r3, [r7, #24]
 8003514:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003516:	6979      	ldr	r1, [r7, #20]
 8003518:	69ba      	ldr	r2, [r7, #24]
 800351a:	e841 2300 	strex	r3, r2, [r1]
 800351e:	613b      	str	r3, [r7, #16]
   return(result);
 8003520:	693b      	ldr	r3, [r7, #16]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d1e6      	bne.n	80034f4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2220      	movs	r2, #32
 800352a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2200      	movs	r2, #0
 8003532:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2200      	movs	r2, #0
 8003538:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800353a:	bf00      	nop
 800353c:	3754      	adds	r7, #84	@ 0x54
 800353e:	46bd      	mov	sp, r7
 8003540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003544:	4770      	bx	lr

08003546 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003546:	b084      	sub	sp, #16
 8003548:	b580      	push	{r7, lr}
 800354a:	b084      	sub	sp, #16
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
 8003550:	f107 001c 	add.w	r0, r7, #28
 8003554:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	68db      	ldr	r3, [r3, #12]
 800355c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8003564:	6878      	ldr	r0, [r7, #4]
 8003566:	f000 fa65 	bl	8003a34 <USB_CoreReset>
 800356a:	4603      	mov	r3, r0
 800356c:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 800356e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003570:	2b00      	cmp	r3, #0
 8003572:	d106      	bne.n	8003582 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003578:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	639a      	str	r2, [r3, #56]	@ 0x38
 8003580:	e005      	b.n	800358e <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003586:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return ret;
 800358e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003590:	4618      	mov	r0, r3
 8003592:	3710      	adds	r7, #16
 8003594:	46bd      	mov	sp, r7
 8003596:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800359a:	b004      	add	sp, #16
 800359c:	4770      	bx	lr

0800359e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800359e:	b480      	push	{r7}
 80035a0:	b083      	sub	sp, #12
 80035a2:	af00      	add	r7, sp, #0
 80035a4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	689b      	ldr	r3, [r3, #8]
 80035aa:	f023 0201 	bic.w	r2, r3, #1
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80035b2:	2300      	movs	r3, #0
}
 80035b4:	4618      	mov	r0, r3
 80035b6:	370c      	adds	r7, #12
 80035b8:	46bd      	mov	sp, r7
 80035ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035be:	4770      	bx	lr

080035c0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b084      	sub	sp, #16
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
 80035c8:	460b      	mov	r3, r1
 80035ca:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80035cc:	2300      	movs	r3, #0
 80035ce:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	68db      	ldr	r3, [r3, #12]
 80035d4:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80035dc:	78fb      	ldrb	r3, [r7, #3]
 80035de:	2b01      	cmp	r3, #1
 80035e0:	d115      	bne.n	800360e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	68db      	ldr	r3, [r3, #12]
 80035e6:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80035ee:	2001      	movs	r0, #1
 80035f0:	f7fd fae6 	bl	8000bc0 <HAL_Delay>
      ms++;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	3301      	adds	r3, #1
 80035f8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80035fa:	6878      	ldr	r0, [r7, #4]
 80035fc:	f000 fa0c 	bl	8003a18 <USB_GetMode>
 8003600:	4603      	mov	r3, r0
 8003602:	2b01      	cmp	r3, #1
 8003604:	d01e      	beq.n	8003644 <USB_SetCurrentMode+0x84>
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	2b31      	cmp	r3, #49	@ 0x31
 800360a:	d9f0      	bls.n	80035ee <USB_SetCurrentMode+0x2e>
 800360c:	e01a      	b.n	8003644 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800360e:	78fb      	ldrb	r3, [r7, #3]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d115      	bne.n	8003640 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	68db      	ldr	r3, [r3, #12]
 8003618:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003620:	2001      	movs	r0, #1
 8003622:	f7fd facd 	bl	8000bc0 <HAL_Delay>
      ms++;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	3301      	adds	r3, #1
 800362a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800362c:	6878      	ldr	r0, [r7, #4]
 800362e:	f000 f9f3 	bl	8003a18 <USB_GetMode>
 8003632:	4603      	mov	r3, r0
 8003634:	2b00      	cmp	r3, #0
 8003636:	d005      	beq.n	8003644 <USB_SetCurrentMode+0x84>
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	2b31      	cmp	r3, #49	@ 0x31
 800363c:	d9f0      	bls.n	8003620 <USB_SetCurrentMode+0x60>
 800363e:	e001      	b.n	8003644 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003640:	2301      	movs	r3, #1
 8003642:	e005      	b.n	8003650 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	2b32      	cmp	r3, #50	@ 0x32
 8003648:	d101      	bne.n	800364e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800364a:	2301      	movs	r3, #1
 800364c:	e000      	b.n	8003650 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800364e:	2300      	movs	r3, #0
}
 8003650:	4618      	mov	r0, r3
 8003652:	3710      	adds	r7, #16
 8003654:	46bd      	mov	sp, r7
 8003656:	bd80      	pop	{r7, pc}

08003658 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003658:	b084      	sub	sp, #16
 800365a:	b580      	push	{r7, lr}
 800365c:	b086      	sub	sp, #24
 800365e:	af00      	add	r7, sp, #0
 8003660:	6078      	str	r0, [r7, #4]
 8003662:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8003666:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800366a:	2300      	movs	r3, #0
 800366c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003672:	2300      	movs	r3, #0
 8003674:	613b      	str	r3, [r7, #16]
 8003676:	e009      	b.n	800368c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003678:	687a      	ldr	r2, [r7, #4]
 800367a:	693b      	ldr	r3, [r7, #16]
 800367c:	3340      	adds	r3, #64	@ 0x40
 800367e:	009b      	lsls	r3, r3, #2
 8003680:	4413      	add	r3, r2
 8003682:	2200      	movs	r2, #0
 8003684:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003686:	693b      	ldr	r3, [r7, #16]
 8003688:	3301      	adds	r3, #1
 800368a:	613b      	str	r3, [r7, #16]
 800368c:	693b      	ldr	r3, [r7, #16]
 800368e:	2b0e      	cmp	r3, #14
 8003690:	d9f2      	bls.n	8003678 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003692:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003694:	2b00      	cmp	r3, #0
 8003696:	d11c      	bne.n	80036d2 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	68fa      	ldr	r2, [r7, #12]
 80036a2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80036a6:	f043 0302 	orr.w	r3, r3, #2
 80036aa:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036b0:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	601a      	str	r2, [r3, #0]
 80036d0:	e005      	b.n	80036de <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036d6:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80036e4:	461a      	mov	r2, r3
 80036e6:	2300      	movs	r3, #0
 80036e8:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80036ea:	2103      	movs	r1, #3
 80036ec:	6878      	ldr	r0, [r7, #4]
 80036ee:	f000 f959 	bl	80039a4 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80036f2:	2110      	movs	r1, #16
 80036f4:	6878      	ldr	r0, [r7, #4]
 80036f6:	f000 f8f1 	bl	80038dc <USB_FlushTxFifo>
 80036fa:	4603      	mov	r3, r0
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d001      	beq.n	8003704 <USB_DevInit+0xac>
  {
    ret = HAL_ERROR;
 8003700:	2301      	movs	r3, #1
 8003702:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003704:	6878      	ldr	r0, [r7, #4]
 8003706:	f000 f91d 	bl	8003944 <USB_FlushRxFifo>
 800370a:	4603      	mov	r3, r0
 800370c:	2b00      	cmp	r3, #0
 800370e:	d001      	beq.n	8003714 <USB_DevInit+0xbc>
  {
    ret = HAL_ERROR;
 8003710:	2301      	movs	r3, #1
 8003712:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800371a:	461a      	mov	r2, r3
 800371c:	2300      	movs	r3, #0
 800371e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003726:	461a      	mov	r2, r3
 8003728:	2300      	movs	r3, #0
 800372a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003732:	461a      	mov	r2, r3
 8003734:	2300      	movs	r3, #0
 8003736:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003738:	2300      	movs	r3, #0
 800373a:	613b      	str	r3, [r7, #16]
 800373c:	e043      	b.n	80037c6 <USB_DevInit+0x16e>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800373e:	693b      	ldr	r3, [r7, #16]
 8003740:	015a      	lsls	r2, r3, #5
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	4413      	add	r3, r2
 8003746:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003750:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003754:	d118      	bne.n	8003788 <USB_DevInit+0x130>
    {
      if (i == 0U)
 8003756:	693b      	ldr	r3, [r7, #16]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d10a      	bne.n	8003772 <USB_DevInit+0x11a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800375c:	693b      	ldr	r3, [r7, #16]
 800375e:	015a      	lsls	r2, r3, #5
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	4413      	add	r3, r2
 8003764:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003768:	461a      	mov	r2, r3
 800376a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800376e:	6013      	str	r3, [r2, #0]
 8003770:	e013      	b.n	800379a <USB_DevInit+0x142>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003772:	693b      	ldr	r3, [r7, #16]
 8003774:	015a      	lsls	r2, r3, #5
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	4413      	add	r3, r2
 800377a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800377e:	461a      	mov	r2, r3
 8003780:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8003784:	6013      	str	r3, [r2, #0]
 8003786:	e008      	b.n	800379a <USB_DevInit+0x142>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003788:	693b      	ldr	r3, [r7, #16]
 800378a:	015a      	lsls	r2, r3, #5
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	4413      	add	r3, r2
 8003790:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003794:	461a      	mov	r2, r3
 8003796:	2300      	movs	r3, #0
 8003798:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800379a:	693b      	ldr	r3, [r7, #16]
 800379c:	015a      	lsls	r2, r3, #5
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	4413      	add	r3, r2
 80037a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80037a6:	461a      	mov	r2, r3
 80037a8:	2300      	movs	r3, #0
 80037aa:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80037ac:	693b      	ldr	r3, [r7, #16]
 80037ae:	015a      	lsls	r2, r3, #5
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	4413      	add	r3, r2
 80037b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80037b8:	461a      	mov	r2, r3
 80037ba:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80037be:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80037c0:	693b      	ldr	r3, [r7, #16]
 80037c2:	3301      	adds	r3, #1
 80037c4:	613b      	str	r3, [r7, #16]
 80037c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037c8:	693a      	ldr	r2, [r7, #16]
 80037ca:	429a      	cmp	r2, r3
 80037cc:	d3b7      	bcc.n	800373e <USB_DevInit+0xe6>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80037ce:	2300      	movs	r3, #0
 80037d0:	613b      	str	r3, [r7, #16]
 80037d2:	e043      	b.n	800385c <USB_DevInit+0x204>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80037d4:	693b      	ldr	r3, [r7, #16]
 80037d6:	015a      	lsls	r2, r3, #5
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	4413      	add	r3, r2
 80037dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80037e6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80037ea:	d118      	bne.n	800381e <USB_DevInit+0x1c6>
    {
      if (i == 0U)
 80037ec:	693b      	ldr	r3, [r7, #16]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d10a      	bne.n	8003808 <USB_DevInit+0x1b0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80037f2:	693b      	ldr	r3, [r7, #16]
 80037f4:	015a      	lsls	r2, r3, #5
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	4413      	add	r3, r2
 80037fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80037fe:	461a      	mov	r2, r3
 8003800:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8003804:	6013      	str	r3, [r2, #0]
 8003806:	e013      	b.n	8003830 <USB_DevInit+0x1d8>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003808:	693b      	ldr	r3, [r7, #16]
 800380a:	015a      	lsls	r2, r3, #5
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	4413      	add	r3, r2
 8003810:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003814:	461a      	mov	r2, r3
 8003816:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800381a:	6013      	str	r3, [r2, #0]
 800381c:	e008      	b.n	8003830 <USB_DevInit+0x1d8>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800381e:	693b      	ldr	r3, [r7, #16]
 8003820:	015a      	lsls	r2, r3, #5
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	4413      	add	r3, r2
 8003826:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800382a:	461a      	mov	r2, r3
 800382c:	2300      	movs	r3, #0
 800382e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003830:	693b      	ldr	r3, [r7, #16]
 8003832:	015a      	lsls	r2, r3, #5
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	4413      	add	r3, r2
 8003838:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800383c:	461a      	mov	r2, r3
 800383e:	2300      	movs	r3, #0
 8003840:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003842:	693b      	ldr	r3, [r7, #16]
 8003844:	015a      	lsls	r2, r3, #5
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	4413      	add	r3, r2
 800384a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800384e:	461a      	mov	r2, r3
 8003850:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003854:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003856:	693b      	ldr	r3, [r7, #16]
 8003858:	3301      	adds	r3, #1
 800385a:	613b      	str	r3, [r7, #16]
 800385c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800385e:	693a      	ldr	r2, [r7, #16]
 8003860:	429a      	cmp	r2, r3
 8003862:	d3b7      	bcc.n	80037d4 <USB_DevInit+0x17c>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800386a:	691b      	ldr	r3, [r3, #16]
 800386c:	68fa      	ldr	r2, [r7, #12]
 800386e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003872:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003876:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2200      	movs	r2, #0
 800387c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8003884:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	699b      	ldr	r3, [r3, #24]
 800388a:	f043 0210 	orr.w	r2, r3, #16
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	699a      	ldr	r2, [r3, #24]
 8003896:	4b10      	ldr	r3, [pc, #64]	@ (80038d8 <USB_DevInit+0x280>)
 8003898:	4313      	orrs	r3, r2
 800389a:	687a      	ldr	r2, [r7, #4]
 800389c:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800389e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d005      	beq.n	80038b0 <USB_DevInit+0x258>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	699b      	ldr	r3, [r3, #24]
 80038a8:	f043 0208 	orr.w	r2, r3, #8
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80038b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80038b2:	2b01      	cmp	r3, #1
 80038b4:	d107      	bne.n	80038c6 <USB_DevInit+0x26e>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	699b      	ldr	r3, [r3, #24]
 80038ba:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80038be:	f043 0304 	orr.w	r3, r3, #4
 80038c2:	687a      	ldr	r2, [r7, #4]
 80038c4:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80038c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80038c8:	4618      	mov	r0, r3
 80038ca:	3718      	adds	r7, #24
 80038cc:	46bd      	mov	sp, r7
 80038ce:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80038d2:	b004      	add	sp, #16
 80038d4:	4770      	bx	lr
 80038d6:	bf00      	nop
 80038d8:	803c3800 	.word	0x803c3800

080038dc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80038dc:	b480      	push	{r7}
 80038de:	b085      	sub	sp, #20
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
 80038e4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80038e6:	2300      	movs	r3, #0
 80038e8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	3301      	adds	r3, #1
 80038ee:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	4a13      	ldr	r2, [pc, #76]	@ (8003940 <USB_FlushTxFifo+0x64>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d901      	bls.n	80038fc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80038f8:	2303      	movs	r3, #3
 80038fa:	e01b      	b.n	8003934 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	691b      	ldr	r3, [r3, #16]
 8003900:	2b00      	cmp	r3, #0
 8003902:	daf2      	bge.n	80038ea <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003904:	2300      	movs	r3, #0
 8003906:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	019b      	lsls	r3, r3, #6
 800390c:	f043 0220 	orr.w	r2, r3, #32
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	3301      	adds	r3, #1
 8003918:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	4a08      	ldr	r2, [pc, #32]	@ (8003940 <USB_FlushTxFifo+0x64>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d901      	bls.n	8003926 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003922:	2303      	movs	r3, #3
 8003924:	e006      	b.n	8003934 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	691b      	ldr	r3, [r3, #16]
 800392a:	f003 0320 	and.w	r3, r3, #32
 800392e:	2b20      	cmp	r3, #32
 8003930:	d0f0      	beq.n	8003914 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003932:	2300      	movs	r3, #0
}
 8003934:	4618      	mov	r0, r3
 8003936:	3714      	adds	r7, #20
 8003938:	46bd      	mov	sp, r7
 800393a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393e:	4770      	bx	lr
 8003940:	00030d40 	.word	0x00030d40

08003944 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003944:	b480      	push	{r7}
 8003946:	b085      	sub	sp, #20
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800394c:	2300      	movs	r3, #0
 800394e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	3301      	adds	r3, #1
 8003954:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	4a11      	ldr	r2, [pc, #68]	@ (80039a0 <USB_FlushRxFifo+0x5c>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d901      	bls.n	8003962 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800395e:	2303      	movs	r3, #3
 8003960:	e018      	b.n	8003994 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	691b      	ldr	r3, [r3, #16]
 8003966:	2b00      	cmp	r3, #0
 8003968:	daf2      	bge.n	8003950 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800396a:	2300      	movs	r3, #0
 800396c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2210      	movs	r2, #16
 8003972:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	3301      	adds	r3, #1
 8003978:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	4a08      	ldr	r2, [pc, #32]	@ (80039a0 <USB_FlushRxFifo+0x5c>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d901      	bls.n	8003986 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003982:	2303      	movs	r3, #3
 8003984:	e006      	b.n	8003994 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	691b      	ldr	r3, [r3, #16]
 800398a:	f003 0310 	and.w	r3, r3, #16
 800398e:	2b10      	cmp	r3, #16
 8003990:	d0f0      	beq.n	8003974 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003992:	2300      	movs	r3, #0
}
 8003994:	4618      	mov	r0, r3
 8003996:	3714      	adds	r7, #20
 8003998:	46bd      	mov	sp, r7
 800399a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399e:	4770      	bx	lr
 80039a0:	00030d40 	.word	0x00030d40

080039a4 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80039a4:	b480      	push	{r7}
 80039a6:	b085      	sub	sp, #20
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
 80039ac:	460b      	mov	r3, r1
 80039ae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80039ba:	681a      	ldr	r2, [r3, #0]
 80039bc:	78fb      	ldrb	r3, [r7, #3]
 80039be:	68f9      	ldr	r1, [r7, #12]
 80039c0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80039c4:	4313      	orrs	r3, r2
 80039c6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80039c8:	2300      	movs	r3, #0
}
 80039ca:	4618      	mov	r0, r3
 80039cc:	3714      	adds	r7, #20
 80039ce:	46bd      	mov	sp, r7
 80039d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d4:	4770      	bx	lr

080039d6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80039d6:	b480      	push	{r7}
 80039d8:	b085      	sub	sp, #20
 80039da:	af00      	add	r7, sp, #0
 80039dc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	68fa      	ldr	r2, [r7, #12]
 80039ec:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80039f0:	f023 0303 	bic.w	r3, r3, #3
 80039f4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	68fa      	ldr	r2, [r7, #12]
 8003a00:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003a04:	f043 0302 	orr.w	r3, r3, #2
 8003a08:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003a0a:	2300      	movs	r3, #0
}
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	3714      	adds	r7, #20
 8003a10:	46bd      	mov	sp, r7
 8003a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a16:	4770      	bx	lr

08003a18 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	b083      	sub	sp, #12
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	695b      	ldr	r3, [r3, #20]
 8003a24:	f003 0301 	and.w	r3, r3, #1
}
 8003a28:	4618      	mov	r0, r3
 8003a2a:	370c      	adds	r7, #12
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a32:	4770      	bx	lr

08003a34 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003a34:	b480      	push	{r7}
 8003a36:	b085      	sub	sp, #20
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	3301      	adds	r3, #1
 8003a44:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	4a13      	ldr	r2, [pc, #76]	@ (8003a98 <USB_CoreReset+0x64>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d901      	bls.n	8003a52 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8003a4e:	2303      	movs	r3, #3
 8003a50:	e01b      	b.n	8003a8a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	691b      	ldr	r3, [r3, #16]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	daf2      	bge.n	8003a40 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	691b      	ldr	r3, [r3, #16]
 8003a62:	f043 0201 	orr.w	r2, r3, #1
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	3301      	adds	r3, #1
 8003a6e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	4a09      	ldr	r2, [pc, #36]	@ (8003a98 <USB_CoreReset+0x64>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d901      	bls.n	8003a7c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8003a78:	2303      	movs	r3, #3
 8003a7a:	e006      	b.n	8003a8a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	691b      	ldr	r3, [r3, #16]
 8003a80:	f003 0301 	and.w	r3, r3, #1
 8003a84:	2b01      	cmp	r3, #1
 8003a86:	d0f0      	beq.n	8003a6a <USB_CoreReset+0x36>

  return HAL_OK;
 8003a88:	2300      	movs	r3, #0
}
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	3714      	adds	r7, #20
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a94:	4770      	bx	lr
 8003a96:	bf00      	nop
 8003a98:	00030d40 	.word	0x00030d40

08003a9c <memset>:
 8003a9c:	4402      	add	r2, r0
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d100      	bne.n	8003aa6 <memset+0xa>
 8003aa4:	4770      	bx	lr
 8003aa6:	f803 1b01 	strb.w	r1, [r3], #1
 8003aaa:	e7f9      	b.n	8003aa0 <memset+0x4>

08003aac <__libc_init_array>:
 8003aac:	b570      	push	{r4, r5, r6, lr}
 8003aae:	4d0d      	ldr	r5, [pc, #52]	@ (8003ae4 <__libc_init_array+0x38>)
 8003ab0:	4c0d      	ldr	r4, [pc, #52]	@ (8003ae8 <__libc_init_array+0x3c>)
 8003ab2:	1b64      	subs	r4, r4, r5
 8003ab4:	10a4      	asrs	r4, r4, #2
 8003ab6:	2600      	movs	r6, #0
 8003ab8:	42a6      	cmp	r6, r4
 8003aba:	d109      	bne.n	8003ad0 <__libc_init_array+0x24>
 8003abc:	4d0b      	ldr	r5, [pc, #44]	@ (8003aec <__libc_init_array+0x40>)
 8003abe:	4c0c      	ldr	r4, [pc, #48]	@ (8003af0 <__libc_init_array+0x44>)
 8003ac0:	f000 f818 	bl	8003af4 <_init>
 8003ac4:	1b64      	subs	r4, r4, r5
 8003ac6:	10a4      	asrs	r4, r4, #2
 8003ac8:	2600      	movs	r6, #0
 8003aca:	42a6      	cmp	r6, r4
 8003acc:	d105      	bne.n	8003ada <__libc_init_array+0x2e>
 8003ace:	bd70      	pop	{r4, r5, r6, pc}
 8003ad0:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ad4:	4798      	blx	r3
 8003ad6:	3601      	adds	r6, #1
 8003ad8:	e7ee      	b.n	8003ab8 <__libc_init_array+0xc>
 8003ada:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ade:	4798      	blx	r3
 8003ae0:	3601      	adds	r6, #1
 8003ae2:	e7f2      	b.n	8003aca <__libc_init_array+0x1e>
 8003ae4:	08003b5c 	.word	0x08003b5c
 8003ae8:	08003b5c 	.word	0x08003b5c
 8003aec:	08003b5c 	.word	0x08003b5c
 8003af0:	08003b60 	.word	0x08003b60

08003af4 <_init>:
 8003af4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003af6:	bf00      	nop
 8003af8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003afa:	bc08      	pop	{r3}
 8003afc:	469e      	mov	lr, r3
 8003afe:	4770      	bx	lr

08003b00 <_fini>:
 8003b00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b02:	bf00      	nop
 8003b04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b06:	bc08      	pop	{r3}
 8003b08:	469e      	mov	lr, r3
 8003b0a:	4770      	bx	lr
