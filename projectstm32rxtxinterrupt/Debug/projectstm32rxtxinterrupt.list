
projectstm32rxtxinterrupt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004000  080001ac  080001ac  000011ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  080041ac  080041ac  000051ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080041f4  080041f4  00006028  2**0
                  CONTENTS
  4 .ARM          00000008  080041f4  080041f4  000051f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080041fc  080041fc  00006028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080041fc  080041fc  000051fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004200  08004200  00005200  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000028  20000000  08004204  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000110  20000028  0800422c  00006028  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000138  0800422c  00006138  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006028  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c2fa  00000000  00000000  00006058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d2e  00000000  00000000  00012352  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009e8  00000000  00000000  00014080  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000799  00000000  00000000  00014a68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027d87  00000000  00000000  00015201  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c29f  00000000  00000000  0003cf88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f4684  00000000  00000000  00049227  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013d8ab  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000027ac  00000000  00000000  0013d8f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  0014009c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	@ (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	@ (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000028 	.word	0x20000028
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08004194 	.word	0x08004194

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	@ (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	@ (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	@ (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	2000002c 	.word	0x2000002c
 80001e8:	08004194 	.word	0x08004194

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b96a 	b.w	80004d8 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	460c      	mov	r4, r1
 8000224:	2b00      	cmp	r3, #0
 8000226:	d14e      	bne.n	80002c6 <__udivmoddi4+0xaa>
 8000228:	4694      	mov	ip, r2
 800022a:	458c      	cmp	ip, r1
 800022c:	4686      	mov	lr, r0
 800022e:	fab2 f282 	clz	r2, r2
 8000232:	d962      	bls.n	80002fa <__udivmoddi4+0xde>
 8000234:	b14a      	cbz	r2, 800024a <__udivmoddi4+0x2e>
 8000236:	f1c2 0320 	rsb	r3, r2, #32
 800023a:	4091      	lsls	r1, r2
 800023c:	fa20 f303 	lsr.w	r3, r0, r3
 8000240:	fa0c fc02 	lsl.w	ip, ip, r2
 8000244:	4319      	orrs	r1, r3
 8000246:	fa00 fe02 	lsl.w	lr, r0, r2
 800024a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800024e:	fa1f f68c 	uxth.w	r6, ip
 8000252:	fbb1 f4f7 	udiv	r4, r1, r7
 8000256:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800025a:	fb07 1114 	mls	r1, r7, r4, r1
 800025e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000262:	fb04 f106 	mul.w	r1, r4, r6
 8000266:	4299      	cmp	r1, r3
 8000268:	d90a      	bls.n	8000280 <__udivmoddi4+0x64>
 800026a:	eb1c 0303 	adds.w	r3, ip, r3
 800026e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000272:	f080 8112 	bcs.w	800049a <__udivmoddi4+0x27e>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 810f 	bls.w	800049a <__udivmoddi4+0x27e>
 800027c:	3c02      	subs	r4, #2
 800027e:	4463      	add	r3, ip
 8000280:	1a59      	subs	r1, r3, r1
 8000282:	fa1f f38e 	uxth.w	r3, lr
 8000286:	fbb1 f0f7 	udiv	r0, r1, r7
 800028a:	fb07 1110 	mls	r1, r7, r0, r1
 800028e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000292:	fb00 f606 	mul.w	r6, r0, r6
 8000296:	429e      	cmp	r6, r3
 8000298:	d90a      	bls.n	80002b0 <__udivmoddi4+0x94>
 800029a:	eb1c 0303 	adds.w	r3, ip, r3
 800029e:	f100 31ff 	add.w	r1, r0, #4294967295
 80002a2:	f080 80fc 	bcs.w	800049e <__udivmoddi4+0x282>
 80002a6:	429e      	cmp	r6, r3
 80002a8:	f240 80f9 	bls.w	800049e <__udivmoddi4+0x282>
 80002ac:	4463      	add	r3, ip
 80002ae:	3802      	subs	r0, #2
 80002b0:	1b9b      	subs	r3, r3, r6
 80002b2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002b6:	2100      	movs	r1, #0
 80002b8:	b11d      	cbz	r5, 80002c2 <__udivmoddi4+0xa6>
 80002ba:	40d3      	lsrs	r3, r2
 80002bc:	2200      	movs	r2, #0
 80002be:	e9c5 3200 	strd	r3, r2, [r5]
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d905      	bls.n	80002d6 <__udivmoddi4+0xba>
 80002ca:	b10d      	cbz	r5, 80002d0 <__udivmoddi4+0xb4>
 80002cc:	e9c5 0100 	strd	r0, r1, [r5]
 80002d0:	2100      	movs	r1, #0
 80002d2:	4608      	mov	r0, r1
 80002d4:	e7f5      	b.n	80002c2 <__udivmoddi4+0xa6>
 80002d6:	fab3 f183 	clz	r1, r3
 80002da:	2900      	cmp	r1, #0
 80002dc:	d146      	bne.n	800036c <__udivmoddi4+0x150>
 80002de:	42a3      	cmp	r3, r4
 80002e0:	d302      	bcc.n	80002e8 <__udivmoddi4+0xcc>
 80002e2:	4290      	cmp	r0, r2
 80002e4:	f0c0 80f0 	bcc.w	80004c8 <__udivmoddi4+0x2ac>
 80002e8:	1a86      	subs	r6, r0, r2
 80002ea:	eb64 0303 	sbc.w	r3, r4, r3
 80002ee:	2001      	movs	r0, #1
 80002f0:	2d00      	cmp	r5, #0
 80002f2:	d0e6      	beq.n	80002c2 <__udivmoddi4+0xa6>
 80002f4:	e9c5 6300 	strd	r6, r3, [r5]
 80002f8:	e7e3      	b.n	80002c2 <__udivmoddi4+0xa6>
 80002fa:	2a00      	cmp	r2, #0
 80002fc:	f040 8090 	bne.w	8000420 <__udivmoddi4+0x204>
 8000300:	eba1 040c 	sub.w	r4, r1, ip
 8000304:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000308:	fa1f f78c 	uxth.w	r7, ip
 800030c:	2101      	movs	r1, #1
 800030e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000312:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000316:	fb08 4416 	mls	r4, r8, r6, r4
 800031a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800031e:	fb07 f006 	mul.w	r0, r7, r6
 8000322:	4298      	cmp	r0, r3
 8000324:	d908      	bls.n	8000338 <__udivmoddi4+0x11c>
 8000326:	eb1c 0303 	adds.w	r3, ip, r3
 800032a:	f106 34ff 	add.w	r4, r6, #4294967295
 800032e:	d202      	bcs.n	8000336 <__udivmoddi4+0x11a>
 8000330:	4298      	cmp	r0, r3
 8000332:	f200 80cd 	bhi.w	80004d0 <__udivmoddi4+0x2b4>
 8000336:	4626      	mov	r6, r4
 8000338:	1a1c      	subs	r4, r3, r0
 800033a:	fa1f f38e 	uxth.w	r3, lr
 800033e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000342:	fb08 4410 	mls	r4, r8, r0, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb00 f707 	mul.w	r7, r0, r7
 800034e:	429f      	cmp	r7, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x148>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f100 34ff 	add.w	r4, r0, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x146>
 800035c:	429f      	cmp	r7, r3
 800035e:	f200 80b0 	bhi.w	80004c2 <__udivmoddi4+0x2a6>
 8000362:	4620      	mov	r0, r4
 8000364:	1bdb      	subs	r3, r3, r7
 8000366:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800036a:	e7a5      	b.n	80002b8 <__udivmoddi4+0x9c>
 800036c:	f1c1 0620 	rsb	r6, r1, #32
 8000370:	408b      	lsls	r3, r1
 8000372:	fa22 f706 	lsr.w	r7, r2, r6
 8000376:	431f      	orrs	r7, r3
 8000378:	fa20 fc06 	lsr.w	ip, r0, r6
 800037c:	fa04 f301 	lsl.w	r3, r4, r1
 8000380:	ea43 030c 	orr.w	r3, r3, ip
 8000384:	40f4      	lsrs	r4, r6
 8000386:	fa00 f801 	lsl.w	r8, r0, r1
 800038a:	0c38      	lsrs	r0, r7, #16
 800038c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000390:	fbb4 fef0 	udiv	lr, r4, r0
 8000394:	fa1f fc87 	uxth.w	ip, r7
 8000398:	fb00 441e 	mls	r4, r0, lr, r4
 800039c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003a0:	fb0e f90c 	mul.w	r9, lr, ip
 80003a4:	45a1      	cmp	r9, r4
 80003a6:	fa02 f201 	lsl.w	r2, r2, r1
 80003aa:	d90a      	bls.n	80003c2 <__udivmoddi4+0x1a6>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003b2:	f080 8084 	bcs.w	80004be <__udivmoddi4+0x2a2>
 80003b6:	45a1      	cmp	r9, r4
 80003b8:	f240 8081 	bls.w	80004be <__udivmoddi4+0x2a2>
 80003bc:	f1ae 0e02 	sub.w	lr, lr, #2
 80003c0:	443c      	add	r4, r7
 80003c2:	eba4 0409 	sub.w	r4, r4, r9
 80003c6:	fa1f f983 	uxth.w	r9, r3
 80003ca:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ce:	fb00 4413 	mls	r4, r0, r3, r4
 80003d2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003d6:	fb03 fc0c 	mul.w	ip, r3, ip
 80003da:	45a4      	cmp	ip, r4
 80003dc:	d907      	bls.n	80003ee <__udivmoddi4+0x1d2>
 80003de:	193c      	adds	r4, r7, r4
 80003e0:	f103 30ff 	add.w	r0, r3, #4294967295
 80003e4:	d267      	bcs.n	80004b6 <__udivmoddi4+0x29a>
 80003e6:	45a4      	cmp	ip, r4
 80003e8:	d965      	bls.n	80004b6 <__udivmoddi4+0x29a>
 80003ea:	3b02      	subs	r3, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003f2:	fba0 9302 	umull	r9, r3, r0, r2
 80003f6:	eba4 040c 	sub.w	r4, r4, ip
 80003fa:	429c      	cmp	r4, r3
 80003fc:	46ce      	mov	lr, r9
 80003fe:	469c      	mov	ip, r3
 8000400:	d351      	bcc.n	80004a6 <__udivmoddi4+0x28a>
 8000402:	d04e      	beq.n	80004a2 <__udivmoddi4+0x286>
 8000404:	b155      	cbz	r5, 800041c <__udivmoddi4+0x200>
 8000406:	ebb8 030e 	subs.w	r3, r8, lr
 800040a:	eb64 040c 	sbc.w	r4, r4, ip
 800040e:	fa04 f606 	lsl.w	r6, r4, r6
 8000412:	40cb      	lsrs	r3, r1
 8000414:	431e      	orrs	r6, r3
 8000416:	40cc      	lsrs	r4, r1
 8000418:	e9c5 6400 	strd	r6, r4, [r5]
 800041c:	2100      	movs	r1, #0
 800041e:	e750      	b.n	80002c2 <__udivmoddi4+0xa6>
 8000420:	f1c2 0320 	rsb	r3, r2, #32
 8000424:	fa20 f103 	lsr.w	r1, r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa24 f303 	lsr.w	r3, r4, r3
 8000430:	4094      	lsls	r4, r2
 8000432:	430c      	orrs	r4, r1
 8000434:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000438:	fa00 fe02 	lsl.w	lr, r0, r2
 800043c:	fa1f f78c 	uxth.w	r7, ip
 8000440:	fbb3 f0f8 	udiv	r0, r3, r8
 8000444:	fb08 3110 	mls	r1, r8, r0, r3
 8000448:	0c23      	lsrs	r3, r4, #16
 800044a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044e:	fb00 f107 	mul.w	r1, r0, r7
 8000452:	4299      	cmp	r1, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x24c>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 36ff 	add.w	r6, r0, #4294967295
 800045e:	d22c      	bcs.n	80004ba <__udivmoddi4+0x29e>
 8000460:	4299      	cmp	r1, r3
 8000462:	d92a      	bls.n	80004ba <__udivmoddi4+0x29e>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1a5b      	subs	r3, r3, r1
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000470:	fb08 3311 	mls	r3, r8, r1, r3
 8000474:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000478:	fb01 f307 	mul.w	r3, r1, r7
 800047c:	42a3      	cmp	r3, r4
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x276>
 8000480:	eb1c 0404 	adds.w	r4, ip, r4
 8000484:	f101 36ff 	add.w	r6, r1, #4294967295
 8000488:	d213      	bcs.n	80004b2 <__udivmoddi4+0x296>
 800048a:	42a3      	cmp	r3, r4
 800048c:	d911      	bls.n	80004b2 <__udivmoddi4+0x296>
 800048e:	3902      	subs	r1, #2
 8000490:	4464      	add	r4, ip
 8000492:	1ae4      	subs	r4, r4, r3
 8000494:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000498:	e739      	b.n	800030e <__udivmoddi4+0xf2>
 800049a:	4604      	mov	r4, r0
 800049c:	e6f0      	b.n	8000280 <__udivmoddi4+0x64>
 800049e:	4608      	mov	r0, r1
 80004a0:	e706      	b.n	80002b0 <__udivmoddi4+0x94>
 80004a2:	45c8      	cmp	r8, r9
 80004a4:	d2ae      	bcs.n	8000404 <__udivmoddi4+0x1e8>
 80004a6:	ebb9 0e02 	subs.w	lr, r9, r2
 80004aa:	eb63 0c07 	sbc.w	ip, r3, r7
 80004ae:	3801      	subs	r0, #1
 80004b0:	e7a8      	b.n	8000404 <__udivmoddi4+0x1e8>
 80004b2:	4631      	mov	r1, r6
 80004b4:	e7ed      	b.n	8000492 <__udivmoddi4+0x276>
 80004b6:	4603      	mov	r3, r0
 80004b8:	e799      	b.n	80003ee <__udivmoddi4+0x1d2>
 80004ba:	4630      	mov	r0, r6
 80004bc:	e7d4      	b.n	8000468 <__udivmoddi4+0x24c>
 80004be:	46d6      	mov	lr, sl
 80004c0:	e77f      	b.n	80003c2 <__udivmoddi4+0x1a6>
 80004c2:	4463      	add	r3, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e74d      	b.n	8000364 <__udivmoddi4+0x148>
 80004c8:	4606      	mov	r6, r0
 80004ca:	4623      	mov	r3, r4
 80004cc:	4608      	mov	r0, r1
 80004ce:	e70f      	b.n	80002f0 <__udivmoddi4+0xd4>
 80004d0:	3e02      	subs	r6, #2
 80004d2:	4463      	add	r3, ip
 80004d4:	e730      	b.n	8000338 <__udivmoddi4+0x11c>
 80004d6:	bf00      	nop

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004e0:	f000 fa77 	bl	80009d2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e4:	f000 f848 	bl	8000578 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e8:	f000 f8c6 	bl	8000678 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 80004ec:	f000 f898 	bl	8000620 <MX_LPUART1_UART_Init>
  /* USER CODE BEGIN 2 */

  // Transmit initial message
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET); // Turn on LED
 80004f0:	2201      	movs	r2, #1
 80004f2:	2180      	movs	r1, #128	@ 0x80
 80004f4:	481a      	ldr	r0, [pc, #104]	@ (8000560 <main+0x84>)
 80004f6:	f000 fe3f 	bl	8001178 <HAL_GPIO_WritePin>
  HAL_UART_Transmit_IT(&hlpuart1, txData, sizeof(txData) - 1);
 80004fa:	2218      	movs	r2, #24
 80004fc:	4919      	ldr	r1, [pc, #100]	@ (8000564 <main+0x88>)
 80004fe:	481a      	ldr	r0, [pc, #104]	@ (8000568 <main+0x8c>)
 8000500:	f002 fa1c 	bl	800293c <HAL_UART_Transmit_IT>

  // Receive data
  HAL_UART_Receive_IT(&hlpuart1, rxData, sizeof(rxData));
 8000504:	2264      	movs	r2, #100	@ 0x64
 8000506:	4919      	ldr	r1, [pc, #100]	@ (800056c <main+0x90>)
 8000508:	4817      	ldr	r0, [pc, #92]	@ (8000568 <main+0x8c>)
 800050a:	f002 fa75 	bl	80029f8 <HAL_UART_Receive_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    // Check if button is pressed
    if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_RESET) {
 800050e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000512:	4817      	ldr	r0, [pc, #92]	@ (8000570 <main+0x94>)
 8000514:	f000 fe18 	bl	8001148 <HAL_GPIO_ReadPin>
 8000518:	4603      	mov	r3, r0
 800051a:	2b00      	cmp	r3, #0
 800051c:	d10d      	bne.n	800053a <main+0x5e>
      // Button pressed, transmit data
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET); // Turn on LED
 800051e:	2201      	movs	r2, #1
 8000520:	2180      	movs	r1, #128	@ 0x80
 8000522:	480f      	ldr	r0, [pc, #60]	@ (8000560 <main+0x84>)
 8000524:	f000 fe28 	bl	8001178 <HAL_GPIO_WritePin>
      HAL_UART_Transmit_IT(&hlpuart1, txData, sizeof(txData) - 1);
 8000528:	2218      	movs	r2, #24
 800052a:	490e      	ldr	r1, [pc, #56]	@ (8000564 <main+0x88>)
 800052c:	480e      	ldr	r0, [pc, #56]	@ (8000568 <main+0x8c>)
 800052e:	f002 fa05 	bl	800293c <HAL_UART_Transmit_IT>
      HAL_Delay(300); // Debounce delay
 8000532:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000536:	f000 fac1 	bl	8000abc <HAL_Delay>
    }

    if (rxComplete) {
 800053a:	4b0e      	ldr	r3, [pc, #56]	@ (8000574 <main+0x98>)
 800053c:	781b      	ldrb	r3, [r3, #0]
 800053e:	b2db      	uxtb	r3, r3
 8000540:	2b00      	cmp	r3, #0
 8000542:	d0e4      	beq.n	800050e <main+0x32>
      // Data received, process it here
      rxComplete = 0;
 8000544:	4b0b      	ldr	r3, [pc, #44]	@ (8000574 <main+0x98>)
 8000546:	2200      	movs	r2, #0
 8000548:	701a      	strb	r2, [r3, #0]
      // Echo received data back
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET); // Turn on LED
 800054a:	2201      	movs	r2, #1
 800054c:	2180      	movs	r1, #128	@ 0x80
 800054e:	4804      	ldr	r0, [pc, #16]	@ (8000560 <main+0x84>)
 8000550:	f000 fe12 	bl	8001178 <HAL_GPIO_WritePin>
      HAL_UART_Transmit_IT(&hlpuart1, rxData, sizeof(rxData));
 8000554:	2264      	movs	r2, #100	@ 0x64
 8000556:	4905      	ldr	r1, [pc, #20]	@ (800056c <main+0x90>)
 8000558:	4803      	ldr	r0, [pc, #12]	@ (8000568 <main+0x8c>)
 800055a:	f002 f9ef 	bl	800293c <HAL_UART_Transmit_IT>
    if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_RESET) {
 800055e:	e7d6      	b.n	800050e <main+0x32>
 8000560:	48000400 	.word	0x48000400
 8000564:	20000000 	.word	0x20000000
 8000568:	20000044 	.word	0x20000044
 800056c:	200000cc 	.word	0x200000cc
 8000570:	48000800 	.word	0x48000800
 8000574:	20000130 	.word	0x20000130

08000578 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b096      	sub	sp, #88	@ 0x58
 800057c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800057e:	f107 0314 	add.w	r3, r7, #20
 8000582:	2244      	movs	r2, #68	@ 0x44
 8000584:	2100      	movs	r1, #0
 8000586:	4618      	mov	r0, r3
 8000588:	f003 fdd8 	bl	800413c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800058c:	463b      	mov	r3, r7
 800058e:	2200      	movs	r2, #0
 8000590:	601a      	str	r2, [r3, #0]
 8000592:	605a      	str	r2, [r3, #4]
 8000594:	609a      	str	r2, [r3, #8]
 8000596:	60da      	str	r2, [r3, #12]
 8000598:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800059a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800059e:	f000 fe11 	bl	80011c4 <HAL_PWREx_ControlVoltageScaling>
 80005a2:	4603      	mov	r3, r0
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d001      	beq.n	80005ac <SystemClock_Config+0x34>
  {
    Error_Handler();
 80005a8:	f000 f90c 	bl	80007c4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80005ac:	2310      	movs	r3, #16
 80005ae:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80005b0:	2301      	movs	r3, #1
 80005b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80005b4:	2300      	movs	r3, #0
 80005b6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80005b8:	2360      	movs	r3, #96	@ 0x60
 80005ba:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005bc:	2302      	movs	r3, #2
 80005be:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80005c0:	2301      	movs	r3, #1
 80005c2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80005c4:	2301      	movs	r3, #1
 80005c6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 36;
 80005c8:	2324      	movs	r3, #36	@ 0x24
 80005ca:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005cc:	2302      	movs	r3, #2
 80005ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005d0:	2302      	movs	r3, #2
 80005d2:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005d4:	2302      	movs	r3, #2
 80005d6:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005d8:	f107 0314 	add.w	r3, r7, #20
 80005dc:	4618      	mov	r0, r3
 80005de:	f000 fe57 	bl	8001290 <HAL_RCC_OscConfig>
 80005e2:	4603      	mov	r3, r0
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d001      	beq.n	80005ec <SystemClock_Config+0x74>
  {
    Error_Handler();
 80005e8:	f000 f8ec 	bl	80007c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ec:	230f      	movs	r3, #15
 80005ee:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005f0:	2303      	movs	r3, #3
 80005f2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005f4:	2300      	movs	r3, #0
 80005f6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005f8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80005fc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005fe:	2300      	movs	r3, #0
 8000600:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000602:	463b      	mov	r3, r7
 8000604:	2104      	movs	r1, #4
 8000606:	4618      	mov	r0, r3
 8000608:	f001 fa5c 	bl	8001ac4 <HAL_RCC_ClockConfig>
 800060c:	4603      	mov	r3, r0
 800060e:	2b00      	cmp	r3, #0
 8000610:	d001      	beq.n	8000616 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000612:	f000 f8d7 	bl	80007c4 <Error_Handler>
  }
}
 8000616:	bf00      	nop
 8000618:	3758      	adds	r7, #88	@ 0x58
 800061a:	46bd      	mov	sp, r7
 800061c:	bd80      	pop	{r7, pc}
	...

08000620 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000624:	4b12      	ldr	r3, [pc, #72]	@ (8000670 <MX_LPUART1_UART_Init+0x50>)
 8000626:	4a13      	ldr	r2, [pc, #76]	@ (8000674 <MX_LPUART1_UART_Init+0x54>)
 8000628:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 9600;
 800062a:	4b11      	ldr	r3, [pc, #68]	@ (8000670 <MX_LPUART1_UART_Init+0x50>)
 800062c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000630:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000632:	4b0f      	ldr	r3, [pc, #60]	@ (8000670 <MX_LPUART1_UART_Init+0x50>)
 8000634:	2200      	movs	r2, #0
 8000636:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000638:	4b0d      	ldr	r3, [pc, #52]	@ (8000670 <MX_LPUART1_UART_Init+0x50>)
 800063a:	2200      	movs	r2, #0
 800063c:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800063e:	4b0c      	ldr	r3, [pc, #48]	@ (8000670 <MX_LPUART1_UART_Init+0x50>)
 8000640:	2200      	movs	r2, #0
 8000642:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000644:	4b0a      	ldr	r3, [pc, #40]	@ (8000670 <MX_LPUART1_UART_Init+0x50>)
 8000646:	220c      	movs	r2, #12
 8000648:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800064a:	4b09      	ldr	r3, [pc, #36]	@ (8000670 <MX_LPUART1_UART_Init+0x50>)
 800064c:	2200      	movs	r2, #0
 800064e:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000650:	4b07      	ldr	r3, [pc, #28]	@ (8000670 <MX_LPUART1_UART_Init+0x50>)
 8000652:	2200      	movs	r2, #0
 8000654:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000656:	4b06      	ldr	r3, [pc, #24]	@ (8000670 <MX_LPUART1_UART_Init+0x50>)
 8000658:	2200      	movs	r2, #0
 800065a:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800065c:	4804      	ldr	r0, [pc, #16]	@ (8000670 <MX_LPUART1_UART_Init+0x50>)
 800065e:	f002 f91f 	bl	80028a0 <HAL_UART_Init>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d001      	beq.n	800066c <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 8000668:	f000 f8ac 	bl	80007c4 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800066c:	bf00      	nop
 800066e:	bd80      	pop	{r7, pc}
 8000670:	20000044 	.word	0x20000044
 8000674:	40008000 	.word	0x40008000

08000678 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b08a      	sub	sp, #40	@ 0x28
 800067c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800067e:	f107 0314 	add.w	r3, r7, #20
 8000682:	2200      	movs	r2, #0
 8000684:	601a      	str	r2, [r3, #0]
 8000686:	605a      	str	r2, [r3, #4]
 8000688:	609a      	str	r2, [r3, #8]
 800068a:	60da      	str	r2, [r3, #12]
 800068c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800068e:	4b31      	ldr	r3, [pc, #196]	@ (8000754 <MX_GPIO_Init+0xdc>)
 8000690:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000692:	4a30      	ldr	r2, [pc, #192]	@ (8000754 <MX_GPIO_Init+0xdc>)
 8000694:	f043 0304 	orr.w	r3, r3, #4
 8000698:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800069a:	4b2e      	ldr	r3, [pc, #184]	@ (8000754 <MX_GPIO_Init+0xdc>)
 800069c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800069e:	f003 0304 	and.w	r3, r3, #4
 80006a2:	613b      	str	r3, [r7, #16]
 80006a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006a6:	4b2b      	ldr	r3, [pc, #172]	@ (8000754 <MX_GPIO_Init+0xdc>)
 80006a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006aa:	4a2a      	ldr	r2, [pc, #168]	@ (8000754 <MX_GPIO_Init+0xdc>)
 80006ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80006b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006b2:	4b28      	ldr	r3, [pc, #160]	@ (8000754 <MX_GPIO_Init+0xdc>)
 80006b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80006ba:	60fb      	str	r3, [r7, #12]
 80006bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80006be:	4b25      	ldr	r3, [pc, #148]	@ (8000754 <MX_GPIO_Init+0xdc>)
 80006c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006c2:	4a24      	ldr	r2, [pc, #144]	@ (8000754 <MX_GPIO_Init+0xdc>)
 80006c4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80006c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006ca:	4b22      	ldr	r3, [pc, #136]	@ (8000754 <MX_GPIO_Init+0xdc>)
 80006cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80006d2:	60bb      	str	r3, [r7, #8]
 80006d4:	68bb      	ldr	r3, [r7, #8]
  HAL_PWREx_EnableVddIO2();
 80006d6:	f000 fdcb 	bl	8001270 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006da:	4b1e      	ldr	r3, [pc, #120]	@ (8000754 <MX_GPIO_Init+0xdc>)
 80006dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006de:	4a1d      	ldr	r2, [pc, #116]	@ (8000754 <MX_GPIO_Init+0xdc>)
 80006e0:	f043 0301 	orr.w	r3, r3, #1
 80006e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006e6:	4b1b      	ldr	r3, [pc, #108]	@ (8000754 <MX_GPIO_Init+0xdc>)
 80006e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006ea:	f003 0301 	and.w	r3, r3, #1
 80006ee:	607b      	str	r3, [r7, #4]
 80006f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006f2:	4b18      	ldr	r3, [pc, #96]	@ (8000754 <MX_GPIO_Init+0xdc>)
 80006f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006f6:	4a17      	ldr	r2, [pc, #92]	@ (8000754 <MX_GPIO_Init+0xdc>)
 80006f8:	f043 0302 	orr.w	r3, r3, #2
 80006fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006fe:	4b15      	ldr	r3, [pc, #84]	@ (8000754 <MX_GPIO_Init+0xdc>)
 8000700:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000702:	f003 0302 	and.w	r3, r3, #2
 8000706:	603b      	str	r3, [r7, #0]
 8000708:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 800070a:	2201      	movs	r2, #1
 800070c:	2180      	movs	r1, #128	@ 0x80
 800070e:	4812      	ldr	r0, [pc, #72]	@ (8000758 <MX_GPIO_Init+0xe0>)
 8000710:	f000 fd32 	bl	8001178 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Button_Pin */
  GPIO_InitStruct.Pin = Button_Pin;
 8000714:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000718:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800071a:	2300      	movs	r3, #0
 800071c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071e:	2300      	movs	r3, #0
 8000720:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 8000722:	f107 0314 	add.w	r3, r7, #20
 8000726:	4619      	mov	r1, r3
 8000728:	480c      	ldr	r0, [pc, #48]	@ (800075c <MX_GPIO_Init+0xe4>)
 800072a:	f000 fb7b 	bl	8000e24 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800072e:	2380      	movs	r3, #128	@ 0x80
 8000730:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000732:	2301      	movs	r3, #1
 8000734:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000736:	2300      	movs	r3, #0
 8000738:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800073a:	2300      	movs	r3, #0
 800073c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800073e:	f107 0314 	add.w	r3, r7, #20
 8000742:	4619      	mov	r1, r3
 8000744:	4804      	ldr	r0, [pc, #16]	@ (8000758 <MX_GPIO_Init+0xe0>)
 8000746:	f000 fb6d 	bl	8000e24 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800074a:	bf00      	nop
 800074c:	3728      	adds	r7, #40	@ 0x28
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	40021000 	.word	0x40021000
 8000758:	48000400 	.word	0x48000400
 800075c:	48000800 	.word	0x48000800

08000760 <HAL_UART_TxCpltCallback>:

/* USER CODE BEGIN 4 */

// Transmit complete callback
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b082      	sub	sp, #8
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
  if (huart->Instance == LPUART1) {
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	4a05      	ldr	r2, [pc, #20]	@ (8000784 <HAL_UART_TxCpltCallback+0x24>)
 800076e:	4293      	cmp	r3, r2
 8000770:	d104      	bne.n	800077c <HAL_UART_TxCpltCallback+0x1c>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET); // Turn off LED
 8000772:	2200      	movs	r2, #0
 8000774:	2180      	movs	r1, #128	@ 0x80
 8000776:	4804      	ldr	r0, [pc, #16]	@ (8000788 <HAL_UART_TxCpltCallback+0x28>)
 8000778:	f000 fcfe 	bl	8001178 <HAL_GPIO_WritePin>
  }
}
 800077c:	bf00      	nop
 800077e:	3708      	adds	r7, #8
 8000780:	46bd      	mov	sp, r7
 8000782:	bd80      	pop	{r7, pc}
 8000784:	40008000 	.word	0x40008000
 8000788:	48000400 	.word	0x48000400

0800078c <HAL_UART_RxCpltCallback>:

// Receive complete callback
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b082      	sub	sp, #8
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
  if (huart->Instance == LPUART1) {
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	4a07      	ldr	r2, [pc, #28]	@ (80007b8 <HAL_UART_RxCpltCallback+0x2c>)
 800079a:	4293      	cmp	r3, r2
 800079c:	d107      	bne.n	80007ae <HAL_UART_RxCpltCallback+0x22>
    rxComplete = 1;
 800079e:	4b07      	ldr	r3, [pc, #28]	@ (80007bc <HAL_UART_RxCpltCallback+0x30>)
 80007a0:	2201      	movs	r2, #1
 80007a2:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET); // Turn off LED
 80007a4:	2200      	movs	r2, #0
 80007a6:	2180      	movs	r1, #128	@ 0x80
 80007a8:	4805      	ldr	r0, [pc, #20]	@ (80007c0 <HAL_UART_RxCpltCallback+0x34>)
 80007aa:	f000 fce5 	bl	8001178 <HAL_GPIO_WritePin>
  }
}
 80007ae:	bf00      	nop
 80007b0:	3708      	adds	r7, #8
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	40008000 	.word	0x40008000
 80007bc:	20000130 	.word	0x20000130
 80007c0:	48000400 	.word	0x48000400

080007c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007c4:	b480      	push	{r7}
 80007c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007c8:	b672      	cpsid	i
}
 80007ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007cc:	bf00      	nop
 80007ce:	e7fd      	b.n	80007cc <Error_Handler+0x8>

080007d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007d0:	b480      	push	{r7}
 80007d2:	b083      	sub	sp, #12
 80007d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007d6:	4b0f      	ldr	r3, [pc, #60]	@ (8000814 <HAL_MspInit+0x44>)
 80007d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80007da:	4a0e      	ldr	r2, [pc, #56]	@ (8000814 <HAL_MspInit+0x44>)
 80007dc:	f043 0301 	orr.w	r3, r3, #1
 80007e0:	6613      	str	r3, [r2, #96]	@ 0x60
 80007e2:	4b0c      	ldr	r3, [pc, #48]	@ (8000814 <HAL_MspInit+0x44>)
 80007e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80007e6:	f003 0301 	and.w	r3, r3, #1
 80007ea:	607b      	str	r3, [r7, #4]
 80007ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007ee:	4b09      	ldr	r3, [pc, #36]	@ (8000814 <HAL_MspInit+0x44>)
 80007f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80007f2:	4a08      	ldr	r2, [pc, #32]	@ (8000814 <HAL_MspInit+0x44>)
 80007f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007f8:	6593      	str	r3, [r2, #88]	@ 0x58
 80007fa:	4b06      	ldr	r3, [pc, #24]	@ (8000814 <HAL_MspInit+0x44>)
 80007fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80007fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000802:	603b      	str	r3, [r7, #0]
 8000804:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000806:	bf00      	nop
 8000808:	370c      	adds	r7, #12
 800080a:	46bd      	mov	sp, r7
 800080c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000810:	4770      	bx	lr
 8000812:	bf00      	nop
 8000814:	40021000 	.word	0x40021000

08000818 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b0ac      	sub	sp, #176	@ 0xb0
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000820:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000824:	2200      	movs	r2, #0
 8000826:	601a      	str	r2, [r3, #0]
 8000828:	605a      	str	r2, [r3, #4]
 800082a:	609a      	str	r2, [r3, #8]
 800082c:	60da      	str	r2, [r3, #12]
 800082e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000830:	f107 0310 	add.w	r3, r7, #16
 8000834:	228c      	movs	r2, #140	@ 0x8c
 8000836:	2100      	movs	r1, #0
 8000838:	4618      	mov	r0, r3
 800083a:	f003 fc7f 	bl	800413c <memset>
  if(huart->Instance==LPUART1)
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	4a26      	ldr	r2, [pc, #152]	@ (80008dc <HAL_UART_MspInit+0xc4>)
 8000844:	4293      	cmp	r3, r2
 8000846:	d145      	bne.n	80008d4 <HAL_UART_MspInit+0xbc>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000848:	2320      	movs	r3, #32
 800084a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 800084c:	2300      	movs	r3, #0
 800084e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000850:	f107 0310 	add.w	r3, r7, #16
 8000854:	4618      	mov	r0, r3
 8000856:	f001 fb59 	bl	8001f0c <HAL_RCCEx_PeriphCLKConfig>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d001      	beq.n	8000864 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000860:	f7ff ffb0 	bl	80007c4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000864:	4b1e      	ldr	r3, [pc, #120]	@ (80008e0 <HAL_UART_MspInit+0xc8>)
 8000866:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000868:	4a1d      	ldr	r2, [pc, #116]	@ (80008e0 <HAL_UART_MspInit+0xc8>)
 800086a:	f043 0301 	orr.w	r3, r3, #1
 800086e:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8000870:	4b1b      	ldr	r3, [pc, #108]	@ (80008e0 <HAL_UART_MspInit+0xc8>)
 8000872:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000874:	f003 0301 	and.w	r3, r3, #1
 8000878:	60fb      	str	r3, [r7, #12]
 800087a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 800087c:	4b18      	ldr	r3, [pc, #96]	@ (80008e0 <HAL_UART_MspInit+0xc8>)
 800087e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000880:	4a17      	ldr	r2, [pc, #92]	@ (80008e0 <HAL_UART_MspInit+0xc8>)
 8000882:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000886:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000888:	4b15      	ldr	r3, [pc, #84]	@ (80008e0 <HAL_UART_MspInit+0xc8>)
 800088a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800088c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000890:	60bb      	str	r3, [r7, #8]
 8000892:	68bb      	ldr	r3, [r7, #8]
    HAL_PWREx_EnableVddIO2();
 8000894:	f000 fcec 	bl	8001270 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8000898:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 800089c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008a0:	2302      	movs	r3, #2
 80008a2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a6:	2300      	movs	r3, #0
 80008a8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008ac:	2303      	movs	r3, #3
 80008ae:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80008b2:	2308      	movs	r3, #8
 80008b4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80008b8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80008bc:	4619      	mov	r1, r3
 80008be:	4809      	ldr	r0, [pc, #36]	@ (80008e4 <HAL_UART_MspInit+0xcc>)
 80008c0:	f000 fab0 	bl	8000e24 <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 80008c4:	2200      	movs	r2, #0
 80008c6:	2100      	movs	r1, #0
 80008c8:	2046      	movs	r0, #70	@ 0x46
 80008ca:	f000 f9f6 	bl	8000cba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 80008ce:	2046      	movs	r0, #70	@ 0x46
 80008d0:	f000 fa0f 	bl	8000cf2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END LPUART1_MspInit 1 */

  }

}
 80008d4:	bf00      	nop
 80008d6:	37b0      	adds	r7, #176	@ 0xb0
 80008d8:	46bd      	mov	sp, r7
 80008da:	bd80      	pop	{r7, pc}
 80008dc:	40008000 	.word	0x40008000
 80008e0:	40021000 	.word	0x40021000
 80008e4:	48001800 	.word	0x48001800

080008e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008e8:	b480      	push	{r7}
 80008ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008ec:	bf00      	nop
 80008ee:	e7fd      	b.n	80008ec <NMI_Handler+0x4>

080008f0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008f4:	bf00      	nop
 80008f6:	e7fd      	b.n	80008f4 <HardFault_Handler+0x4>

080008f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008fc:	bf00      	nop
 80008fe:	e7fd      	b.n	80008fc <MemManage_Handler+0x4>

08000900 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000900:	b480      	push	{r7}
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000904:	bf00      	nop
 8000906:	e7fd      	b.n	8000904 <BusFault_Handler+0x4>

08000908 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800090c:	bf00      	nop
 800090e:	e7fd      	b.n	800090c <UsageFault_Handler+0x4>

08000910 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000910:	b480      	push	{r7}
 8000912:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000914:	bf00      	nop
 8000916:	46bd      	mov	sp, r7
 8000918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091c:	4770      	bx	lr

0800091e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800091e:	b480      	push	{r7}
 8000920:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000922:	bf00      	nop
 8000924:	46bd      	mov	sp, r7
 8000926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092a:	4770      	bx	lr

0800092c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800092c:	b480      	push	{r7}
 800092e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000930:	bf00      	nop
 8000932:	46bd      	mov	sp, r7
 8000934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000938:	4770      	bx	lr

0800093a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800093a:	b580      	push	{r7, lr}
 800093c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800093e:	f000 f89d 	bl	8000a7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000942:	bf00      	nop
 8000944:	bd80      	pop	{r7, pc}
	...

08000948 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 800094c:	4802      	ldr	r0, [pc, #8]	@ (8000958 <LPUART1_IRQHandler+0x10>)
 800094e:	f002 f89f 	bl	8002a90 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8000952:	bf00      	nop
 8000954:	bd80      	pop	{r7, pc}
 8000956:	bf00      	nop
 8000958:	20000044 	.word	0x20000044

0800095c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000960:	4b06      	ldr	r3, [pc, #24]	@ (800097c <SystemInit+0x20>)
 8000962:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000966:	4a05      	ldr	r2, [pc, #20]	@ (800097c <SystemInit+0x20>)
 8000968:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800096c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000970:	bf00      	nop
 8000972:	46bd      	mov	sp, r7
 8000974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000978:	4770      	bx	lr
 800097a:	bf00      	nop
 800097c:	e000ed00 	.word	0xe000ed00

08000980 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000980:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80009b8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000984:	f7ff ffea 	bl	800095c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000988:	480c      	ldr	r0, [pc, #48]	@ (80009bc <LoopForever+0x6>)
  ldr r1, =_edata
 800098a:	490d      	ldr	r1, [pc, #52]	@ (80009c0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800098c:	4a0d      	ldr	r2, [pc, #52]	@ (80009c4 <LoopForever+0xe>)
  movs r3, #0
 800098e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000990:	e002      	b.n	8000998 <LoopCopyDataInit>

08000992 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000992:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000994:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000996:	3304      	adds	r3, #4

08000998 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000998:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800099a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800099c:	d3f9      	bcc.n	8000992 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800099e:	4a0a      	ldr	r2, [pc, #40]	@ (80009c8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80009a0:	4c0a      	ldr	r4, [pc, #40]	@ (80009cc <LoopForever+0x16>)
  movs r3, #0
 80009a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009a4:	e001      	b.n	80009aa <LoopFillZerobss>

080009a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009a8:	3204      	adds	r2, #4

080009aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009ac:	d3fb      	bcc.n	80009a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80009ae:	f003 fbcd 	bl	800414c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80009b2:	f7ff fd93 	bl	80004dc <main>

080009b6 <LoopForever>:

LoopForever:
    b LoopForever
 80009b6:	e7fe      	b.n	80009b6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80009b8:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80009bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009c0:	20000028 	.word	0x20000028
  ldr r2, =_sidata
 80009c4:	08004204 	.word	0x08004204
  ldr r2, =_sbss
 80009c8:	20000028 	.word	0x20000028
  ldr r4, =_ebss
 80009cc:	20000138 	.word	0x20000138

080009d0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80009d0:	e7fe      	b.n	80009d0 <ADC1_2_IRQHandler>

080009d2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009d2:	b580      	push	{r7, lr}
 80009d4:	b082      	sub	sp, #8
 80009d6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80009d8:	2300      	movs	r3, #0
 80009da:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009dc:	2003      	movs	r0, #3
 80009de:	f000 f961 	bl	8000ca4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80009e2:	2000      	movs	r0, #0
 80009e4:	f000 f80e 	bl	8000a04 <HAL_InitTick>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d002      	beq.n	80009f4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80009ee:	2301      	movs	r3, #1
 80009f0:	71fb      	strb	r3, [r7, #7]
 80009f2:	e001      	b.n	80009f8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80009f4:	f7ff feec 	bl	80007d0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80009f8:	79fb      	ldrb	r3, [r7, #7]
}
 80009fa:	4618      	mov	r0, r3
 80009fc:	3708      	adds	r7, #8
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}
	...

08000a04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b084      	sub	sp, #16
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000a10:	4b17      	ldr	r3, [pc, #92]	@ (8000a70 <HAL_InitTick+0x6c>)
 8000a12:	781b      	ldrb	r3, [r3, #0]
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d023      	beq.n	8000a60 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000a18:	4b16      	ldr	r3, [pc, #88]	@ (8000a74 <HAL_InitTick+0x70>)
 8000a1a:	681a      	ldr	r2, [r3, #0]
 8000a1c:	4b14      	ldr	r3, [pc, #80]	@ (8000a70 <HAL_InitTick+0x6c>)
 8000a1e:	781b      	ldrb	r3, [r3, #0]
 8000a20:	4619      	mov	r1, r3
 8000a22:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a26:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a2e:	4618      	mov	r0, r3
 8000a30:	f000 f96d 	bl	8000d0e <HAL_SYSTICK_Config>
 8000a34:	4603      	mov	r3, r0
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d10f      	bne.n	8000a5a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	2b0f      	cmp	r3, #15
 8000a3e:	d809      	bhi.n	8000a54 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a40:	2200      	movs	r2, #0
 8000a42:	6879      	ldr	r1, [r7, #4]
 8000a44:	f04f 30ff 	mov.w	r0, #4294967295
 8000a48:	f000 f937 	bl	8000cba <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a4c:	4a0a      	ldr	r2, [pc, #40]	@ (8000a78 <HAL_InitTick+0x74>)
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	6013      	str	r3, [r2, #0]
 8000a52:	e007      	b.n	8000a64 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000a54:	2301      	movs	r3, #1
 8000a56:	73fb      	strb	r3, [r7, #15]
 8000a58:	e004      	b.n	8000a64 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000a5a:	2301      	movs	r3, #1
 8000a5c:	73fb      	strb	r3, [r7, #15]
 8000a5e:	e001      	b.n	8000a64 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000a60:	2301      	movs	r3, #1
 8000a62:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000a64:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a66:	4618      	mov	r0, r3
 8000a68:	3710      	adds	r7, #16
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	20000024 	.word	0x20000024
 8000a74:	2000001c 	.word	0x2000001c
 8000a78:	20000020 	.word	0x20000020

08000a7c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000a80:	4b06      	ldr	r3, [pc, #24]	@ (8000a9c <HAL_IncTick+0x20>)
 8000a82:	781b      	ldrb	r3, [r3, #0]
 8000a84:	461a      	mov	r2, r3
 8000a86:	4b06      	ldr	r3, [pc, #24]	@ (8000aa0 <HAL_IncTick+0x24>)
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	4413      	add	r3, r2
 8000a8c:	4a04      	ldr	r2, [pc, #16]	@ (8000aa0 <HAL_IncTick+0x24>)
 8000a8e:	6013      	str	r3, [r2, #0]
}
 8000a90:	bf00      	nop
 8000a92:	46bd      	mov	sp, r7
 8000a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop
 8000a9c:	20000024 	.word	0x20000024
 8000aa0:	20000134 	.word	0x20000134

08000aa4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
  return uwTick;
 8000aa8:	4b03      	ldr	r3, [pc, #12]	@ (8000ab8 <HAL_GetTick+0x14>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
}
 8000aac:	4618      	mov	r0, r3
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop
 8000ab8:	20000134 	.word	0x20000134

08000abc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b084      	sub	sp, #16
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ac4:	f7ff ffee 	bl	8000aa4 <HAL_GetTick>
 8000ac8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ace:	68fb      	ldr	r3, [r7, #12]
 8000ad0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ad4:	d005      	beq.n	8000ae2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000ad6:	4b0a      	ldr	r3, [pc, #40]	@ (8000b00 <HAL_Delay+0x44>)
 8000ad8:	781b      	ldrb	r3, [r3, #0]
 8000ada:	461a      	mov	r2, r3
 8000adc:	68fb      	ldr	r3, [r7, #12]
 8000ade:	4413      	add	r3, r2
 8000ae0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ae2:	bf00      	nop
 8000ae4:	f7ff ffde 	bl	8000aa4 <HAL_GetTick>
 8000ae8:	4602      	mov	r2, r0
 8000aea:	68bb      	ldr	r3, [r7, #8]
 8000aec:	1ad3      	subs	r3, r2, r3
 8000aee:	68fa      	ldr	r2, [r7, #12]
 8000af0:	429a      	cmp	r2, r3
 8000af2:	d8f7      	bhi.n	8000ae4 <HAL_Delay+0x28>
  {
  }
}
 8000af4:	bf00      	nop
 8000af6:	bf00      	nop
 8000af8:	3710      	adds	r7, #16
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	20000024 	.word	0x20000024

08000b04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b04:	b480      	push	{r7}
 8000b06:	b085      	sub	sp, #20
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	f003 0307 	and.w	r3, r3, #7
 8000b12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b14:	4b0c      	ldr	r3, [pc, #48]	@ (8000b48 <__NVIC_SetPriorityGrouping+0x44>)
 8000b16:	68db      	ldr	r3, [r3, #12]
 8000b18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b1a:	68ba      	ldr	r2, [r7, #8]
 8000b1c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000b20:	4013      	ands	r3, r2
 8000b22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b28:	68bb      	ldr	r3, [r7, #8]
 8000b2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b2c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000b30:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b36:	4a04      	ldr	r2, [pc, #16]	@ (8000b48 <__NVIC_SetPriorityGrouping+0x44>)
 8000b38:	68bb      	ldr	r3, [r7, #8]
 8000b3a:	60d3      	str	r3, [r2, #12]
}
 8000b3c:	bf00      	nop
 8000b3e:	3714      	adds	r7, #20
 8000b40:	46bd      	mov	sp, r7
 8000b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b46:	4770      	bx	lr
 8000b48:	e000ed00 	.word	0xe000ed00

08000b4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b50:	4b04      	ldr	r3, [pc, #16]	@ (8000b64 <__NVIC_GetPriorityGrouping+0x18>)
 8000b52:	68db      	ldr	r3, [r3, #12]
 8000b54:	0a1b      	lsrs	r3, r3, #8
 8000b56:	f003 0307 	and.w	r3, r3, #7
}
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b62:	4770      	bx	lr
 8000b64:	e000ed00 	.word	0xe000ed00

08000b68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	b083      	sub	sp, #12
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	4603      	mov	r3, r0
 8000b70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	db0b      	blt.n	8000b92 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b7a:	79fb      	ldrb	r3, [r7, #7]
 8000b7c:	f003 021f 	and.w	r2, r3, #31
 8000b80:	4907      	ldr	r1, [pc, #28]	@ (8000ba0 <__NVIC_EnableIRQ+0x38>)
 8000b82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b86:	095b      	lsrs	r3, r3, #5
 8000b88:	2001      	movs	r0, #1
 8000b8a:	fa00 f202 	lsl.w	r2, r0, r2
 8000b8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000b92:	bf00      	nop
 8000b94:	370c      	adds	r7, #12
 8000b96:	46bd      	mov	sp, r7
 8000b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop
 8000ba0:	e000e100 	.word	0xe000e100

08000ba4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	b083      	sub	sp, #12
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	4603      	mov	r3, r0
 8000bac:	6039      	str	r1, [r7, #0]
 8000bae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	db0a      	blt.n	8000bce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bb8:	683b      	ldr	r3, [r7, #0]
 8000bba:	b2da      	uxtb	r2, r3
 8000bbc:	490c      	ldr	r1, [pc, #48]	@ (8000bf0 <__NVIC_SetPriority+0x4c>)
 8000bbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bc2:	0112      	lsls	r2, r2, #4
 8000bc4:	b2d2      	uxtb	r2, r2
 8000bc6:	440b      	add	r3, r1
 8000bc8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bcc:	e00a      	b.n	8000be4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bce:	683b      	ldr	r3, [r7, #0]
 8000bd0:	b2da      	uxtb	r2, r3
 8000bd2:	4908      	ldr	r1, [pc, #32]	@ (8000bf4 <__NVIC_SetPriority+0x50>)
 8000bd4:	79fb      	ldrb	r3, [r7, #7]
 8000bd6:	f003 030f 	and.w	r3, r3, #15
 8000bda:	3b04      	subs	r3, #4
 8000bdc:	0112      	lsls	r2, r2, #4
 8000bde:	b2d2      	uxtb	r2, r2
 8000be0:	440b      	add	r3, r1
 8000be2:	761a      	strb	r2, [r3, #24]
}
 8000be4:	bf00      	nop
 8000be6:	370c      	adds	r7, #12
 8000be8:	46bd      	mov	sp, r7
 8000bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bee:	4770      	bx	lr
 8000bf0:	e000e100 	.word	0xe000e100
 8000bf4:	e000ed00 	.word	0xe000ed00

08000bf8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	b089      	sub	sp, #36	@ 0x24
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	60f8      	str	r0, [r7, #12]
 8000c00:	60b9      	str	r1, [r7, #8]
 8000c02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	f003 0307 	and.w	r3, r3, #7
 8000c0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c0c:	69fb      	ldr	r3, [r7, #28]
 8000c0e:	f1c3 0307 	rsb	r3, r3, #7
 8000c12:	2b04      	cmp	r3, #4
 8000c14:	bf28      	it	cs
 8000c16:	2304      	movcs	r3, #4
 8000c18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c1a:	69fb      	ldr	r3, [r7, #28]
 8000c1c:	3304      	adds	r3, #4
 8000c1e:	2b06      	cmp	r3, #6
 8000c20:	d902      	bls.n	8000c28 <NVIC_EncodePriority+0x30>
 8000c22:	69fb      	ldr	r3, [r7, #28]
 8000c24:	3b03      	subs	r3, #3
 8000c26:	e000      	b.n	8000c2a <NVIC_EncodePriority+0x32>
 8000c28:	2300      	movs	r3, #0
 8000c2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c2c:	f04f 32ff 	mov.w	r2, #4294967295
 8000c30:	69bb      	ldr	r3, [r7, #24]
 8000c32:	fa02 f303 	lsl.w	r3, r2, r3
 8000c36:	43da      	mvns	r2, r3
 8000c38:	68bb      	ldr	r3, [r7, #8]
 8000c3a:	401a      	ands	r2, r3
 8000c3c:	697b      	ldr	r3, [r7, #20]
 8000c3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c40:	f04f 31ff 	mov.w	r1, #4294967295
 8000c44:	697b      	ldr	r3, [r7, #20]
 8000c46:	fa01 f303 	lsl.w	r3, r1, r3
 8000c4a:	43d9      	mvns	r1, r3
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c50:	4313      	orrs	r3, r2
         );
}
 8000c52:	4618      	mov	r0, r3
 8000c54:	3724      	adds	r7, #36	@ 0x24
 8000c56:	46bd      	mov	sp, r7
 8000c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5c:	4770      	bx	lr
	...

08000c60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b082      	sub	sp, #8
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	3b01      	subs	r3, #1
 8000c6c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000c70:	d301      	bcc.n	8000c76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c72:	2301      	movs	r3, #1
 8000c74:	e00f      	b.n	8000c96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c76:	4a0a      	ldr	r2, [pc, #40]	@ (8000ca0 <SysTick_Config+0x40>)
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	3b01      	subs	r3, #1
 8000c7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c7e:	210f      	movs	r1, #15
 8000c80:	f04f 30ff 	mov.w	r0, #4294967295
 8000c84:	f7ff ff8e 	bl	8000ba4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c88:	4b05      	ldr	r3, [pc, #20]	@ (8000ca0 <SysTick_Config+0x40>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c8e:	4b04      	ldr	r3, [pc, #16]	@ (8000ca0 <SysTick_Config+0x40>)
 8000c90:	2207      	movs	r2, #7
 8000c92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c94:	2300      	movs	r3, #0
}
 8000c96:	4618      	mov	r0, r3
 8000c98:	3708      	adds	r7, #8
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	e000e010 	.word	0xe000e010

08000ca4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b082      	sub	sp, #8
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cac:	6878      	ldr	r0, [r7, #4]
 8000cae:	f7ff ff29 	bl	8000b04 <__NVIC_SetPriorityGrouping>
}
 8000cb2:	bf00      	nop
 8000cb4:	3708      	adds	r7, #8
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}

08000cba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cba:	b580      	push	{r7, lr}
 8000cbc:	b086      	sub	sp, #24
 8000cbe:	af00      	add	r7, sp, #0
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	60b9      	str	r1, [r7, #8]
 8000cc4:	607a      	str	r2, [r7, #4]
 8000cc6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000ccc:	f7ff ff3e 	bl	8000b4c <__NVIC_GetPriorityGrouping>
 8000cd0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cd2:	687a      	ldr	r2, [r7, #4]
 8000cd4:	68b9      	ldr	r1, [r7, #8]
 8000cd6:	6978      	ldr	r0, [r7, #20]
 8000cd8:	f7ff ff8e 	bl	8000bf8 <NVIC_EncodePriority>
 8000cdc:	4602      	mov	r2, r0
 8000cde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ce2:	4611      	mov	r1, r2
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f7ff ff5d 	bl	8000ba4 <__NVIC_SetPriority>
}
 8000cea:	bf00      	nop
 8000cec:	3718      	adds	r7, #24
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}

08000cf2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cf2:	b580      	push	{r7, lr}
 8000cf4:	b082      	sub	sp, #8
 8000cf6:	af00      	add	r7, sp, #0
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d00:	4618      	mov	r0, r3
 8000d02:	f7ff ff31 	bl	8000b68 <__NVIC_EnableIRQ>
}
 8000d06:	bf00      	nop
 8000d08:	3708      	adds	r7, #8
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}

08000d0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d0e:	b580      	push	{r7, lr}
 8000d10:	b082      	sub	sp, #8
 8000d12:	af00      	add	r7, sp, #0
 8000d14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d16:	6878      	ldr	r0, [r7, #4]
 8000d18:	f7ff ffa2 	bl	8000c60 <SysTick_Config>
 8000d1c:	4603      	mov	r3, r0
}
 8000d1e:	4618      	mov	r0, r3
 8000d20:	3708      	adds	r7, #8
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}

08000d26 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000d26:	b480      	push	{r7}
 8000d28:	b085      	sub	sp, #20
 8000d2a:	af00      	add	r7, sp, #0
 8000d2c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000d38:	b2db      	uxtb	r3, r3
 8000d3a:	2b02      	cmp	r3, #2
 8000d3c:	d008      	beq.n	8000d50 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	2204      	movs	r2, #4
 8000d42:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	2200      	movs	r2, #0
 8000d48:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000d4c:	2301      	movs	r3, #1
 8000d4e:	e022      	b.n	8000d96 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	681a      	ldr	r2, [r3, #0]
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	f022 020e 	bic.w	r2, r2, #14
 8000d5e:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	681a      	ldr	r2, [r3, #0]
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	f022 0201 	bic.w	r2, r2, #1
 8000d6e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d74:	f003 021c 	and.w	r2, r3, #28
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d7c:	2101      	movs	r1, #1
 8000d7e:	fa01 f202 	lsl.w	r2, r1, r2
 8000d82:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	2201      	movs	r2, #1
 8000d88:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	2200      	movs	r2, #0
 8000d90:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8000d94:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8000d96:	4618      	mov	r0, r3
 8000d98:	3714      	adds	r7, #20
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da0:	4770      	bx	lr

08000da2 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000da2:	b580      	push	{r7, lr}
 8000da4:	b084      	sub	sp, #16
 8000da6:	af00      	add	r7, sp, #0
 8000da8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000daa:	2300      	movs	r3, #0
 8000dac:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000db4:	b2db      	uxtb	r3, r3
 8000db6:	2b02      	cmp	r3, #2
 8000db8:	d005      	beq.n	8000dc6 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	2204      	movs	r2, #4
 8000dbe:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8000dc0:	2301      	movs	r3, #1
 8000dc2:	73fb      	strb	r3, [r7, #15]
 8000dc4:	e029      	b.n	8000e1a <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	681a      	ldr	r2, [r3, #0]
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	f022 020e 	bic.w	r2, r2, #14
 8000dd4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	681a      	ldr	r2, [r3, #0]
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	f022 0201 	bic.w	r2, r2, #1
 8000de4:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dea:	f003 021c 	and.w	r2, r3, #28
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000df2:	2101      	movs	r1, #1
 8000df4:	fa01 f202 	lsl.w	r2, r1, r2
 8000df8:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	2201      	movs	r2, #1
 8000dfe:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	2200      	movs	r2, #0
 8000e06:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d003      	beq.n	8000e1a <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000e16:	6878      	ldr	r0, [r7, #4]
 8000e18:	4798      	blx	r3
    }
  }
  return status;
 8000e1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	3710      	adds	r7, #16
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}

08000e24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e24:	b480      	push	{r7}
 8000e26:	b087      	sub	sp, #28
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
 8000e2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e32:	e166      	b.n	8001102 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	681a      	ldr	r2, [r3, #0]
 8000e38:	2101      	movs	r1, #1
 8000e3a:	697b      	ldr	r3, [r7, #20]
 8000e3c:	fa01 f303 	lsl.w	r3, r1, r3
 8000e40:	4013      	ands	r3, r2
 8000e42:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	f000 8158 	beq.w	80010fc <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	685b      	ldr	r3, [r3, #4]
 8000e50:	f003 0303 	and.w	r3, r3, #3
 8000e54:	2b01      	cmp	r3, #1
 8000e56:	d005      	beq.n	8000e64 <HAL_GPIO_Init+0x40>
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	685b      	ldr	r3, [r3, #4]
 8000e5c:	f003 0303 	and.w	r3, r3, #3
 8000e60:	2b02      	cmp	r3, #2
 8000e62:	d130      	bne.n	8000ec6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	689b      	ldr	r3, [r3, #8]
 8000e68:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000e6a:	697b      	ldr	r3, [r7, #20]
 8000e6c:	005b      	lsls	r3, r3, #1
 8000e6e:	2203      	movs	r2, #3
 8000e70:	fa02 f303 	lsl.w	r3, r2, r3
 8000e74:	43db      	mvns	r3, r3
 8000e76:	693a      	ldr	r2, [r7, #16]
 8000e78:	4013      	ands	r3, r2
 8000e7a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	68da      	ldr	r2, [r3, #12]
 8000e80:	697b      	ldr	r3, [r7, #20]
 8000e82:	005b      	lsls	r3, r3, #1
 8000e84:	fa02 f303 	lsl.w	r3, r2, r3
 8000e88:	693a      	ldr	r2, [r7, #16]
 8000e8a:	4313      	orrs	r3, r2
 8000e8c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	693a      	ldr	r2, [r7, #16]
 8000e92:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	685b      	ldr	r3, [r3, #4]
 8000e98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000e9a:	2201      	movs	r2, #1
 8000e9c:	697b      	ldr	r3, [r7, #20]
 8000e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea2:	43db      	mvns	r3, r3
 8000ea4:	693a      	ldr	r2, [r7, #16]
 8000ea6:	4013      	ands	r3, r2
 8000ea8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	685b      	ldr	r3, [r3, #4]
 8000eae:	091b      	lsrs	r3, r3, #4
 8000eb0:	f003 0201 	and.w	r2, r3, #1
 8000eb4:	697b      	ldr	r3, [r7, #20]
 8000eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eba:	693a      	ldr	r2, [r7, #16]
 8000ebc:	4313      	orrs	r3, r2
 8000ebe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	693a      	ldr	r2, [r7, #16]
 8000ec4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ec6:	683b      	ldr	r3, [r7, #0]
 8000ec8:	685b      	ldr	r3, [r3, #4]
 8000eca:	f003 0303 	and.w	r3, r3, #3
 8000ece:	2b03      	cmp	r3, #3
 8000ed0:	d017      	beq.n	8000f02 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	68db      	ldr	r3, [r3, #12]
 8000ed6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000ed8:	697b      	ldr	r3, [r7, #20]
 8000eda:	005b      	lsls	r3, r3, #1
 8000edc:	2203      	movs	r2, #3
 8000ede:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee2:	43db      	mvns	r3, r3
 8000ee4:	693a      	ldr	r2, [r7, #16]
 8000ee6:	4013      	ands	r3, r2
 8000ee8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	689a      	ldr	r2, [r3, #8]
 8000eee:	697b      	ldr	r3, [r7, #20]
 8000ef0:	005b      	lsls	r3, r3, #1
 8000ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef6:	693a      	ldr	r2, [r7, #16]
 8000ef8:	4313      	orrs	r3, r2
 8000efa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	693a      	ldr	r2, [r7, #16]
 8000f00:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	685b      	ldr	r3, [r3, #4]
 8000f06:	f003 0303 	and.w	r3, r3, #3
 8000f0a:	2b02      	cmp	r3, #2
 8000f0c:	d123      	bne.n	8000f56 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000f0e:	697b      	ldr	r3, [r7, #20]
 8000f10:	08da      	lsrs	r2, r3, #3
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	3208      	adds	r2, #8
 8000f16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f1a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000f1c:	697b      	ldr	r3, [r7, #20]
 8000f1e:	f003 0307 	and.w	r3, r3, #7
 8000f22:	009b      	lsls	r3, r3, #2
 8000f24:	220f      	movs	r2, #15
 8000f26:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2a:	43db      	mvns	r3, r3
 8000f2c:	693a      	ldr	r2, [r7, #16]
 8000f2e:	4013      	ands	r3, r2
 8000f30:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	691a      	ldr	r2, [r3, #16]
 8000f36:	697b      	ldr	r3, [r7, #20]
 8000f38:	f003 0307 	and.w	r3, r3, #7
 8000f3c:	009b      	lsls	r3, r3, #2
 8000f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f42:	693a      	ldr	r2, [r7, #16]
 8000f44:	4313      	orrs	r3, r2
 8000f46:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	08da      	lsrs	r2, r3, #3
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	3208      	adds	r2, #8
 8000f50:	6939      	ldr	r1, [r7, #16]
 8000f52:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000f5c:	697b      	ldr	r3, [r7, #20]
 8000f5e:	005b      	lsls	r3, r3, #1
 8000f60:	2203      	movs	r2, #3
 8000f62:	fa02 f303 	lsl.w	r3, r2, r3
 8000f66:	43db      	mvns	r3, r3
 8000f68:	693a      	ldr	r2, [r7, #16]
 8000f6a:	4013      	ands	r3, r2
 8000f6c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	685b      	ldr	r3, [r3, #4]
 8000f72:	f003 0203 	and.w	r2, r3, #3
 8000f76:	697b      	ldr	r3, [r7, #20]
 8000f78:	005b      	lsls	r3, r3, #1
 8000f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7e:	693a      	ldr	r2, [r7, #16]
 8000f80:	4313      	orrs	r3, r2
 8000f82:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	693a      	ldr	r2, [r7, #16]
 8000f88:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	685b      	ldr	r3, [r3, #4]
 8000f8e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	f000 80b2 	beq.w	80010fc <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f98:	4b61      	ldr	r3, [pc, #388]	@ (8001120 <HAL_GPIO_Init+0x2fc>)
 8000f9a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f9c:	4a60      	ldr	r2, [pc, #384]	@ (8001120 <HAL_GPIO_Init+0x2fc>)
 8000f9e:	f043 0301 	orr.w	r3, r3, #1
 8000fa2:	6613      	str	r3, [r2, #96]	@ 0x60
 8000fa4:	4b5e      	ldr	r3, [pc, #376]	@ (8001120 <HAL_GPIO_Init+0x2fc>)
 8000fa6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000fa8:	f003 0301 	and.w	r3, r3, #1
 8000fac:	60bb      	str	r3, [r7, #8]
 8000fae:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000fb0:	4a5c      	ldr	r2, [pc, #368]	@ (8001124 <HAL_GPIO_Init+0x300>)
 8000fb2:	697b      	ldr	r3, [r7, #20]
 8000fb4:	089b      	lsrs	r3, r3, #2
 8000fb6:	3302      	adds	r3, #2
 8000fb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fbc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000fbe:	697b      	ldr	r3, [r7, #20]
 8000fc0:	f003 0303 	and.w	r3, r3, #3
 8000fc4:	009b      	lsls	r3, r3, #2
 8000fc6:	220f      	movs	r2, #15
 8000fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fcc:	43db      	mvns	r3, r3
 8000fce:	693a      	ldr	r2, [r7, #16]
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000fda:	d02b      	beq.n	8001034 <HAL_GPIO_Init+0x210>
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	4a52      	ldr	r2, [pc, #328]	@ (8001128 <HAL_GPIO_Init+0x304>)
 8000fe0:	4293      	cmp	r3, r2
 8000fe2:	d025      	beq.n	8001030 <HAL_GPIO_Init+0x20c>
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	4a51      	ldr	r2, [pc, #324]	@ (800112c <HAL_GPIO_Init+0x308>)
 8000fe8:	4293      	cmp	r3, r2
 8000fea:	d01f      	beq.n	800102c <HAL_GPIO_Init+0x208>
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	4a50      	ldr	r2, [pc, #320]	@ (8001130 <HAL_GPIO_Init+0x30c>)
 8000ff0:	4293      	cmp	r3, r2
 8000ff2:	d019      	beq.n	8001028 <HAL_GPIO_Init+0x204>
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	4a4f      	ldr	r2, [pc, #316]	@ (8001134 <HAL_GPIO_Init+0x310>)
 8000ff8:	4293      	cmp	r3, r2
 8000ffa:	d013      	beq.n	8001024 <HAL_GPIO_Init+0x200>
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	4a4e      	ldr	r2, [pc, #312]	@ (8001138 <HAL_GPIO_Init+0x314>)
 8001000:	4293      	cmp	r3, r2
 8001002:	d00d      	beq.n	8001020 <HAL_GPIO_Init+0x1fc>
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	4a4d      	ldr	r2, [pc, #308]	@ (800113c <HAL_GPIO_Init+0x318>)
 8001008:	4293      	cmp	r3, r2
 800100a:	d007      	beq.n	800101c <HAL_GPIO_Init+0x1f8>
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	4a4c      	ldr	r2, [pc, #304]	@ (8001140 <HAL_GPIO_Init+0x31c>)
 8001010:	4293      	cmp	r3, r2
 8001012:	d101      	bne.n	8001018 <HAL_GPIO_Init+0x1f4>
 8001014:	2307      	movs	r3, #7
 8001016:	e00e      	b.n	8001036 <HAL_GPIO_Init+0x212>
 8001018:	2308      	movs	r3, #8
 800101a:	e00c      	b.n	8001036 <HAL_GPIO_Init+0x212>
 800101c:	2306      	movs	r3, #6
 800101e:	e00a      	b.n	8001036 <HAL_GPIO_Init+0x212>
 8001020:	2305      	movs	r3, #5
 8001022:	e008      	b.n	8001036 <HAL_GPIO_Init+0x212>
 8001024:	2304      	movs	r3, #4
 8001026:	e006      	b.n	8001036 <HAL_GPIO_Init+0x212>
 8001028:	2303      	movs	r3, #3
 800102a:	e004      	b.n	8001036 <HAL_GPIO_Init+0x212>
 800102c:	2302      	movs	r3, #2
 800102e:	e002      	b.n	8001036 <HAL_GPIO_Init+0x212>
 8001030:	2301      	movs	r3, #1
 8001032:	e000      	b.n	8001036 <HAL_GPIO_Init+0x212>
 8001034:	2300      	movs	r3, #0
 8001036:	697a      	ldr	r2, [r7, #20]
 8001038:	f002 0203 	and.w	r2, r2, #3
 800103c:	0092      	lsls	r2, r2, #2
 800103e:	4093      	lsls	r3, r2
 8001040:	693a      	ldr	r2, [r7, #16]
 8001042:	4313      	orrs	r3, r2
 8001044:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001046:	4937      	ldr	r1, [pc, #220]	@ (8001124 <HAL_GPIO_Init+0x300>)
 8001048:	697b      	ldr	r3, [r7, #20]
 800104a:	089b      	lsrs	r3, r3, #2
 800104c:	3302      	adds	r3, #2
 800104e:	693a      	ldr	r2, [r7, #16]
 8001050:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001054:	4b3b      	ldr	r3, [pc, #236]	@ (8001144 <HAL_GPIO_Init+0x320>)
 8001056:	689b      	ldr	r3, [r3, #8]
 8001058:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	43db      	mvns	r3, r3
 800105e:	693a      	ldr	r2, [r7, #16]
 8001060:	4013      	ands	r3, r2
 8001062:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800106c:	2b00      	cmp	r3, #0
 800106e:	d003      	beq.n	8001078 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8001070:	693a      	ldr	r2, [r7, #16]
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	4313      	orrs	r3, r2
 8001076:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001078:	4a32      	ldr	r2, [pc, #200]	@ (8001144 <HAL_GPIO_Init+0x320>)
 800107a:	693b      	ldr	r3, [r7, #16]
 800107c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800107e:	4b31      	ldr	r3, [pc, #196]	@ (8001144 <HAL_GPIO_Init+0x320>)
 8001080:	68db      	ldr	r3, [r3, #12]
 8001082:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	43db      	mvns	r3, r3
 8001088:	693a      	ldr	r2, [r7, #16]
 800108a:	4013      	ands	r3, r2
 800108c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	685b      	ldr	r3, [r3, #4]
 8001092:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001096:	2b00      	cmp	r3, #0
 8001098:	d003      	beq.n	80010a2 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800109a:	693a      	ldr	r2, [r7, #16]
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	4313      	orrs	r3, r2
 80010a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80010a2:	4a28      	ldr	r2, [pc, #160]	@ (8001144 <HAL_GPIO_Init+0x320>)
 80010a4:	693b      	ldr	r3, [r7, #16]
 80010a6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80010a8:	4b26      	ldr	r3, [pc, #152]	@ (8001144 <HAL_GPIO_Init+0x320>)
 80010aa:	685b      	ldr	r3, [r3, #4]
 80010ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	43db      	mvns	r3, r3
 80010b2:	693a      	ldr	r2, [r7, #16]
 80010b4:	4013      	ands	r3, r2
 80010b6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d003      	beq.n	80010cc <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80010c4:	693a      	ldr	r2, [r7, #16]
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	4313      	orrs	r3, r2
 80010ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80010cc:	4a1d      	ldr	r2, [pc, #116]	@ (8001144 <HAL_GPIO_Init+0x320>)
 80010ce:	693b      	ldr	r3, [r7, #16]
 80010d0:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80010d2:	4b1c      	ldr	r3, [pc, #112]	@ (8001144 <HAL_GPIO_Init+0x320>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	43db      	mvns	r3, r3
 80010dc:	693a      	ldr	r2, [r7, #16]
 80010de:	4013      	ands	r3, r2
 80010e0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	685b      	ldr	r3, [r3, #4]
 80010e6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d003      	beq.n	80010f6 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80010ee:	693a      	ldr	r2, [r7, #16]
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	4313      	orrs	r3, r2
 80010f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80010f6:	4a13      	ldr	r2, [pc, #76]	@ (8001144 <HAL_GPIO_Init+0x320>)
 80010f8:	693b      	ldr	r3, [r7, #16]
 80010fa:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80010fc:	697b      	ldr	r3, [r7, #20]
 80010fe:	3301      	adds	r3, #1
 8001100:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	681a      	ldr	r2, [r3, #0]
 8001106:	697b      	ldr	r3, [r7, #20]
 8001108:	fa22 f303 	lsr.w	r3, r2, r3
 800110c:	2b00      	cmp	r3, #0
 800110e:	f47f ae91 	bne.w	8000e34 <HAL_GPIO_Init+0x10>
  }
}
 8001112:	bf00      	nop
 8001114:	bf00      	nop
 8001116:	371c      	adds	r7, #28
 8001118:	46bd      	mov	sp, r7
 800111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111e:	4770      	bx	lr
 8001120:	40021000 	.word	0x40021000
 8001124:	40010000 	.word	0x40010000
 8001128:	48000400 	.word	0x48000400
 800112c:	48000800 	.word	0x48000800
 8001130:	48000c00 	.word	0x48000c00
 8001134:	48001000 	.word	0x48001000
 8001138:	48001400 	.word	0x48001400
 800113c:	48001800 	.word	0x48001800
 8001140:	48001c00 	.word	0x48001c00
 8001144:	40010400 	.word	0x40010400

08001148 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001148:	b480      	push	{r7}
 800114a:	b085      	sub	sp, #20
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
 8001150:	460b      	mov	r3, r1
 8001152:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	691a      	ldr	r2, [r3, #16]
 8001158:	887b      	ldrh	r3, [r7, #2]
 800115a:	4013      	ands	r3, r2
 800115c:	2b00      	cmp	r3, #0
 800115e:	d002      	beq.n	8001166 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001160:	2301      	movs	r3, #1
 8001162:	73fb      	strb	r3, [r7, #15]
 8001164:	e001      	b.n	800116a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001166:	2300      	movs	r3, #0
 8001168:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800116a:	7bfb      	ldrb	r3, [r7, #15]
}
 800116c:	4618      	mov	r0, r3
 800116e:	3714      	adds	r7, #20
 8001170:	46bd      	mov	sp, r7
 8001172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001176:	4770      	bx	lr

08001178 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001178:	b480      	push	{r7}
 800117a:	b083      	sub	sp, #12
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
 8001180:	460b      	mov	r3, r1
 8001182:	807b      	strh	r3, [r7, #2]
 8001184:	4613      	mov	r3, r2
 8001186:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001188:	787b      	ldrb	r3, [r7, #1]
 800118a:	2b00      	cmp	r3, #0
 800118c:	d003      	beq.n	8001196 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800118e:	887a      	ldrh	r2, [r7, #2]
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001194:	e002      	b.n	800119c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001196:	887a      	ldrh	r2, [r7, #2]
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800119c:	bf00      	nop
 800119e:	370c      	adds	r7, #12
 80011a0:	46bd      	mov	sp, r7
 80011a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a6:	4770      	bx	lr

080011a8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80011a8:	b480      	push	{r7}
 80011aa:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80011ac:	4b04      	ldr	r3, [pc, #16]	@ (80011c0 <HAL_PWREx_GetVoltageRange+0x18>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80011b4:	4618      	mov	r0, r3
 80011b6:	46bd      	mov	sp, r7
 80011b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011bc:	4770      	bx	lr
 80011be:	bf00      	nop
 80011c0:	40007000 	.word	0x40007000

080011c4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80011c4:	b480      	push	{r7}
 80011c6:	b085      	sub	sp, #20
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80011d2:	d130      	bne.n	8001236 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80011d4:	4b23      	ldr	r3, [pc, #140]	@ (8001264 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80011dc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80011e0:	d038      	beq.n	8001254 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80011e2:	4b20      	ldr	r3, [pc, #128]	@ (8001264 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80011ea:	4a1e      	ldr	r2, [pc, #120]	@ (8001264 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011ec:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80011f0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80011f2:	4b1d      	ldr	r3, [pc, #116]	@ (8001268 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	2232      	movs	r2, #50	@ 0x32
 80011f8:	fb02 f303 	mul.w	r3, r2, r3
 80011fc:	4a1b      	ldr	r2, [pc, #108]	@ (800126c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80011fe:	fba2 2303 	umull	r2, r3, r2, r3
 8001202:	0c9b      	lsrs	r3, r3, #18
 8001204:	3301      	adds	r3, #1
 8001206:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001208:	e002      	b.n	8001210 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	3b01      	subs	r3, #1
 800120e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001210:	4b14      	ldr	r3, [pc, #80]	@ (8001264 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001212:	695b      	ldr	r3, [r3, #20]
 8001214:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001218:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800121c:	d102      	bne.n	8001224 <HAL_PWREx_ControlVoltageScaling+0x60>
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	2b00      	cmp	r3, #0
 8001222:	d1f2      	bne.n	800120a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001224:	4b0f      	ldr	r3, [pc, #60]	@ (8001264 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001226:	695b      	ldr	r3, [r3, #20]
 8001228:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800122c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001230:	d110      	bne.n	8001254 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001232:	2303      	movs	r3, #3
 8001234:	e00f      	b.n	8001256 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001236:	4b0b      	ldr	r3, [pc, #44]	@ (8001264 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800123e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001242:	d007      	beq.n	8001254 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001244:	4b07      	ldr	r3, [pc, #28]	@ (8001264 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800124c:	4a05      	ldr	r2, [pc, #20]	@ (8001264 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800124e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001252:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001254:	2300      	movs	r3, #0
}
 8001256:	4618      	mov	r0, r3
 8001258:	3714      	adds	r7, #20
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr
 8001262:	bf00      	nop
 8001264:	40007000 	.word	0x40007000
 8001268:	2000001c 	.word	0x2000001c
 800126c:	431bde83 	.word	0x431bde83

08001270 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8001274:	4b05      	ldr	r3, [pc, #20]	@ (800128c <HAL_PWREx_EnableVddIO2+0x1c>)
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	4a04      	ldr	r2, [pc, #16]	@ (800128c <HAL_PWREx_EnableVddIO2+0x1c>)
 800127a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800127e:	6053      	str	r3, [r2, #4]
}
 8001280:	bf00      	nop
 8001282:	46bd      	mov	sp, r7
 8001284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001288:	4770      	bx	lr
 800128a:	bf00      	nop
 800128c:	40007000 	.word	0x40007000

08001290 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b088      	sub	sp, #32
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d102      	bne.n	80012a4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800129e:	2301      	movs	r3, #1
 80012a0:	f000 bc08 	b.w	8001ab4 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80012a4:	4b96      	ldr	r3, [pc, #600]	@ (8001500 <HAL_RCC_OscConfig+0x270>)
 80012a6:	689b      	ldr	r3, [r3, #8]
 80012a8:	f003 030c 	and.w	r3, r3, #12
 80012ac:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80012ae:	4b94      	ldr	r3, [pc, #592]	@ (8001500 <HAL_RCC_OscConfig+0x270>)
 80012b0:	68db      	ldr	r3, [r3, #12]
 80012b2:	f003 0303 	and.w	r3, r3, #3
 80012b6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f003 0310 	and.w	r3, r3, #16
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	f000 80e4 	beq.w	800148e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80012c6:	69bb      	ldr	r3, [r7, #24]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d007      	beq.n	80012dc <HAL_RCC_OscConfig+0x4c>
 80012cc:	69bb      	ldr	r3, [r7, #24]
 80012ce:	2b0c      	cmp	r3, #12
 80012d0:	f040 808b 	bne.w	80013ea <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80012d4:	697b      	ldr	r3, [r7, #20]
 80012d6:	2b01      	cmp	r3, #1
 80012d8:	f040 8087 	bne.w	80013ea <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80012dc:	4b88      	ldr	r3, [pc, #544]	@ (8001500 <HAL_RCC_OscConfig+0x270>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f003 0302 	and.w	r3, r3, #2
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d005      	beq.n	80012f4 <HAL_RCC_OscConfig+0x64>
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	699b      	ldr	r3, [r3, #24]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d101      	bne.n	80012f4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80012f0:	2301      	movs	r3, #1
 80012f2:	e3df      	b.n	8001ab4 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	6a1a      	ldr	r2, [r3, #32]
 80012f8:	4b81      	ldr	r3, [pc, #516]	@ (8001500 <HAL_RCC_OscConfig+0x270>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f003 0308 	and.w	r3, r3, #8
 8001300:	2b00      	cmp	r3, #0
 8001302:	d004      	beq.n	800130e <HAL_RCC_OscConfig+0x7e>
 8001304:	4b7e      	ldr	r3, [pc, #504]	@ (8001500 <HAL_RCC_OscConfig+0x270>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800130c:	e005      	b.n	800131a <HAL_RCC_OscConfig+0x8a>
 800130e:	4b7c      	ldr	r3, [pc, #496]	@ (8001500 <HAL_RCC_OscConfig+0x270>)
 8001310:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001314:	091b      	lsrs	r3, r3, #4
 8001316:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800131a:	4293      	cmp	r3, r2
 800131c:	d223      	bcs.n	8001366 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	6a1b      	ldr	r3, [r3, #32]
 8001322:	4618      	mov	r0, r3
 8001324:	f000 fd92 	bl	8001e4c <RCC_SetFlashLatencyFromMSIRange>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d001      	beq.n	8001332 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800132e:	2301      	movs	r3, #1
 8001330:	e3c0      	b.n	8001ab4 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001332:	4b73      	ldr	r3, [pc, #460]	@ (8001500 <HAL_RCC_OscConfig+0x270>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	4a72      	ldr	r2, [pc, #456]	@ (8001500 <HAL_RCC_OscConfig+0x270>)
 8001338:	f043 0308 	orr.w	r3, r3, #8
 800133c:	6013      	str	r3, [r2, #0]
 800133e:	4b70      	ldr	r3, [pc, #448]	@ (8001500 <HAL_RCC_OscConfig+0x270>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	6a1b      	ldr	r3, [r3, #32]
 800134a:	496d      	ldr	r1, [pc, #436]	@ (8001500 <HAL_RCC_OscConfig+0x270>)
 800134c:	4313      	orrs	r3, r2
 800134e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001350:	4b6b      	ldr	r3, [pc, #428]	@ (8001500 <HAL_RCC_OscConfig+0x270>)
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	69db      	ldr	r3, [r3, #28]
 800135c:	021b      	lsls	r3, r3, #8
 800135e:	4968      	ldr	r1, [pc, #416]	@ (8001500 <HAL_RCC_OscConfig+0x270>)
 8001360:	4313      	orrs	r3, r2
 8001362:	604b      	str	r3, [r1, #4]
 8001364:	e025      	b.n	80013b2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001366:	4b66      	ldr	r3, [pc, #408]	@ (8001500 <HAL_RCC_OscConfig+0x270>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	4a65      	ldr	r2, [pc, #404]	@ (8001500 <HAL_RCC_OscConfig+0x270>)
 800136c:	f043 0308 	orr.w	r3, r3, #8
 8001370:	6013      	str	r3, [r2, #0]
 8001372:	4b63      	ldr	r3, [pc, #396]	@ (8001500 <HAL_RCC_OscConfig+0x270>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	6a1b      	ldr	r3, [r3, #32]
 800137e:	4960      	ldr	r1, [pc, #384]	@ (8001500 <HAL_RCC_OscConfig+0x270>)
 8001380:	4313      	orrs	r3, r2
 8001382:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001384:	4b5e      	ldr	r3, [pc, #376]	@ (8001500 <HAL_RCC_OscConfig+0x270>)
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	69db      	ldr	r3, [r3, #28]
 8001390:	021b      	lsls	r3, r3, #8
 8001392:	495b      	ldr	r1, [pc, #364]	@ (8001500 <HAL_RCC_OscConfig+0x270>)
 8001394:	4313      	orrs	r3, r2
 8001396:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001398:	69bb      	ldr	r3, [r7, #24]
 800139a:	2b00      	cmp	r3, #0
 800139c:	d109      	bne.n	80013b2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	6a1b      	ldr	r3, [r3, #32]
 80013a2:	4618      	mov	r0, r3
 80013a4:	f000 fd52 	bl	8001e4c <RCC_SetFlashLatencyFromMSIRange>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d001      	beq.n	80013b2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80013ae:	2301      	movs	r3, #1
 80013b0:	e380      	b.n	8001ab4 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80013b2:	f000 fc87 	bl	8001cc4 <HAL_RCC_GetSysClockFreq>
 80013b6:	4602      	mov	r2, r0
 80013b8:	4b51      	ldr	r3, [pc, #324]	@ (8001500 <HAL_RCC_OscConfig+0x270>)
 80013ba:	689b      	ldr	r3, [r3, #8]
 80013bc:	091b      	lsrs	r3, r3, #4
 80013be:	f003 030f 	and.w	r3, r3, #15
 80013c2:	4950      	ldr	r1, [pc, #320]	@ (8001504 <HAL_RCC_OscConfig+0x274>)
 80013c4:	5ccb      	ldrb	r3, [r1, r3]
 80013c6:	f003 031f 	and.w	r3, r3, #31
 80013ca:	fa22 f303 	lsr.w	r3, r2, r3
 80013ce:	4a4e      	ldr	r2, [pc, #312]	@ (8001508 <HAL_RCC_OscConfig+0x278>)
 80013d0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80013d2:	4b4e      	ldr	r3, [pc, #312]	@ (800150c <HAL_RCC_OscConfig+0x27c>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	4618      	mov	r0, r3
 80013d8:	f7ff fb14 	bl	8000a04 <HAL_InitTick>
 80013dc:	4603      	mov	r3, r0
 80013de:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80013e0:	7bfb      	ldrb	r3, [r7, #15]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d052      	beq.n	800148c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80013e6:	7bfb      	ldrb	r3, [r7, #15]
 80013e8:	e364      	b.n	8001ab4 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	699b      	ldr	r3, [r3, #24]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d032      	beq.n	8001458 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80013f2:	4b43      	ldr	r3, [pc, #268]	@ (8001500 <HAL_RCC_OscConfig+0x270>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	4a42      	ldr	r2, [pc, #264]	@ (8001500 <HAL_RCC_OscConfig+0x270>)
 80013f8:	f043 0301 	orr.w	r3, r3, #1
 80013fc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80013fe:	f7ff fb51 	bl	8000aa4 <HAL_GetTick>
 8001402:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001404:	e008      	b.n	8001418 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001406:	f7ff fb4d 	bl	8000aa4 <HAL_GetTick>
 800140a:	4602      	mov	r2, r0
 800140c:	693b      	ldr	r3, [r7, #16]
 800140e:	1ad3      	subs	r3, r2, r3
 8001410:	2b02      	cmp	r3, #2
 8001412:	d901      	bls.n	8001418 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001414:	2303      	movs	r3, #3
 8001416:	e34d      	b.n	8001ab4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001418:	4b39      	ldr	r3, [pc, #228]	@ (8001500 <HAL_RCC_OscConfig+0x270>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f003 0302 	and.w	r3, r3, #2
 8001420:	2b00      	cmp	r3, #0
 8001422:	d0f0      	beq.n	8001406 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001424:	4b36      	ldr	r3, [pc, #216]	@ (8001500 <HAL_RCC_OscConfig+0x270>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4a35      	ldr	r2, [pc, #212]	@ (8001500 <HAL_RCC_OscConfig+0x270>)
 800142a:	f043 0308 	orr.w	r3, r3, #8
 800142e:	6013      	str	r3, [r2, #0]
 8001430:	4b33      	ldr	r3, [pc, #204]	@ (8001500 <HAL_RCC_OscConfig+0x270>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	6a1b      	ldr	r3, [r3, #32]
 800143c:	4930      	ldr	r1, [pc, #192]	@ (8001500 <HAL_RCC_OscConfig+0x270>)
 800143e:	4313      	orrs	r3, r2
 8001440:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001442:	4b2f      	ldr	r3, [pc, #188]	@ (8001500 <HAL_RCC_OscConfig+0x270>)
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	69db      	ldr	r3, [r3, #28]
 800144e:	021b      	lsls	r3, r3, #8
 8001450:	492b      	ldr	r1, [pc, #172]	@ (8001500 <HAL_RCC_OscConfig+0x270>)
 8001452:	4313      	orrs	r3, r2
 8001454:	604b      	str	r3, [r1, #4]
 8001456:	e01a      	b.n	800148e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001458:	4b29      	ldr	r3, [pc, #164]	@ (8001500 <HAL_RCC_OscConfig+0x270>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	4a28      	ldr	r2, [pc, #160]	@ (8001500 <HAL_RCC_OscConfig+0x270>)
 800145e:	f023 0301 	bic.w	r3, r3, #1
 8001462:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001464:	f7ff fb1e 	bl	8000aa4 <HAL_GetTick>
 8001468:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800146a:	e008      	b.n	800147e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800146c:	f7ff fb1a 	bl	8000aa4 <HAL_GetTick>
 8001470:	4602      	mov	r2, r0
 8001472:	693b      	ldr	r3, [r7, #16]
 8001474:	1ad3      	subs	r3, r2, r3
 8001476:	2b02      	cmp	r3, #2
 8001478:	d901      	bls.n	800147e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800147a:	2303      	movs	r3, #3
 800147c:	e31a      	b.n	8001ab4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800147e:	4b20      	ldr	r3, [pc, #128]	@ (8001500 <HAL_RCC_OscConfig+0x270>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f003 0302 	and.w	r3, r3, #2
 8001486:	2b00      	cmp	r3, #0
 8001488:	d1f0      	bne.n	800146c <HAL_RCC_OscConfig+0x1dc>
 800148a:	e000      	b.n	800148e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800148c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f003 0301 	and.w	r3, r3, #1
 8001496:	2b00      	cmp	r3, #0
 8001498:	d073      	beq.n	8001582 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800149a:	69bb      	ldr	r3, [r7, #24]
 800149c:	2b08      	cmp	r3, #8
 800149e:	d005      	beq.n	80014ac <HAL_RCC_OscConfig+0x21c>
 80014a0:	69bb      	ldr	r3, [r7, #24]
 80014a2:	2b0c      	cmp	r3, #12
 80014a4:	d10e      	bne.n	80014c4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80014a6:	697b      	ldr	r3, [r7, #20]
 80014a8:	2b03      	cmp	r3, #3
 80014aa:	d10b      	bne.n	80014c4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014ac:	4b14      	ldr	r3, [pc, #80]	@ (8001500 <HAL_RCC_OscConfig+0x270>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d063      	beq.n	8001580 <HAL_RCC_OscConfig+0x2f0>
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d15f      	bne.n	8001580 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80014c0:	2301      	movs	r3, #1
 80014c2:	e2f7      	b.n	8001ab4 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80014cc:	d106      	bne.n	80014dc <HAL_RCC_OscConfig+0x24c>
 80014ce:	4b0c      	ldr	r3, [pc, #48]	@ (8001500 <HAL_RCC_OscConfig+0x270>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	4a0b      	ldr	r2, [pc, #44]	@ (8001500 <HAL_RCC_OscConfig+0x270>)
 80014d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80014d8:	6013      	str	r3, [r2, #0]
 80014da:	e025      	b.n	8001528 <HAL_RCC_OscConfig+0x298>
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80014e4:	d114      	bne.n	8001510 <HAL_RCC_OscConfig+0x280>
 80014e6:	4b06      	ldr	r3, [pc, #24]	@ (8001500 <HAL_RCC_OscConfig+0x270>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	4a05      	ldr	r2, [pc, #20]	@ (8001500 <HAL_RCC_OscConfig+0x270>)
 80014ec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80014f0:	6013      	str	r3, [r2, #0]
 80014f2:	4b03      	ldr	r3, [pc, #12]	@ (8001500 <HAL_RCC_OscConfig+0x270>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	4a02      	ldr	r2, [pc, #8]	@ (8001500 <HAL_RCC_OscConfig+0x270>)
 80014f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80014fc:	6013      	str	r3, [r2, #0]
 80014fe:	e013      	b.n	8001528 <HAL_RCC_OscConfig+0x298>
 8001500:	40021000 	.word	0x40021000
 8001504:	080041ac 	.word	0x080041ac
 8001508:	2000001c 	.word	0x2000001c
 800150c:	20000020 	.word	0x20000020
 8001510:	4ba0      	ldr	r3, [pc, #640]	@ (8001794 <HAL_RCC_OscConfig+0x504>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4a9f      	ldr	r2, [pc, #636]	@ (8001794 <HAL_RCC_OscConfig+0x504>)
 8001516:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800151a:	6013      	str	r3, [r2, #0]
 800151c:	4b9d      	ldr	r3, [pc, #628]	@ (8001794 <HAL_RCC_OscConfig+0x504>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4a9c      	ldr	r2, [pc, #624]	@ (8001794 <HAL_RCC_OscConfig+0x504>)
 8001522:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001526:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	2b00      	cmp	r3, #0
 800152e:	d013      	beq.n	8001558 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001530:	f7ff fab8 	bl	8000aa4 <HAL_GetTick>
 8001534:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001536:	e008      	b.n	800154a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001538:	f7ff fab4 	bl	8000aa4 <HAL_GetTick>
 800153c:	4602      	mov	r2, r0
 800153e:	693b      	ldr	r3, [r7, #16]
 8001540:	1ad3      	subs	r3, r2, r3
 8001542:	2b64      	cmp	r3, #100	@ 0x64
 8001544:	d901      	bls.n	800154a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001546:	2303      	movs	r3, #3
 8001548:	e2b4      	b.n	8001ab4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800154a:	4b92      	ldr	r3, [pc, #584]	@ (8001794 <HAL_RCC_OscConfig+0x504>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001552:	2b00      	cmp	r3, #0
 8001554:	d0f0      	beq.n	8001538 <HAL_RCC_OscConfig+0x2a8>
 8001556:	e014      	b.n	8001582 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001558:	f7ff faa4 	bl	8000aa4 <HAL_GetTick>
 800155c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800155e:	e008      	b.n	8001572 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001560:	f7ff faa0 	bl	8000aa4 <HAL_GetTick>
 8001564:	4602      	mov	r2, r0
 8001566:	693b      	ldr	r3, [r7, #16]
 8001568:	1ad3      	subs	r3, r2, r3
 800156a:	2b64      	cmp	r3, #100	@ 0x64
 800156c:	d901      	bls.n	8001572 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800156e:	2303      	movs	r3, #3
 8001570:	e2a0      	b.n	8001ab4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001572:	4b88      	ldr	r3, [pc, #544]	@ (8001794 <HAL_RCC_OscConfig+0x504>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800157a:	2b00      	cmp	r3, #0
 800157c:	d1f0      	bne.n	8001560 <HAL_RCC_OscConfig+0x2d0>
 800157e:	e000      	b.n	8001582 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001580:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f003 0302 	and.w	r3, r3, #2
 800158a:	2b00      	cmp	r3, #0
 800158c:	d060      	beq.n	8001650 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800158e:	69bb      	ldr	r3, [r7, #24]
 8001590:	2b04      	cmp	r3, #4
 8001592:	d005      	beq.n	80015a0 <HAL_RCC_OscConfig+0x310>
 8001594:	69bb      	ldr	r3, [r7, #24]
 8001596:	2b0c      	cmp	r3, #12
 8001598:	d119      	bne.n	80015ce <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800159a:	697b      	ldr	r3, [r7, #20]
 800159c:	2b02      	cmp	r3, #2
 800159e:	d116      	bne.n	80015ce <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80015a0:	4b7c      	ldr	r3, [pc, #496]	@ (8001794 <HAL_RCC_OscConfig+0x504>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d005      	beq.n	80015b8 <HAL_RCC_OscConfig+0x328>
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	68db      	ldr	r3, [r3, #12]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d101      	bne.n	80015b8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80015b4:	2301      	movs	r3, #1
 80015b6:	e27d      	b.n	8001ab4 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015b8:	4b76      	ldr	r3, [pc, #472]	@ (8001794 <HAL_RCC_OscConfig+0x504>)
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	691b      	ldr	r3, [r3, #16]
 80015c4:	061b      	lsls	r3, r3, #24
 80015c6:	4973      	ldr	r1, [pc, #460]	@ (8001794 <HAL_RCC_OscConfig+0x504>)
 80015c8:	4313      	orrs	r3, r2
 80015ca:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80015cc:	e040      	b.n	8001650 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	68db      	ldr	r3, [r3, #12]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d023      	beq.n	800161e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015d6:	4b6f      	ldr	r3, [pc, #444]	@ (8001794 <HAL_RCC_OscConfig+0x504>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	4a6e      	ldr	r2, [pc, #440]	@ (8001794 <HAL_RCC_OscConfig+0x504>)
 80015dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015e2:	f7ff fa5f 	bl	8000aa4 <HAL_GetTick>
 80015e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80015e8:	e008      	b.n	80015fc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015ea:	f7ff fa5b 	bl	8000aa4 <HAL_GetTick>
 80015ee:	4602      	mov	r2, r0
 80015f0:	693b      	ldr	r3, [r7, #16]
 80015f2:	1ad3      	subs	r3, r2, r3
 80015f4:	2b02      	cmp	r3, #2
 80015f6:	d901      	bls.n	80015fc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80015f8:	2303      	movs	r3, #3
 80015fa:	e25b      	b.n	8001ab4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80015fc:	4b65      	ldr	r3, [pc, #404]	@ (8001794 <HAL_RCC_OscConfig+0x504>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001604:	2b00      	cmp	r3, #0
 8001606:	d0f0      	beq.n	80015ea <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001608:	4b62      	ldr	r3, [pc, #392]	@ (8001794 <HAL_RCC_OscConfig+0x504>)
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	691b      	ldr	r3, [r3, #16]
 8001614:	061b      	lsls	r3, r3, #24
 8001616:	495f      	ldr	r1, [pc, #380]	@ (8001794 <HAL_RCC_OscConfig+0x504>)
 8001618:	4313      	orrs	r3, r2
 800161a:	604b      	str	r3, [r1, #4]
 800161c:	e018      	b.n	8001650 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800161e:	4b5d      	ldr	r3, [pc, #372]	@ (8001794 <HAL_RCC_OscConfig+0x504>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4a5c      	ldr	r2, [pc, #368]	@ (8001794 <HAL_RCC_OscConfig+0x504>)
 8001624:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001628:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800162a:	f7ff fa3b 	bl	8000aa4 <HAL_GetTick>
 800162e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001630:	e008      	b.n	8001644 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001632:	f7ff fa37 	bl	8000aa4 <HAL_GetTick>
 8001636:	4602      	mov	r2, r0
 8001638:	693b      	ldr	r3, [r7, #16]
 800163a:	1ad3      	subs	r3, r2, r3
 800163c:	2b02      	cmp	r3, #2
 800163e:	d901      	bls.n	8001644 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001640:	2303      	movs	r3, #3
 8001642:	e237      	b.n	8001ab4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001644:	4b53      	ldr	r3, [pc, #332]	@ (8001794 <HAL_RCC_OscConfig+0x504>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800164c:	2b00      	cmp	r3, #0
 800164e:	d1f0      	bne.n	8001632 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f003 0308 	and.w	r3, r3, #8
 8001658:	2b00      	cmp	r3, #0
 800165a:	d03c      	beq.n	80016d6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	695b      	ldr	r3, [r3, #20]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d01c      	beq.n	800169e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001664:	4b4b      	ldr	r3, [pc, #300]	@ (8001794 <HAL_RCC_OscConfig+0x504>)
 8001666:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800166a:	4a4a      	ldr	r2, [pc, #296]	@ (8001794 <HAL_RCC_OscConfig+0x504>)
 800166c:	f043 0301 	orr.w	r3, r3, #1
 8001670:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001674:	f7ff fa16 	bl	8000aa4 <HAL_GetTick>
 8001678:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800167a:	e008      	b.n	800168e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800167c:	f7ff fa12 	bl	8000aa4 <HAL_GetTick>
 8001680:	4602      	mov	r2, r0
 8001682:	693b      	ldr	r3, [r7, #16]
 8001684:	1ad3      	subs	r3, r2, r3
 8001686:	2b02      	cmp	r3, #2
 8001688:	d901      	bls.n	800168e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800168a:	2303      	movs	r3, #3
 800168c:	e212      	b.n	8001ab4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800168e:	4b41      	ldr	r3, [pc, #260]	@ (8001794 <HAL_RCC_OscConfig+0x504>)
 8001690:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001694:	f003 0302 	and.w	r3, r3, #2
 8001698:	2b00      	cmp	r3, #0
 800169a:	d0ef      	beq.n	800167c <HAL_RCC_OscConfig+0x3ec>
 800169c:	e01b      	b.n	80016d6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800169e:	4b3d      	ldr	r3, [pc, #244]	@ (8001794 <HAL_RCC_OscConfig+0x504>)
 80016a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80016a4:	4a3b      	ldr	r2, [pc, #236]	@ (8001794 <HAL_RCC_OscConfig+0x504>)
 80016a6:	f023 0301 	bic.w	r3, r3, #1
 80016aa:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016ae:	f7ff f9f9 	bl	8000aa4 <HAL_GetTick>
 80016b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80016b4:	e008      	b.n	80016c8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016b6:	f7ff f9f5 	bl	8000aa4 <HAL_GetTick>
 80016ba:	4602      	mov	r2, r0
 80016bc:	693b      	ldr	r3, [r7, #16]
 80016be:	1ad3      	subs	r3, r2, r3
 80016c0:	2b02      	cmp	r3, #2
 80016c2:	d901      	bls.n	80016c8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80016c4:	2303      	movs	r3, #3
 80016c6:	e1f5      	b.n	8001ab4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80016c8:	4b32      	ldr	r3, [pc, #200]	@ (8001794 <HAL_RCC_OscConfig+0x504>)
 80016ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80016ce:	f003 0302 	and.w	r3, r3, #2
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d1ef      	bne.n	80016b6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f003 0304 	and.w	r3, r3, #4
 80016de:	2b00      	cmp	r3, #0
 80016e0:	f000 80a6 	beq.w	8001830 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016e4:	2300      	movs	r3, #0
 80016e6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80016e8:	4b2a      	ldr	r3, [pc, #168]	@ (8001794 <HAL_RCC_OscConfig+0x504>)
 80016ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d10d      	bne.n	8001710 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016f4:	4b27      	ldr	r3, [pc, #156]	@ (8001794 <HAL_RCC_OscConfig+0x504>)
 80016f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016f8:	4a26      	ldr	r2, [pc, #152]	@ (8001794 <HAL_RCC_OscConfig+0x504>)
 80016fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016fe:	6593      	str	r3, [r2, #88]	@ 0x58
 8001700:	4b24      	ldr	r3, [pc, #144]	@ (8001794 <HAL_RCC_OscConfig+0x504>)
 8001702:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001704:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001708:	60bb      	str	r3, [r7, #8]
 800170a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800170c:	2301      	movs	r3, #1
 800170e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001710:	4b21      	ldr	r3, [pc, #132]	@ (8001798 <HAL_RCC_OscConfig+0x508>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001718:	2b00      	cmp	r3, #0
 800171a:	d118      	bne.n	800174e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800171c:	4b1e      	ldr	r3, [pc, #120]	@ (8001798 <HAL_RCC_OscConfig+0x508>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4a1d      	ldr	r2, [pc, #116]	@ (8001798 <HAL_RCC_OscConfig+0x508>)
 8001722:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001726:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001728:	f7ff f9bc 	bl	8000aa4 <HAL_GetTick>
 800172c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800172e:	e008      	b.n	8001742 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001730:	f7ff f9b8 	bl	8000aa4 <HAL_GetTick>
 8001734:	4602      	mov	r2, r0
 8001736:	693b      	ldr	r3, [r7, #16]
 8001738:	1ad3      	subs	r3, r2, r3
 800173a:	2b02      	cmp	r3, #2
 800173c:	d901      	bls.n	8001742 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800173e:	2303      	movs	r3, #3
 8001740:	e1b8      	b.n	8001ab4 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001742:	4b15      	ldr	r3, [pc, #84]	@ (8001798 <HAL_RCC_OscConfig+0x508>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800174a:	2b00      	cmp	r3, #0
 800174c:	d0f0      	beq.n	8001730 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	689b      	ldr	r3, [r3, #8]
 8001752:	2b01      	cmp	r3, #1
 8001754:	d108      	bne.n	8001768 <HAL_RCC_OscConfig+0x4d8>
 8001756:	4b0f      	ldr	r3, [pc, #60]	@ (8001794 <HAL_RCC_OscConfig+0x504>)
 8001758:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800175c:	4a0d      	ldr	r2, [pc, #52]	@ (8001794 <HAL_RCC_OscConfig+0x504>)
 800175e:	f043 0301 	orr.w	r3, r3, #1
 8001762:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001766:	e029      	b.n	80017bc <HAL_RCC_OscConfig+0x52c>
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	689b      	ldr	r3, [r3, #8]
 800176c:	2b05      	cmp	r3, #5
 800176e:	d115      	bne.n	800179c <HAL_RCC_OscConfig+0x50c>
 8001770:	4b08      	ldr	r3, [pc, #32]	@ (8001794 <HAL_RCC_OscConfig+0x504>)
 8001772:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001776:	4a07      	ldr	r2, [pc, #28]	@ (8001794 <HAL_RCC_OscConfig+0x504>)
 8001778:	f043 0304 	orr.w	r3, r3, #4
 800177c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001780:	4b04      	ldr	r3, [pc, #16]	@ (8001794 <HAL_RCC_OscConfig+0x504>)
 8001782:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001786:	4a03      	ldr	r2, [pc, #12]	@ (8001794 <HAL_RCC_OscConfig+0x504>)
 8001788:	f043 0301 	orr.w	r3, r3, #1
 800178c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001790:	e014      	b.n	80017bc <HAL_RCC_OscConfig+0x52c>
 8001792:	bf00      	nop
 8001794:	40021000 	.word	0x40021000
 8001798:	40007000 	.word	0x40007000
 800179c:	4b9d      	ldr	r3, [pc, #628]	@ (8001a14 <HAL_RCC_OscConfig+0x784>)
 800179e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80017a2:	4a9c      	ldr	r2, [pc, #624]	@ (8001a14 <HAL_RCC_OscConfig+0x784>)
 80017a4:	f023 0301 	bic.w	r3, r3, #1
 80017a8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80017ac:	4b99      	ldr	r3, [pc, #612]	@ (8001a14 <HAL_RCC_OscConfig+0x784>)
 80017ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80017b2:	4a98      	ldr	r2, [pc, #608]	@ (8001a14 <HAL_RCC_OscConfig+0x784>)
 80017b4:	f023 0304 	bic.w	r3, r3, #4
 80017b8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	689b      	ldr	r3, [r3, #8]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d016      	beq.n	80017f2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017c4:	f7ff f96e 	bl	8000aa4 <HAL_GetTick>
 80017c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80017ca:	e00a      	b.n	80017e2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017cc:	f7ff f96a 	bl	8000aa4 <HAL_GetTick>
 80017d0:	4602      	mov	r2, r0
 80017d2:	693b      	ldr	r3, [r7, #16]
 80017d4:	1ad3      	subs	r3, r2, r3
 80017d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017da:	4293      	cmp	r3, r2
 80017dc:	d901      	bls.n	80017e2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80017de:	2303      	movs	r3, #3
 80017e0:	e168      	b.n	8001ab4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80017e2:	4b8c      	ldr	r3, [pc, #560]	@ (8001a14 <HAL_RCC_OscConfig+0x784>)
 80017e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80017e8:	f003 0302 	and.w	r3, r3, #2
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d0ed      	beq.n	80017cc <HAL_RCC_OscConfig+0x53c>
 80017f0:	e015      	b.n	800181e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017f2:	f7ff f957 	bl	8000aa4 <HAL_GetTick>
 80017f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80017f8:	e00a      	b.n	8001810 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017fa:	f7ff f953 	bl	8000aa4 <HAL_GetTick>
 80017fe:	4602      	mov	r2, r0
 8001800:	693b      	ldr	r3, [r7, #16]
 8001802:	1ad3      	subs	r3, r2, r3
 8001804:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001808:	4293      	cmp	r3, r2
 800180a:	d901      	bls.n	8001810 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800180c:	2303      	movs	r3, #3
 800180e:	e151      	b.n	8001ab4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001810:	4b80      	ldr	r3, [pc, #512]	@ (8001a14 <HAL_RCC_OscConfig+0x784>)
 8001812:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001816:	f003 0302 	and.w	r3, r3, #2
 800181a:	2b00      	cmp	r3, #0
 800181c:	d1ed      	bne.n	80017fa <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800181e:	7ffb      	ldrb	r3, [r7, #31]
 8001820:	2b01      	cmp	r3, #1
 8001822:	d105      	bne.n	8001830 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001824:	4b7b      	ldr	r3, [pc, #492]	@ (8001a14 <HAL_RCC_OscConfig+0x784>)
 8001826:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001828:	4a7a      	ldr	r2, [pc, #488]	@ (8001a14 <HAL_RCC_OscConfig+0x784>)
 800182a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800182e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f003 0320 	and.w	r3, r3, #32
 8001838:	2b00      	cmp	r3, #0
 800183a:	d03c      	beq.n	80018b6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001840:	2b00      	cmp	r3, #0
 8001842:	d01c      	beq.n	800187e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001844:	4b73      	ldr	r3, [pc, #460]	@ (8001a14 <HAL_RCC_OscConfig+0x784>)
 8001846:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800184a:	4a72      	ldr	r2, [pc, #456]	@ (8001a14 <HAL_RCC_OscConfig+0x784>)
 800184c:	f043 0301 	orr.w	r3, r3, #1
 8001850:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001854:	f7ff f926 	bl	8000aa4 <HAL_GetTick>
 8001858:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800185a:	e008      	b.n	800186e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800185c:	f7ff f922 	bl	8000aa4 <HAL_GetTick>
 8001860:	4602      	mov	r2, r0
 8001862:	693b      	ldr	r3, [r7, #16]
 8001864:	1ad3      	subs	r3, r2, r3
 8001866:	2b02      	cmp	r3, #2
 8001868:	d901      	bls.n	800186e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800186a:	2303      	movs	r3, #3
 800186c:	e122      	b.n	8001ab4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800186e:	4b69      	ldr	r3, [pc, #420]	@ (8001a14 <HAL_RCC_OscConfig+0x784>)
 8001870:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001874:	f003 0302 	and.w	r3, r3, #2
 8001878:	2b00      	cmp	r3, #0
 800187a:	d0ef      	beq.n	800185c <HAL_RCC_OscConfig+0x5cc>
 800187c:	e01b      	b.n	80018b6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800187e:	4b65      	ldr	r3, [pc, #404]	@ (8001a14 <HAL_RCC_OscConfig+0x784>)
 8001880:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001884:	4a63      	ldr	r2, [pc, #396]	@ (8001a14 <HAL_RCC_OscConfig+0x784>)
 8001886:	f023 0301 	bic.w	r3, r3, #1
 800188a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800188e:	f7ff f909 	bl	8000aa4 <HAL_GetTick>
 8001892:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001894:	e008      	b.n	80018a8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001896:	f7ff f905 	bl	8000aa4 <HAL_GetTick>
 800189a:	4602      	mov	r2, r0
 800189c:	693b      	ldr	r3, [r7, #16]
 800189e:	1ad3      	subs	r3, r2, r3
 80018a0:	2b02      	cmp	r3, #2
 80018a2:	d901      	bls.n	80018a8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80018a4:	2303      	movs	r3, #3
 80018a6:	e105      	b.n	8001ab4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80018a8:	4b5a      	ldr	r3, [pc, #360]	@ (8001a14 <HAL_RCC_OscConfig+0x784>)
 80018aa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80018ae:	f003 0302 	and.w	r3, r3, #2
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d1ef      	bne.n	8001896 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	f000 80f9 	beq.w	8001ab2 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018c4:	2b02      	cmp	r3, #2
 80018c6:	f040 80cf 	bne.w	8001a68 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80018ca:	4b52      	ldr	r3, [pc, #328]	@ (8001a14 <HAL_RCC_OscConfig+0x784>)
 80018cc:	68db      	ldr	r3, [r3, #12]
 80018ce:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80018d0:	697b      	ldr	r3, [r7, #20]
 80018d2:	f003 0203 	and.w	r2, r3, #3
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018da:	429a      	cmp	r2, r3
 80018dc:	d12c      	bne.n	8001938 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80018de:	697b      	ldr	r3, [r7, #20]
 80018e0:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018e8:	3b01      	subs	r3, #1
 80018ea:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80018ec:	429a      	cmp	r2, r3
 80018ee:	d123      	bne.n	8001938 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80018f0:	697b      	ldr	r3, [r7, #20]
 80018f2:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80018fa:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80018fc:	429a      	cmp	r2, r3
 80018fe:	d11b      	bne.n	8001938 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001900:	697b      	ldr	r3, [r7, #20]
 8001902:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800190a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800190c:	429a      	cmp	r2, r3
 800190e:	d113      	bne.n	8001938 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001910:	697b      	ldr	r3, [r7, #20]
 8001912:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800191a:	085b      	lsrs	r3, r3, #1
 800191c:	3b01      	subs	r3, #1
 800191e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001920:	429a      	cmp	r2, r3
 8001922:	d109      	bne.n	8001938 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001924:	697b      	ldr	r3, [r7, #20]
 8001926:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800192e:	085b      	lsrs	r3, r3, #1
 8001930:	3b01      	subs	r3, #1
 8001932:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001934:	429a      	cmp	r2, r3
 8001936:	d071      	beq.n	8001a1c <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001938:	69bb      	ldr	r3, [r7, #24]
 800193a:	2b0c      	cmp	r3, #12
 800193c:	d068      	beq.n	8001a10 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800193e:	4b35      	ldr	r3, [pc, #212]	@ (8001a14 <HAL_RCC_OscConfig+0x784>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001946:	2b00      	cmp	r3, #0
 8001948:	d105      	bne.n	8001956 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800194a:	4b32      	ldr	r3, [pc, #200]	@ (8001a14 <HAL_RCC_OscConfig+0x784>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001952:	2b00      	cmp	r3, #0
 8001954:	d001      	beq.n	800195a <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8001956:	2301      	movs	r3, #1
 8001958:	e0ac      	b.n	8001ab4 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800195a:	4b2e      	ldr	r3, [pc, #184]	@ (8001a14 <HAL_RCC_OscConfig+0x784>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4a2d      	ldr	r2, [pc, #180]	@ (8001a14 <HAL_RCC_OscConfig+0x784>)
 8001960:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001964:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001966:	f7ff f89d 	bl	8000aa4 <HAL_GetTick>
 800196a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800196c:	e008      	b.n	8001980 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800196e:	f7ff f899 	bl	8000aa4 <HAL_GetTick>
 8001972:	4602      	mov	r2, r0
 8001974:	693b      	ldr	r3, [r7, #16]
 8001976:	1ad3      	subs	r3, r2, r3
 8001978:	2b02      	cmp	r3, #2
 800197a:	d901      	bls.n	8001980 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 800197c:	2303      	movs	r3, #3
 800197e:	e099      	b.n	8001ab4 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001980:	4b24      	ldr	r3, [pc, #144]	@ (8001a14 <HAL_RCC_OscConfig+0x784>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001988:	2b00      	cmp	r3, #0
 800198a:	d1f0      	bne.n	800196e <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800198c:	4b21      	ldr	r3, [pc, #132]	@ (8001a14 <HAL_RCC_OscConfig+0x784>)
 800198e:	68da      	ldr	r2, [r3, #12]
 8001990:	4b21      	ldr	r3, [pc, #132]	@ (8001a18 <HAL_RCC_OscConfig+0x788>)
 8001992:	4013      	ands	r3, r2
 8001994:	687a      	ldr	r2, [r7, #4]
 8001996:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001998:	687a      	ldr	r2, [r7, #4]
 800199a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800199c:	3a01      	subs	r2, #1
 800199e:	0112      	lsls	r2, r2, #4
 80019a0:	4311      	orrs	r1, r2
 80019a2:	687a      	ldr	r2, [r7, #4]
 80019a4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80019a6:	0212      	lsls	r2, r2, #8
 80019a8:	4311      	orrs	r1, r2
 80019aa:	687a      	ldr	r2, [r7, #4]
 80019ac:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80019ae:	0852      	lsrs	r2, r2, #1
 80019b0:	3a01      	subs	r2, #1
 80019b2:	0552      	lsls	r2, r2, #21
 80019b4:	4311      	orrs	r1, r2
 80019b6:	687a      	ldr	r2, [r7, #4]
 80019b8:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80019ba:	0852      	lsrs	r2, r2, #1
 80019bc:	3a01      	subs	r2, #1
 80019be:	0652      	lsls	r2, r2, #25
 80019c0:	4311      	orrs	r1, r2
 80019c2:	687a      	ldr	r2, [r7, #4]
 80019c4:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80019c6:	06d2      	lsls	r2, r2, #27
 80019c8:	430a      	orrs	r2, r1
 80019ca:	4912      	ldr	r1, [pc, #72]	@ (8001a14 <HAL_RCC_OscConfig+0x784>)
 80019cc:	4313      	orrs	r3, r2
 80019ce:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80019d0:	4b10      	ldr	r3, [pc, #64]	@ (8001a14 <HAL_RCC_OscConfig+0x784>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4a0f      	ldr	r2, [pc, #60]	@ (8001a14 <HAL_RCC_OscConfig+0x784>)
 80019d6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80019da:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80019dc:	4b0d      	ldr	r3, [pc, #52]	@ (8001a14 <HAL_RCC_OscConfig+0x784>)
 80019de:	68db      	ldr	r3, [r3, #12]
 80019e0:	4a0c      	ldr	r2, [pc, #48]	@ (8001a14 <HAL_RCC_OscConfig+0x784>)
 80019e2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80019e6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80019e8:	f7ff f85c 	bl	8000aa4 <HAL_GetTick>
 80019ec:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019ee:	e008      	b.n	8001a02 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019f0:	f7ff f858 	bl	8000aa4 <HAL_GetTick>
 80019f4:	4602      	mov	r2, r0
 80019f6:	693b      	ldr	r3, [r7, #16]
 80019f8:	1ad3      	subs	r3, r2, r3
 80019fa:	2b02      	cmp	r3, #2
 80019fc:	d901      	bls.n	8001a02 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80019fe:	2303      	movs	r3, #3
 8001a00:	e058      	b.n	8001ab4 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a02:	4b04      	ldr	r3, [pc, #16]	@ (8001a14 <HAL_RCC_OscConfig+0x784>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d0f0      	beq.n	80019f0 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001a0e:	e050      	b.n	8001ab2 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001a10:	2301      	movs	r3, #1
 8001a12:	e04f      	b.n	8001ab4 <HAL_RCC_OscConfig+0x824>
 8001a14:	40021000 	.word	0x40021000
 8001a18:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a1c:	4b27      	ldr	r3, [pc, #156]	@ (8001abc <HAL_RCC_OscConfig+0x82c>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d144      	bne.n	8001ab2 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001a28:	4b24      	ldr	r3, [pc, #144]	@ (8001abc <HAL_RCC_OscConfig+0x82c>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a23      	ldr	r2, [pc, #140]	@ (8001abc <HAL_RCC_OscConfig+0x82c>)
 8001a2e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001a32:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001a34:	4b21      	ldr	r3, [pc, #132]	@ (8001abc <HAL_RCC_OscConfig+0x82c>)
 8001a36:	68db      	ldr	r3, [r3, #12]
 8001a38:	4a20      	ldr	r2, [pc, #128]	@ (8001abc <HAL_RCC_OscConfig+0x82c>)
 8001a3a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001a3e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001a40:	f7ff f830 	bl	8000aa4 <HAL_GetTick>
 8001a44:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a46:	e008      	b.n	8001a5a <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a48:	f7ff f82c 	bl	8000aa4 <HAL_GetTick>
 8001a4c:	4602      	mov	r2, r0
 8001a4e:	693b      	ldr	r3, [r7, #16]
 8001a50:	1ad3      	subs	r3, r2, r3
 8001a52:	2b02      	cmp	r3, #2
 8001a54:	d901      	bls.n	8001a5a <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8001a56:	2303      	movs	r3, #3
 8001a58:	e02c      	b.n	8001ab4 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a5a:	4b18      	ldr	r3, [pc, #96]	@ (8001abc <HAL_RCC_OscConfig+0x82c>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d0f0      	beq.n	8001a48 <HAL_RCC_OscConfig+0x7b8>
 8001a66:	e024      	b.n	8001ab2 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001a68:	69bb      	ldr	r3, [r7, #24]
 8001a6a:	2b0c      	cmp	r3, #12
 8001a6c:	d01f      	beq.n	8001aae <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a6e:	4b13      	ldr	r3, [pc, #76]	@ (8001abc <HAL_RCC_OscConfig+0x82c>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4a12      	ldr	r2, [pc, #72]	@ (8001abc <HAL_RCC_OscConfig+0x82c>)
 8001a74:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001a78:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a7a:	f7ff f813 	bl	8000aa4 <HAL_GetTick>
 8001a7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a80:	e008      	b.n	8001a94 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a82:	f7ff f80f 	bl	8000aa4 <HAL_GetTick>
 8001a86:	4602      	mov	r2, r0
 8001a88:	693b      	ldr	r3, [r7, #16]
 8001a8a:	1ad3      	subs	r3, r2, r3
 8001a8c:	2b02      	cmp	r3, #2
 8001a8e:	d901      	bls.n	8001a94 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8001a90:	2303      	movs	r3, #3
 8001a92:	e00f      	b.n	8001ab4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a94:	4b09      	ldr	r3, [pc, #36]	@ (8001abc <HAL_RCC_OscConfig+0x82c>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d1f0      	bne.n	8001a82 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001aa0:	4b06      	ldr	r3, [pc, #24]	@ (8001abc <HAL_RCC_OscConfig+0x82c>)
 8001aa2:	68da      	ldr	r2, [r3, #12]
 8001aa4:	4905      	ldr	r1, [pc, #20]	@ (8001abc <HAL_RCC_OscConfig+0x82c>)
 8001aa6:	4b06      	ldr	r3, [pc, #24]	@ (8001ac0 <HAL_RCC_OscConfig+0x830>)
 8001aa8:	4013      	ands	r3, r2
 8001aaa:	60cb      	str	r3, [r1, #12]
 8001aac:	e001      	b.n	8001ab2 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	e000      	b.n	8001ab4 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8001ab2:	2300      	movs	r3, #0
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	3720      	adds	r7, #32
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}
 8001abc:	40021000 	.word	0x40021000
 8001ac0:	feeefffc 	.word	0xfeeefffc

08001ac4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b084      	sub	sp, #16
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
 8001acc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d101      	bne.n	8001ad8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	e0e7      	b.n	8001ca8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ad8:	4b75      	ldr	r3, [pc, #468]	@ (8001cb0 <HAL_RCC_ClockConfig+0x1ec>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f003 0307 	and.w	r3, r3, #7
 8001ae0:	683a      	ldr	r2, [r7, #0]
 8001ae2:	429a      	cmp	r2, r3
 8001ae4:	d910      	bls.n	8001b08 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ae6:	4b72      	ldr	r3, [pc, #456]	@ (8001cb0 <HAL_RCC_ClockConfig+0x1ec>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f023 0207 	bic.w	r2, r3, #7
 8001aee:	4970      	ldr	r1, [pc, #448]	@ (8001cb0 <HAL_RCC_ClockConfig+0x1ec>)
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	4313      	orrs	r3, r2
 8001af4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001af6:	4b6e      	ldr	r3, [pc, #440]	@ (8001cb0 <HAL_RCC_ClockConfig+0x1ec>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f003 0307 	and.w	r3, r3, #7
 8001afe:	683a      	ldr	r2, [r7, #0]
 8001b00:	429a      	cmp	r2, r3
 8001b02:	d001      	beq.n	8001b08 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001b04:	2301      	movs	r3, #1
 8001b06:	e0cf      	b.n	8001ca8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f003 0302 	and.w	r3, r3, #2
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d010      	beq.n	8001b36 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	689a      	ldr	r2, [r3, #8]
 8001b18:	4b66      	ldr	r3, [pc, #408]	@ (8001cb4 <HAL_RCC_ClockConfig+0x1f0>)
 8001b1a:	689b      	ldr	r3, [r3, #8]
 8001b1c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001b20:	429a      	cmp	r2, r3
 8001b22:	d908      	bls.n	8001b36 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b24:	4b63      	ldr	r3, [pc, #396]	@ (8001cb4 <HAL_RCC_ClockConfig+0x1f0>)
 8001b26:	689b      	ldr	r3, [r3, #8]
 8001b28:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	689b      	ldr	r3, [r3, #8]
 8001b30:	4960      	ldr	r1, [pc, #384]	@ (8001cb4 <HAL_RCC_ClockConfig+0x1f0>)
 8001b32:	4313      	orrs	r3, r2
 8001b34:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f003 0301 	and.w	r3, r3, #1
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d04c      	beq.n	8001bdc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	2b03      	cmp	r3, #3
 8001b48:	d107      	bne.n	8001b5a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b4a:	4b5a      	ldr	r3, [pc, #360]	@ (8001cb4 <HAL_RCC_ClockConfig+0x1f0>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d121      	bne.n	8001b9a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001b56:	2301      	movs	r3, #1
 8001b58:	e0a6      	b.n	8001ca8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	2b02      	cmp	r3, #2
 8001b60:	d107      	bne.n	8001b72 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b62:	4b54      	ldr	r3, [pc, #336]	@ (8001cb4 <HAL_RCC_ClockConfig+0x1f0>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d115      	bne.n	8001b9a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	e09a      	b.n	8001ca8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d107      	bne.n	8001b8a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001b7a:	4b4e      	ldr	r3, [pc, #312]	@ (8001cb4 <HAL_RCC_ClockConfig+0x1f0>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f003 0302 	and.w	r3, r3, #2
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d109      	bne.n	8001b9a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001b86:	2301      	movs	r3, #1
 8001b88:	e08e      	b.n	8001ca8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b8a:	4b4a      	ldr	r3, [pc, #296]	@ (8001cb4 <HAL_RCC_ClockConfig+0x1f0>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d101      	bne.n	8001b9a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001b96:	2301      	movs	r3, #1
 8001b98:	e086      	b.n	8001ca8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001b9a:	4b46      	ldr	r3, [pc, #280]	@ (8001cb4 <HAL_RCC_ClockConfig+0x1f0>)
 8001b9c:	689b      	ldr	r3, [r3, #8]
 8001b9e:	f023 0203 	bic.w	r2, r3, #3
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	4943      	ldr	r1, [pc, #268]	@ (8001cb4 <HAL_RCC_ClockConfig+0x1f0>)
 8001ba8:	4313      	orrs	r3, r2
 8001baa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001bac:	f7fe ff7a 	bl	8000aa4 <HAL_GetTick>
 8001bb0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bb2:	e00a      	b.n	8001bca <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bb4:	f7fe ff76 	bl	8000aa4 <HAL_GetTick>
 8001bb8:	4602      	mov	r2, r0
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	1ad3      	subs	r3, r2, r3
 8001bbe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d901      	bls.n	8001bca <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001bc6:	2303      	movs	r3, #3
 8001bc8:	e06e      	b.n	8001ca8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bca:	4b3a      	ldr	r3, [pc, #232]	@ (8001cb4 <HAL_RCC_ClockConfig+0x1f0>)
 8001bcc:	689b      	ldr	r3, [r3, #8]
 8001bce:	f003 020c 	and.w	r2, r3, #12
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	009b      	lsls	r3, r3, #2
 8001bd8:	429a      	cmp	r2, r3
 8001bda:	d1eb      	bne.n	8001bb4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f003 0302 	and.w	r3, r3, #2
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d010      	beq.n	8001c0a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	689a      	ldr	r2, [r3, #8]
 8001bec:	4b31      	ldr	r3, [pc, #196]	@ (8001cb4 <HAL_RCC_ClockConfig+0x1f0>)
 8001bee:	689b      	ldr	r3, [r3, #8]
 8001bf0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001bf4:	429a      	cmp	r2, r3
 8001bf6:	d208      	bcs.n	8001c0a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bf8:	4b2e      	ldr	r3, [pc, #184]	@ (8001cb4 <HAL_RCC_ClockConfig+0x1f0>)
 8001bfa:	689b      	ldr	r3, [r3, #8]
 8001bfc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	689b      	ldr	r3, [r3, #8]
 8001c04:	492b      	ldr	r1, [pc, #172]	@ (8001cb4 <HAL_RCC_ClockConfig+0x1f0>)
 8001c06:	4313      	orrs	r3, r2
 8001c08:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c0a:	4b29      	ldr	r3, [pc, #164]	@ (8001cb0 <HAL_RCC_ClockConfig+0x1ec>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f003 0307 	and.w	r3, r3, #7
 8001c12:	683a      	ldr	r2, [r7, #0]
 8001c14:	429a      	cmp	r2, r3
 8001c16:	d210      	bcs.n	8001c3a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c18:	4b25      	ldr	r3, [pc, #148]	@ (8001cb0 <HAL_RCC_ClockConfig+0x1ec>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f023 0207 	bic.w	r2, r3, #7
 8001c20:	4923      	ldr	r1, [pc, #140]	@ (8001cb0 <HAL_RCC_ClockConfig+0x1ec>)
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	4313      	orrs	r3, r2
 8001c26:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c28:	4b21      	ldr	r3, [pc, #132]	@ (8001cb0 <HAL_RCC_ClockConfig+0x1ec>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f003 0307 	and.w	r3, r3, #7
 8001c30:	683a      	ldr	r2, [r7, #0]
 8001c32:	429a      	cmp	r2, r3
 8001c34:	d001      	beq.n	8001c3a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001c36:	2301      	movs	r3, #1
 8001c38:	e036      	b.n	8001ca8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f003 0304 	and.w	r3, r3, #4
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d008      	beq.n	8001c58 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c46:	4b1b      	ldr	r3, [pc, #108]	@ (8001cb4 <HAL_RCC_ClockConfig+0x1f0>)
 8001c48:	689b      	ldr	r3, [r3, #8]
 8001c4a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	68db      	ldr	r3, [r3, #12]
 8001c52:	4918      	ldr	r1, [pc, #96]	@ (8001cb4 <HAL_RCC_ClockConfig+0x1f0>)
 8001c54:	4313      	orrs	r3, r2
 8001c56:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f003 0308 	and.w	r3, r3, #8
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d009      	beq.n	8001c78 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c64:	4b13      	ldr	r3, [pc, #76]	@ (8001cb4 <HAL_RCC_ClockConfig+0x1f0>)
 8001c66:	689b      	ldr	r3, [r3, #8]
 8001c68:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	691b      	ldr	r3, [r3, #16]
 8001c70:	00db      	lsls	r3, r3, #3
 8001c72:	4910      	ldr	r1, [pc, #64]	@ (8001cb4 <HAL_RCC_ClockConfig+0x1f0>)
 8001c74:	4313      	orrs	r3, r2
 8001c76:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001c78:	f000 f824 	bl	8001cc4 <HAL_RCC_GetSysClockFreq>
 8001c7c:	4602      	mov	r2, r0
 8001c7e:	4b0d      	ldr	r3, [pc, #52]	@ (8001cb4 <HAL_RCC_ClockConfig+0x1f0>)
 8001c80:	689b      	ldr	r3, [r3, #8]
 8001c82:	091b      	lsrs	r3, r3, #4
 8001c84:	f003 030f 	and.w	r3, r3, #15
 8001c88:	490b      	ldr	r1, [pc, #44]	@ (8001cb8 <HAL_RCC_ClockConfig+0x1f4>)
 8001c8a:	5ccb      	ldrb	r3, [r1, r3]
 8001c8c:	f003 031f 	and.w	r3, r3, #31
 8001c90:	fa22 f303 	lsr.w	r3, r2, r3
 8001c94:	4a09      	ldr	r2, [pc, #36]	@ (8001cbc <HAL_RCC_ClockConfig+0x1f8>)
 8001c96:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001c98:	4b09      	ldr	r3, [pc, #36]	@ (8001cc0 <HAL_RCC_ClockConfig+0x1fc>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f7fe feb1 	bl	8000a04 <HAL_InitTick>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	72fb      	strb	r3, [r7, #11]

  return status;
 8001ca6:	7afb      	ldrb	r3, [r7, #11]
}
 8001ca8:	4618      	mov	r0, r3
 8001caa:	3710      	adds	r7, #16
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}
 8001cb0:	40022000 	.word	0x40022000
 8001cb4:	40021000 	.word	0x40021000
 8001cb8:	080041ac 	.word	0x080041ac
 8001cbc:	2000001c 	.word	0x2000001c
 8001cc0:	20000020 	.word	0x20000020

08001cc4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b089      	sub	sp, #36	@ 0x24
 8001cc8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	61fb      	str	r3, [r7, #28]
 8001cce:	2300      	movs	r3, #0
 8001cd0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001cd2:	4b3e      	ldr	r3, [pc, #248]	@ (8001dcc <HAL_RCC_GetSysClockFreq+0x108>)
 8001cd4:	689b      	ldr	r3, [r3, #8]
 8001cd6:	f003 030c 	and.w	r3, r3, #12
 8001cda:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001cdc:	4b3b      	ldr	r3, [pc, #236]	@ (8001dcc <HAL_RCC_GetSysClockFreq+0x108>)
 8001cde:	68db      	ldr	r3, [r3, #12]
 8001ce0:	f003 0303 	and.w	r3, r3, #3
 8001ce4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001ce6:	693b      	ldr	r3, [r7, #16]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d005      	beq.n	8001cf8 <HAL_RCC_GetSysClockFreq+0x34>
 8001cec:	693b      	ldr	r3, [r7, #16]
 8001cee:	2b0c      	cmp	r3, #12
 8001cf0:	d121      	bne.n	8001d36 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	2b01      	cmp	r3, #1
 8001cf6:	d11e      	bne.n	8001d36 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001cf8:	4b34      	ldr	r3, [pc, #208]	@ (8001dcc <HAL_RCC_GetSysClockFreq+0x108>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f003 0308 	and.w	r3, r3, #8
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d107      	bne.n	8001d14 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001d04:	4b31      	ldr	r3, [pc, #196]	@ (8001dcc <HAL_RCC_GetSysClockFreq+0x108>)
 8001d06:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001d0a:	0a1b      	lsrs	r3, r3, #8
 8001d0c:	f003 030f 	and.w	r3, r3, #15
 8001d10:	61fb      	str	r3, [r7, #28]
 8001d12:	e005      	b.n	8001d20 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001d14:	4b2d      	ldr	r3, [pc, #180]	@ (8001dcc <HAL_RCC_GetSysClockFreq+0x108>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	091b      	lsrs	r3, r3, #4
 8001d1a:	f003 030f 	and.w	r3, r3, #15
 8001d1e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001d20:	4a2b      	ldr	r2, [pc, #172]	@ (8001dd0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001d22:	69fb      	ldr	r3, [r7, #28]
 8001d24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d28:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001d2a:	693b      	ldr	r3, [r7, #16]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d10d      	bne.n	8001d4c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001d30:	69fb      	ldr	r3, [r7, #28]
 8001d32:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001d34:	e00a      	b.n	8001d4c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001d36:	693b      	ldr	r3, [r7, #16]
 8001d38:	2b04      	cmp	r3, #4
 8001d3a:	d102      	bne.n	8001d42 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001d3c:	4b25      	ldr	r3, [pc, #148]	@ (8001dd4 <HAL_RCC_GetSysClockFreq+0x110>)
 8001d3e:	61bb      	str	r3, [r7, #24]
 8001d40:	e004      	b.n	8001d4c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001d42:	693b      	ldr	r3, [r7, #16]
 8001d44:	2b08      	cmp	r3, #8
 8001d46:	d101      	bne.n	8001d4c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001d48:	4b23      	ldr	r3, [pc, #140]	@ (8001dd8 <HAL_RCC_GetSysClockFreq+0x114>)
 8001d4a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001d4c:	693b      	ldr	r3, [r7, #16]
 8001d4e:	2b0c      	cmp	r3, #12
 8001d50:	d134      	bne.n	8001dbc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001d52:	4b1e      	ldr	r3, [pc, #120]	@ (8001dcc <HAL_RCC_GetSysClockFreq+0x108>)
 8001d54:	68db      	ldr	r3, [r3, #12]
 8001d56:	f003 0303 	and.w	r3, r3, #3
 8001d5a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001d5c:	68bb      	ldr	r3, [r7, #8]
 8001d5e:	2b02      	cmp	r3, #2
 8001d60:	d003      	beq.n	8001d6a <HAL_RCC_GetSysClockFreq+0xa6>
 8001d62:	68bb      	ldr	r3, [r7, #8]
 8001d64:	2b03      	cmp	r3, #3
 8001d66:	d003      	beq.n	8001d70 <HAL_RCC_GetSysClockFreq+0xac>
 8001d68:	e005      	b.n	8001d76 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001d6a:	4b1a      	ldr	r3, [pc, #104]	@ (8001dd4 <HAL_RCC_GetSysClockFreq+0x110>)
 8001d6c:	617b      	str	r3, [r7, #20]
      break;
 8001d6e:	e005      	b.n	8001d7c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001d70:	4b19      	ldr	r3, [pc, #100]	@ (8001dd8 <HAL_RCC_GetSysClockFreq+0x114>)
 8001d72:	617b      	str	r3, [r7, #20]
      break;
 8001d74:	e002      	b.n	8001d7c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001d76:	69fb      	ldr	r3, [r7, #28]
 8001d78:	617b      	str	r3, [r7, #20]
      break;
 8001d7a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001d7c:	4b13      	ldr	r3, [pc, #76]	@ (8001dcc <HAL_RCC_GetSysClockFreq+0x108>)
 8001d7e:	68db      	ldr	r3, [r3, #12]
 8001d80:	091b      	lsrs	r3, r3, #4
 8001d82:	f003 0307 	and.w	r3, r3, #7
 8001d86:	3301      	adds	r3, #1
 8001d88:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001d8a:	4b10      	ldr	r3, [pc, #64]	@ (8001dcc <HAL_RCC_GetSysClockFreq+0x108>)
 8001d8c:	68db      	ldr	r3, [r3, #12]
 8001d8e:	0a1b      	lsrs	r3, r3, #8
 8001d90:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001d94:	697a      	ldr	r2, [r7, #20]
 8001d96:	fb03 f202 	mul.w	r2, r3, r2
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001da0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001da2:	4b0a      	ldr	r3, [pc, #40]	@ (8001dcc <HAL_RCC_GetSysClockFreq+0x108>)
 8001da4:	68db      	ldr	r3, [r3, #12]
 8001da6:	0e5b      	lsrs	r3, r3, #25
 8001da8:	f003 0303 	and.w	r3, r3, #3
 8001dac:	3301      	adds	r3, #1
 8001dae:	005b      	lsls	r3, r3, #1
 8001db0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001db2:	697a      	ldr	r2, [r7, #20]
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dba:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001dbc:	69bb      	ldr	r3, [r7, #24]
}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	3724      	adds	r7, #36	@ 0x24
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc8:	4770      	bx	lr
 8001dca:	bf00      	nop
 8001dcc:	40021000 	.word	0x40021000
 8001dd0:	080041c4 	.word	0x080041c4
 8001dd4:	00f42400 	.word	0x00f42400
 8001dd8:	007a1200 	.word	0x007a1200

08001ddc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001de0:	4b03      	ldr	r3, [pc, #12]	@ (8001df0 <HAL_RCC_GetHCLKFreq+0x14>)
 8001de2:	681b      	ldr	r3, [r3, #0]
}
 8001de4:	4618      	mov	r0, r3
 8001de6:	46bd      	mov	sp, r7
 8001de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dec:	4770      	bx	lr
 8001dee:	bf00      	nop
 8001df0:	2000001c 	.word	0x2000001c

08001df4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001df8:	f7ff fff0 	bl	8001ddc <HAL_RCC_GetHCLKFreq>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	4b06      	ldr	r3, [pc, #24]	@ (8001e18 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e00:	689b      	ldr	r3, [r3, #8]
 8001e02:	0a1b      	lsrs	r3, r3, #8
 8001e04:	f003 0307 	and.w	r3, r3, #7
 8001e08:	4904      	ldr	r1, [pc, #16]	@ (8001e1c <HAL_RCC_GetPCLK1Freq+0x28>)
 8001e0a:	5ccb      	ldrb	r3, [r1, r3]
 8001e0c:	f003 031f 	and.w	r3, r3, #31
 8001e10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	bd80      	pop	{r7, pc}
 8001e18:	40021000 	.word	0x40021000
 8001e1c:	080041bc 	.word	0x080041bc

08001e20 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001e24:	f7ff ffda 	bl	8001ddc <HAL_RCC_GetHCLKFreq>
 8001e28:	4602      	mov	r2, r0
 8001e2a:	4b06      	ldr	r3, [pc, #24]	@ (8001e44 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e2c:	689b      	ldr	r3, [r3, #8]
 8001e2e:	0adb      	lsrs	r3, r3, #11
 8001e30:	f003 0307 	and.w	r3, r3, #7
 8001e34:	4904      	ldr	r1, [pc, #16]	@ (8001e48 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001e36:	5ccb      	ldrb	r3, [r1, r3]
 8001e38:	f003 031f 	and.w	r3, r3, #31
 8001e3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	bd80      	pop	{r7, pc}
 8001e44:	40021000 	.word	0x40021000
 8001e48:	080041bc 	.word	0x080041bc

08001e4c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b086      	sub	sp, #24
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001e54:	2300      	movs	r3, #0
 8001e56:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001e58:	4b2a      	ldr	r3, [pc, #168]	@ (8001f04 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e5c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d003      	beq.n	8001e6c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001e64:	f7ff f9a0 	bl	80011a8 <HAL_PWREx_GetVoltageRange>
 8001e68:	6178      	str	r0, [r7, #20]
 8001e6a:	e014      	b.n	8001e96 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001e6c:	4b25      	ldr	r3, [pc, #148]	@ (8001f04 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e70:	4a24      	ldr	r2, [pc, #144]	@ (8001f04 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e72:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e76:	6593      	str	r3, [r2, #88]	@ 0x58
 8001e78:	4b22      	ldr	r3, [pc, #136]	@ (8001f04 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e7c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e80:	60fb      	str	r3, [r7, #12]
 8001e82:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001e84:	f7ff f990 	bl	80011a8 <HAL_PWREx_GetVoltageRange>
 8001e88:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001e8a:	4b1e      	ldr	r3, [pc, #120]	@ (8001f04 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e8e:	4a1d      	ldr	r2, [pc, #116]	@ (8001f04 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e90:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001e94:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e96:	697b      	ldr	r3, [r7, #20]
 8001e98:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001e9c:	d10b      	bne.n	8001eb6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2b80      	cmp	r3, #128	@ 0x80
 8001ea2:	d919      	bls.n	8001ed8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2ba0      	cmp	r3, #160	@ 0xa0
 8001ea8:	d902      	bls.n	8001eb0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001eaa:	2302      	movs	r3, #2
 8001eac:	613b      	str	r3, [r7, #16]
 8001eae:	e013      	b.n	8001ed8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	613b      	str	r3, [r7, #16]
 8001eb4:	e010      	b.n	8001ed8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2b80      	cmp	r3, #128	@ 0x80
 8001eba:	d902      	bls.n	8001ec2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001ebc:	2303      	movs	r3, #3
 8001ebe:	613b      	str	r3, [r7, #16]
 8001ec0:	e00a      	b.n	8001ed8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2b80      	cmp	r3, #128	@ 0x80
 8001ec6:	d102      	bne.n	8001ece <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001ec8:	2302      	movs	r3, #2
 8001eca:	613b      	str	r3, [r7, #16]
 8001ecc:	e004      	b.n	8001ed8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2b70      	cmp	r3, #112	@ 0x70
 8001ed2:	d101      	bne.n	8001ed8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001ed8:	4b0b      	ldr	r3, [pc, #44]	@ (8001f08 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f023 0207 	bic.w	r2, r3, #7
 8001ee0:	4909      	ldr	r1, [pc, #36]	@ (8001f08 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001ee2:	693b      	ldr	r3, [r7, #16]
 8001ee4:	4313      	orrs	r3, r2
 8001ee6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001ee8:	4b07      	ldr	r3, [pc, #28]	@ (8001f08 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f003 0307 	and.w	r3, r3, #7
 8001ef0:	693a      	ldr	r2, [r7, #16]
 8001ef2:	429a      	cmp	r2, r3
 8001ef4:	d001      	beq.n	8001efa <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	e000      	b.n	8001efc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001efa:	2300      	movs	r3, #0
}
 8001efc:	4618      	mov	r0, r3
 8001efe:	3718      	adds	r7, #24
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd80      	pop	{r7, pc}
 8001f04:	40021000 	.word	0x40021000
 8001f08:	40022000 	.word	0x40022000

08001f0c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b086      	sub	sp, #24
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001f14:	2300      	movs	r3, #0
 8001f16:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001f18:	2300      	movs	r3, #0
 8001f1a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d041      	beq.n	8001fac <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001f2c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8001f30:	d02a      	beq.n	8001f88 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8001f32:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8001f36:	d824      	bhi.n	8001f82 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001f38:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001f3c:	d008      	beq.n	8001f50 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001f3e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001f42:	d81e      	bhi.n	8001f82 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d00a      	beq.n	8001f5e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8001f48:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001f4c:	d010      	beq.n	8001f70 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8001f4e:	e018      	b.n	8001f82 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001f50:	4b86      	ldr	r3, [pc, #536]	@ (800216c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f52:	68db      	ldr	r3, [r3, #12]
 8001f54:	4a85      	ldr	r2, [pc, #532]	@ (800216c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f56:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f5a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001f5c:	e015      	b.n	8001f8a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	3304      	adds	r3, #4
 8001f62:	2100      	movs	r1, #0
 8001f64:	4618      	mov	r0, r3
 8001f66:	f000 facd 	bl	8002504 <RCCEx_PLLSAI1_Config>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001f6e:	e00c      	b.n	8001f8a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	3320      	adds	r3, #32
 8001f74:	2100      	movs	r1, #0
 8001f76:	4618      	mov	r0, r3
 8001f78:	f000 fbb6 	bl	80026e8 <RCCEx_PLLSAI2_Config>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001f80:	e003      	b.n	8001f8a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001f82:	2301      	movs	r3, #1
 8001f84:	74fb      	strb	r3, [r7, #19]
      break;
 8001f86:	e000      	b.n	8001f8a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8001f88:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001f8a:	7cfb      	ldrb	r3, [r7, #19]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d10b      	bne.n	8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001f90:	4b76      	ldr	r3, [pc, #472]	@ (800216c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f96:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001f9e:	4973      	ldr	r1, [pc, #460]	@ (800216c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fa0:	4313      	orrs	r3, r2
 8001fa2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8001fa6:	e001      	b.n	8001fac <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001fa8:	7cfb      	ldrb	r3, [r7, #19]
 8001faa:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d041      	beq.n	800203c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001fbc:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8001fc0:	d02a      	beq.n	8002018 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8001fc2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8001fc6:	d824      	bhi.n	8002012 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001fc8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001fcc:	d008      	beq.n	8001fe0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001fce:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001fd2:	d81e      	bhi.n	8002012 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d00a      	beq.n	8001fee <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8001fd8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001fdc:	d010      	beq.n	8002000 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001fde:	e018      	b.n	8002012 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001fe0:	4b62      	ldr	r3, [pc, #392]	@ (800216c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fe2:	68db      	ldr	r3, [r3, #12]
 8001fe4:	4a61      	ldr	r2, [pc, #388]	@ (800216c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fe6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001fea:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001fec:	e015      	b.n	800201a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	3304      	adds	r3, #4
 8001ff2:	2100      	movs	r1, #0
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f000 fa85 	bl	8002504 <RCCEx_PLLSAI1_Config>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001ffe:	e00c      	b.n	800201a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	3320      	adds	r3, #32
 8002004:	2100      	movs	r1, #0
 8002006:	4618      	mov	r0, r3
 8002008:	f000 fb6e 	bl	80026e8 <RCCEx_PLLSAI2_Config>
 800200c:	4603      	mov	r3, r0
 800200e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002010:	e003      	b.n	800201a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002012:	2301      	movs	r3, #1
 8002014:	74fb      	strb	r3, [r7, #19]
      break;
 8002016:	e000      	b.n	800201a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002018:	bf00      	nop
    }

    if(ret == HAL_OK)
 800201a:	7cfb      	ldrb	r3, [r7, #19]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d10b      	bne.n	8002038 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002020:	4b52      	ldr	r3, [pc, #328]	@ (800216c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002022:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002026:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800202e:	494f      	ldr	r1, [pc, #316]	@ (800216c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002030:	4313      	orrs	r3, r2
 8002032:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002036:	e001      	b.n	800203c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002038:	7cfb      	ldrb	r3, [r7, #19]
 800203a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002044:	2b00      	cmp	r3, #0
 8002046:	f000 80a0 	beq.w	800218a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800204a:	2300      	movs	r3, #0
 800204c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800204e:	4b47      	ldr	r3, [pc, #284]	@ (800216c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002050:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002052:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002056:	2b00      	cmp	r3, #0
 8002058:	d101      	bne.n	800205e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800205a:	2301      	movs	r3, #1
 800205c:	e000      	b.n	8002060 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800205e:	2300      	movs	r3, #0
 8002060:	2b00      	cmp	r3, #0
 8002062:	d00d      	beq.n	8002080 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002064:	4b41      	ldr	r3, [pc, #260]	@ (800216c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002066:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002068:	4a40      	ldr	r2, [pc, #256]	@ (800216c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800206a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800206e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002070:	4b3e      	ldr	r3, [pc, #248]	@ (800216c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002072:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002074:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002078:	60bb      	str	r3, [r7, #8]
 800207a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800207c:	2301      	movs	r3, #1
 800207e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002080:	4b3b      	ldr	r3, [pc, #236]	@ (8002170 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a3a      	ldr	r2, [pc, #232]	@ (8002170 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002086:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800208a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800208c:	f7fe fd0a 	bl	8000aa4 <HAL_GetTick>
 8002090:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002092:	e009      	b.n	80020a8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002094:	f7fe fd06 	bl	8000aa4 <HAL_GetTick>
 8002098:	4602      	mov	r2, r0
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	1ad3      	subs	r3, r2, r3
 800209e:	2b02      	cmp	r3, #2
 80020a0:	d902      	bls.n	80020a8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80020a2:	2303      	movs	r3, #3
 80020a4:	74fb      	strb	r3, [r7, #19]
        break;
 80020a6:	e005      	b.n	80020b4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80020a8:	4b31      	ldr	r3, [pc, #196]	@ (8002170 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d0ef      	beq.n	8002094 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80020b4:	7cfb      	ldrb	r3, [r7, #19]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d15c      	bne.n	8002174 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80020ba:	4b2c      	ldr	r3, [pc, #176]	@ (800216c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020c0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80020c4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80020c6:	697b      	ldr	r3, [r7, #20]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d01f      	beq.n	800210c <HAL_RCCEx_PeriphCLKConfig+0x200>
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020d2:	697a      	ldr	r2, [r7, #20]
 80020d4:	429a      	cmp	r2, r3
 80020d6:	d019      	beq.n	800210c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80020d8:	4b24      	ldr	r3, [pc, #144]	@ (800216c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020de:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80020e2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80020e4:	4b21      	ldr	r3, [pc, #132]	@ (800216c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020ea:	4a20      	ldr	r2, [pc, #128]	@ (800216c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80020f0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80020f4:	4b1d      	ldr	r3, [pc, #116]	@ (800216c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020fa:	4a1c      	ldr	r2, [pc, #112]	@ (800216c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020fc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002100:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002104:	4a19      	ldr	r2, [pc, #100]	@ (800216c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002106:	697b      	ldr	r3, [r7, #20]
 8002108:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	f003 0301 	and.w	r3, r3, #1
 8002112:	2b00      	cmp	r3, #0
 8002114:	d016      	beq.n	8002144 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002116:	f7fe fcc5 	bl	8000aa4 <HAL_GetTick>
 800211a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800211c:	e00b      	b.n	8002136 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800211e:	f7fe fcc1 	bl	8000aa4 <HAL_GetTick>
 8002122:	4602      	mov	r2, r0
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	1ad3      	subs	r3, r2, r3
 8002128:	f241 3288 	movw	r2, #5000	@ 0x1388
 800212c:	4293      	cmp	r3, r2
 800212e:	d902      	bls.n	8002136 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002130:	2303      	movs	r3, #3
 8002132:	74fb      	strb	r3, [r7, #19]
            break;
 8002134:	e006      	b.n	8002144 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002136:	4b0d      	ldr	r3, [pc, #52]	@ (800216c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002138:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800213c:	f003 0302 	and.w	r3, r3, #2
 8002140:	2b00      	cmp	r3, #0
 8002142:	d0ec      	beq.n	800211e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002144:	7cfb      	ldrb	r3, [r7, #19]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d10c      	bne.n	8002164 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800214a:	4b08      	ldr	r3, [pc, #32]	@ (800216c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800214c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002150:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800215a:	4904      	ldr	r1, [pc, #16]	@ (800216c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800215c:	4313      	orrs	r3, r2
 800215e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002162:	e009      	b.n	8002178 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002164:	7cfb      	ldrb	r3, [r7, #19]
 8002166:	74bb      	strb	r3, [r7, #18]
 8002168:	e006      	b.n	8002178 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800216a:	bf00      	nop
 800216c:	40021000 	.word	0x40021000
 8002170:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002174:	7cfb      	ldrb	r3, [r7, #19]
 8002176:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002178:	7c7b      	ldrb	r3, [r7, #17]
 800217a:	2b01      	cmp	r3, #1
 800217c:	d105      	bne.n	800218a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800217e:	4ba6      	ldr	r3, [pc, #664]	@ (8002418 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002180:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002182:	4aa5      	ldr	r2, [pc, #660]	@ (8002418 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002184:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002188:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f003 0301 	and.w	r3, r3, #1
 8002192:	2b00      	cmp	r3, #0
 8002194:	d00a      	beq.n	80021ac <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002196:	4ba0      	ldr	r3, [pc, #640]	@ (8002418 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002198:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800219c:	f023 0203 	bic.w	r2, r3, #3
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021a4:	499c      	ldr	r1, [pc, #624]	@ (8002418 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80021a6:	4313      	orrs	r3, r2
 80021a8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f003 0302 	and.w	r3, r3, #2
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d00a      	beq.n	80021ce <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80021b8:	4b97      	ldr	r3, [pc, #604]	@ (8002418 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80021ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021be:	f023 020c 	bic.w	r2, r3, #12
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021c6:	4994      	ldr	r1, [pc, #592]	@ (8002418 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80021c8:	4313      	orrs	r3, r2
 80021ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f003 0304 	and.w	r3, r3, #4
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d00a      	beq.n	80021f0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80021da:	4b8f      	ldr	r3, [pc, #572]	@ (8002418 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80021dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021e0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021e8:	498b      	ldr	r1, [pc, #556]	@ (8002418 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80021ea:	4313      	orrs	r3, r2
 80021ec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f003 0308 	and.w	r3, r3, #8
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d00a      	beq.n	8002212 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80021fc:	4b86      	ldr	r3, [pc, #536]	@ (8002418 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80021fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002202:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800220a:	4983      	ldr	r1, [pc, #524]	@ (8002418 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800220c:	4313      	orrs	r3, r2
 800220e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f003 0310 	and.w	r3, r3, #16
 800221a:	2b00      	cmp	r3, #0
 800221c:	d00a      	beq.n	8002234 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800221e:	4b7e      	ldr	r3, [pc, #504]	@ (8002418 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002220:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002224:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800222c:	497a      	ldr	r1, [pc, #488]	@ (8002418 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800222e:	4313      	orrs	r3, r2
 8002230:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f003 0320 	and.w	r3, r3, #32
 800223c:	2b00      	cmp	r3, #0
 800223e:	d00a      	beq.n	8002256 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002240:	4b75      	ldr	r3, [pc, #468]	@ (8002418 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002242:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002246:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800224e:	4972      	ldr	r1, [pc, #456]	@ (8002418 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002250:	4313      	orrs	r3, r2
 8002252:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800225e:	2b00      	cmp	r3, #0
 8002260:	d00a      	beq.n	8002278 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002262:	4b6d      	ldr	r3, [pc, #436]	@ (8002418 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002264:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002268:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002270:	4969      	ldr	r1, [pc, #420]	@ (8002418 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002272:	4313      	orrs	r3, r2
 8002274:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002280:	2b00      	cmp	r3, #0
 8002282:	d00a      	beq.n	800229a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002284:	4b64      	ldr	r3, [pc, #400]	@ (8002418 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002286:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800228a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002292:	4961      	ldr	r1, [pc, #388]	@ (8002418 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002294:	4313      	orrs	r3, r2
 8002296:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d00a      	beq.n	80022bc <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80022a6:	4b5c      	ldr	r3, [pc, #368]	@ (8002418 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80022a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022ac:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80022b4:	4958      	ldr	r1, [pc, #352]	@ (8002418 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80022b6:	4313      	orrs	r3, r2
 80022b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d00a      	beq.n	80022de <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80022c8:	4b53      	ldr	r3, [pc, #332]	@ (8002418 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80022ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022ce:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022d6:	4950      	ldr	r1, [pc, #320]	@ (8002418 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80022d8:	4313      	orrs	r3, r2
 80022da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d00a      	beq.n	8002300 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80022ea:	4b4b      	ldr	r3, [pc, #300]	@ (8002418 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80022ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022f0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022f8:	4947      	ldr	r1, [pc, #284]	@ (8002418 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80022fa:	4313      	orrs	r3, r2
 80022fc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002308:	2b00      	cmp	r3, #0
 800230a:	d00a      	beq.n	8002322 <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800230c:	4b42      	ldr	r3, [pc, #264]	@ (8002418 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800230e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002312:	f023 0203 	bic.w	r2, r3, #3
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800231a:	493f      	ldr	r1, [pc, #252]	@ (8002418 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800231c:	4313      	orrs	r3, r2
 800231e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800232a:	2b00      	cmp	r3, #0
 800232c:	d028      	beq.n	8002380 <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800232e:	4b3a      	ldr	r3, [pc, #232]	@ (8002418 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002330:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002334:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800233c:	4936      	ldr	r1, [pc, #216]	@ (8002418 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800233e:	4313      	orrs	r3, r2
 8002340:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002348:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800234c:	d106      	bne.n	800235c <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800234e:	4b32      	ldr	r3, [pc, #200]	@ (8002418 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002350:	68db      	ldr	r3, [r3, #12]
 8002352:	4a31      	ldr	r2, [pc, #196]	@ (8002418 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002354:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002358:	60d3      	str	r3, [r2, #12]
 800235a:	e011      	b.n	8002380 <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002360:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002364:	d10c      	bne.n	8002380 <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	3304      	adds	r3, #4
 800236a:	2101      	movs	r1, #1
 800236c:	4618      	mov	r0, r3
 800236e:	f000 f8c9 	bl	8002504 <RCCEx_PLLSAI1_Config>
 8002372:	4603      	mov	r3, r0
 8002374:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002376:	7cfb      	ldrb	r3, [r7, #19]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d001      	beq.n	8002380 <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 800237c:	7cfb      	ldrb	r3, [r7, #19]
 800237e:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002388:	2b00      	cmp	r3, #0
 800238a:	d028      	beq.n	80023de <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800238c:	4b22      	ldr	r3, [pc, #136]	@ (8002418 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800238e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002392:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800239a:	491f      	ldr	r1, [pc, #124]	@ (8002418 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800239c:	4313      	orrs	r3, r2
 800239e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80023a6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80023aa:	d106      	bne.n	80023ba <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80023ac:	4b1a      	ldr	r3, [pc, #104]	@ (8002418 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80023ae:	68db      	ldr	r3, [r3, #12]
 80023b0:	4a19      	ldr	r2, [pc, #100]	@ (8002418 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80023b2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80023b6:	60d3      	str	r3, [r2, #12]
 80023b8:	e011      	b.n	80023de <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80023be:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80023c2:	d10c      	bne.n	80023de <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	3304      	adds	r3, #4
 80023c8:	2101      	movs	r1, #1
 80023ca:	4618      	mov	r0, r3
 80023cc:	f000 f89a 	bl	8002504 <RCCEx_PLLSAI1_Config>
 80023d0:	4603      	mov	r3, r0
 80023d2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80023d4:	7cfb      	ldrb	r3, [r7, #19]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d001      	beq.n	80023de <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 80023da:	7cfb      	ldrb	r3, [r7, #19]
 80023dc:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d02a      	beq.n	8002440 <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80023ea:	4b0b      	ldr	r3, [pc, #44]	@ (8002418 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80023ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023f0:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80023f8:	4907      	ldr	r1, [pc, #28]	@ (8002418 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80023fa:	4313      	orrs	r3, r2
 80023fc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002404:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002408:	d108      	bne.n	800241c <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800240a:	4b03      	ldr	r3, [pc, #12]	@ (8002418 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800240c:	68db      	ldr	r3, [r3, #12]
 800240e:	4a02      	ldr	r2, [pc, #8]	@ (8002418 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002410:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002414:	60d3      	str	r3, [r2, #12]
 8002416:	e013      	b.n	8002440 <HAL_RCCEx_PeriphCLKConfig+0x534>
 8002418:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002420:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002424:	d10c      	bne.n	8002440 <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	3304      	adds	r3, #4
 800242a:	2101      	movs	r1, #1
 800242c:	4618      	mov	r0, r3
 800242e:	f000 f869 	bl	8002504 <RCCEx_PLLSAI1_Config>
 8002432:	4603      	mov	r3, r0
 8002434:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002436:	7cfb      	ldrb	r3, [r7, #19]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d001      	beq.n	8002440 <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 800243c:	7cfb      	ldrb	r3, [r7, #19]
 800243e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002448:	2b00      	cmp	r3, #0
 800244a:	d02f      	beq.n	80024ac <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800244c:	4b2c      	ldr	r3, [pc, #176]	@ (8002500 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800244e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002452:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800245a:	4929      	ldr	r1, [pc, #164]	@ (8002500 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800245c:	4313      	orrs	r3, r2
 800245e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002466:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800246a:	d10d      	bne.n	8002488 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	3304      	adds	r3, #4
 8002470:	2102      	movs	r1, #2
 8002472:	4618      	mov	r0, r3
 8002474:	f000 f846 	bl	8002504 <RCCEx_PLLSAI1_Config>
 8002478:	4603      	mov	r3, r0
 800247a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800247c:	7cfb      	ldrb	r3, [r7, #19]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d014      	beq.n	80024ac <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8002482:	7cfb      	ldrb	r3, [r7, #19]
 8002484:	74bb      	strb	r3, [r7, #18]
 8002486:	e011      	b.n	80024ac <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800248c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002490:	d10c      	bne.n	80024ac <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	3320      	adds	r3, #32
 8002496:	2102      	movs	r1, #2
 8002498:	4618      	mov	r0, r3
 800249a:	f000 f925 	bl	80026e8 <RCCEx_PLLSAI2_Config>
 800249e:	4603      	mov	r3, r0
 80024a0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80024a2:	7cfb      	ldrb	r3, [r7, #19]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d001      	beq.n	80024ac <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 80024a8:	7cfb      	ldrb	r3, [r7, #19]
 80024aa:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d00b      	beq.n	80024d0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80024b8:	4b11      	ldr	r3, [pc, #68]	@ (8002500 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80024ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024be:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80024c8:	490d      	ldr	r1, [pc, #52]	@ (8002500 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80024ca:	4313      	orrs	r3, r2
 80024cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d00b      	beq.n	80024f4 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80024dc:	4b08      	ldr	r3, [pc, #32]	@ (8002500 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80024de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024e2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80024ec:	4904      	ldr	r1, [pc, #16]	@ (8002500 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80024ee:	4313      	orrs	r3, r2
 80024f0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80024f4:	7cbb      	ldrb	r3, [r7, #18]
}
 80024f6:	4618      	mov	r0, r3
 80024f8:	3718      	adds	r7, #24
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	bf00      	nop
 8002500:	40021000 	.word	0x40021000

08002504 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b084      	sub	sp, #16
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
 800250c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800250e:	2300      	movs	r3, #0
 8002510:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002512:	4b74      	ldr	r3, [pc, #464]	@ (80026e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002514:	68db      	ldr	r3, [r3, #12]
 8002516:	f003 0303 	and.w	r3, r3, #3
 800251a:	2b00      	cmp	r3, #0
 800251c:	d018      	beq.n	8002550 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800251e:	4b71      	ldr	r3, [pc, #452]	@ (80026e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002520:	68db      	ldr	r3, [r3, #12]
 8002522:	f003 0203 	and.w	r2, r3, #3
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	429a      	cmp	r2, r3
 800252c:	d10d      	bne.n	800254a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
       ||
 8002532:	2b00      	cmp	r3, #0
 8002534:	d009      	beq.n	800254a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002536:	4b6b      	ldr	r3, [pc, #428]	@ (80026e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002538:	68db      	ldr	r3, [r3, #12]
 800253a:	091b      	lsrs	r3, r3, #4
 800253c:	f003 0307 	and.w	r3, r3, #7
 8002540:	1c5a      	adds	r2, r3, #1
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	685b      	ldr	r3, [r3, #4]
       ||
 8002546:	429a      	cmp	r2, r3
 8002548:	d047      	beq.n	80025da <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800254a:	2301      	movs	r3, #1
 800254c:	73fb      	strb	r3, [r7, #15]
 800254e:	e044      	b.n	80025da <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	2b03      	cmp	r3, #3
 8002556:	d018      	beq.n	800258a <RCCEx_PLLSAI1_Config+0x86>
 8002558:	2b03      	cmp	r3, #3
 800255a:	d825      	bhi.n	80025a8 <RCCEx_PLLSAI1_Config+0xa4>
 800255c:	2b01      	cmp	r3, #1
 800255e:	d002      	beq.n	8002566 <RCCEx_PLLSAI1_Config+0x62>
 8002560:	2b02      	cmp	r3, #2
 8002562:	d009      	beq.n	8002578 <RCCEx_PLLSAI1_Config+0x74>
 8002564:	e020      	b.n	80025a8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002566:	4b5f      	ldr	r3, [pc, #380]	@ (80026e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f003 0302 	and.w	r3, r3, #2
 800256e:	2b00      	cmp	r3, #0
 8002570:	d11d      	bne.n	80025ae <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002572:	2301      	movs	r3, #1
 8002574:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002576:	e01a      	b.n	80025ae <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002578:	4b5a      	ldr	r3, [pc, #360]	@ (80026e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002580:	2b00      	cmp	r3, #0
 8002582:	d116      	bne.n	80025b2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002584:	2301      	movs	r3, #1
 8002586:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002588:	e013      	b.n	80025b2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800258a:	4b56      	ldr	r3, [pc, #344]	@ (80026e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002592:	2b00      	cmp	r3, #0
 8002594:	d10f      	bne.n	80025b6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002596:	4b53      	ldr	r3, [pc, #332]	@ (80026e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d109      	bne.n	80025b6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80025a2:	2301      	movs	r3, #1
 80025a4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80025a6:	e006      	b.n	80025b6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80025a8:	2301      	movs	r3, #1
 80025aa:	73fb      	strb	r3, [r7, #15]
      break;
 80025ac:	e004      	b.n	80025b8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80025ae:	bf00      	nop
 80025b0:	e002      	b.n	80025b8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80025b2:	bf00      	nop
 80025b4:	e000      	b.n	80025b8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80025b6:	bf00      	nop
    }

    if(status == HAL_OK)
 80025b8:	7bfb      	ldrb	r3, [r7, #15]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d10d      	bne.n	80025da <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80025be:	4b49      	ldr	r3, [pc, #292]	@ (80026e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025c0:	68db      	ldr	r3, [r3, #12]
 80025c2:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6819      	ldr	r1, [r3, #0]
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	3b01      	subs	r3, #1
 80025d0:	011b      	lsls	r3, r3, #4
 80025d2:	430b      	orrs	r3, r1
 80025d4:	4943      	ldr	r1, [pc, #268]	@ (80026e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025d6:	4313      	orrs	r3, r2
 80025d8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80025da:	7bfb      	ldrb	r3, [r7, #15]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d17c      	bne.n	80026da <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80025e0:	4b40      	ldr	r3, [pc, #256]	@ (80026e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a3f      	ldr	r2, [pc, #252]	@ (80026e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025e6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80025ea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80025ec:	f7fe fa5a 	bl	8000aa4 <HAL_GetTick>
 80025f0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80025f2:	e009      	b.n	8002608 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80025f4:	f7fe fa56 	bl	8000aa4 <HAL_GetTick>
 80025f8:	4602      	mov	r2, r0
 80025fa:	68bb      	ldr	r3, [r7, #8]
 80025fc:	1ad3      	subs	r3, r2, r3
 80025fe:	2b02      	cmp	r3, #2
 8002600:	d902      	bls.n	8002608 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002602:	2303      	movs	r3, #3
 8002604:	73fb      	strb	r3, [r7, #15]
        break;
 8002606:	e005      	b.n	8002614 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002608:	4b36      	ldr	r3, [pc, #216]	@ (80026e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002610:	2b00      	cmp	r3, #0
 8002612:	d1ef      	bne.n	80025f4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002614:	7bfb      	ldrb	r3, [r7, #15]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d15f      	bne.n	80026da <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d110      	bne.n	8002642 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002620:	4b30      	ldr	r3, [pc, #192]	@ (80026e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002622:	691b      	ldr	r3, [r3, #16]
 8002624:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8002628:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800262c:	687a      	ldr	r2, [r7, #4]
 800262e:	6892      	ldr	r2, [r2, #8]
 8002630:	0211      	lsls	r1, r2, #8
 8002632:	687a      	ldr	r2, [r7, #4]
 8002634:	68d2      	ldr	r2, [r2, #12]
 8002636:	06d2      	lsls	r2, r2, #27
 8002638:	430a      	orrs	r2, r1
 800263a:	492a      	ldr	r1, [pc, #168]	@ (80026e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800263c:	4313      	orrs	r3, r2
 800263e:	610b      	str	r3, [r1, #16]
 8002640:	e027      	b.n	8002692 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	2b01      	cmp	r3, #1
 8002646:	d112      	bne.n	800266e <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002648:	4b26      	ldr	r3, [pc, #152]	@ (80026e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800264a:	691b      	ldr	r3, [r3, #16]
 800264c:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8002650:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002654:	687a      	ldr	r2, [r7, #4]
 8002656:	6892      	ldr	r2, [r2, #8]
 8002658:	0211      	lsls	r1, r2, #8
 800265a:	687a      	ldr	r2, [r7, #4]
 800265c:	6912      	ldr	r2, [r2, #16]
 800265e:	0852      	lsrs	r2, r2, #1
 8002660:	3a01      	subs	r2, #1
 8002662:	0552      	lsls	r2, r2, #21
 8002664:	430a      	orrs	r2, r1
 8002666:	491f      	ldr	r1, [pc, #124]	@ (80026e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002668:	4313      	orrs	r3, r2
 800266a:	610b      	str	r3, [r1, #16]
 800266c:	e011      	b.n	8002692 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800266e:	4b1d      	ldr	r3, [pc, #116]	@ (80026e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002670:	691b      	ldr	r3, [r3, #16]
 8002672:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002676:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800267a:	687a      	ldr	r2, [r7, #4]
 800267c:	6892      	ldr	r2, [r2, #8]
 800267e:	0211      	lsls	r1, r2, #8
 8002680:	687a      	ldr	r2, [r7, #4]
 8002682:	6952      	ldr	r2, [r2, #20]
 8002684:	0852      	lsrs	r2, r2, #1
 8002686:	3a01      	subs	r2, #1
 8002688:	0652      	lsls	r2, r2, #25
 800268a:	430a      	orrs	r2, r1
 800268c:	4915      	ldr	r1, [pc, #84]	@ (80026e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800268e:	4313      	orrs	r3, r2
 8002690:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002692:	4b14      	ldr	r3, [pc, #80]	@ (80026e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4a13      	ldr	r2, [pc, #76]	@ (80026e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002698:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800269c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800269e:	f7fe fa01 	bl	8000aa4 <HAL_GetTick>
 80026a2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80026a4:	e009      	b.n	80026ba <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80026a6:	f7fe f9fd 	bl	8000aa4 <HAL_GetTick>
 80026aa:	4602      	mov	r2, r0
 80026ac:	68bb      	ldr	r3, [r7, #8]
 80026ae:	1ad3      	subs	r3, r2, r3
 80026b0:	2b02      	cmp	r3, #2
 80026b2:	d902      	bls.n	80026ba <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80026b4:	2303      	movs	r3, #3
 80026b6:	73fb      	strb	r3, [r7, #15]
          break;
 80026b8:	e005      	b.n	80026c6 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80026ba:	4b0a      	ldr	r3, [pc, #40]	@ (80026e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d0ef      	beq.n	80026a6 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80026c6:	7bfb      	ldrb	r3, [r7, #15]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d106      	bne.n	80026da <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80026cc:	4b05      	ldr	r3, [pc, #20]	@ (80026e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026ce:	691a      	ldr	r2, [r3, #16]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	699b      	ldr	r3, [r3, #24]
 80026d4:	4903      	ldr	r1, [pc, #12]	@ (80026e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026d6:	4313      	orrs	r3, r2
 80026d8:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80026da:	7bfb      	ldrb	r3, [r7, #15]
}
 80026dc:	4618      	mov	r0, r3
 80026de:	3710      	adds	r7, #16
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bd80      	pop	{r7, pc}
 80026e4:	40021000 	.word	0x40021000

080026e8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b084      	sub	sp, #16
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
 80026f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80026f2:	2300      	movs	r3, #0
 80026f4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80026f6:	4b69      	ldr	r3, [pc, #420]	@ (800289c <RCCEx_PLLSAI2_Config+0x1b4>)
 80026f8:	68db      	ldr	r3, [r3, #12]
 80026fa:	f003 0303 	and.w	r3, r3, #3
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d018      	beq.n	8002734 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002702:	4b66      	ldr	r3, [pc, #408]	@ (800289c <RCCEx_PLLSAI2_Config+0x1b4>)
 8002704:	68db      	ldr	r3, [r3, #12]
 8002706:	f003 0203 	and.w	r2, r3, #3
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	429a      	cmp	r2, r3
 8002710:	d10d      	bne.n	800272e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
       ||
 8002716:	2b00      	cmp	r3, #0
 8002718:	d009      	beq.n	800272e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800271a:	4b60      	ldr	r3, [pc, #384]	@ (800289c <RCCEx_PLLSAI2_Config+0x1b4>)
 800271c:	68db      	ldr	r3, [r3, #12]
 800271e:	091b      	lsrs	r3, r3, #4
 8002720:	f003 0307 	and.w	r3, r3, #7
 8002724:	1c5a      	adds	r2, r3, #1
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	685b      	ldr	r3, [r3, #4]
       ||
 800272a:	429a      	cmp	r2, r3
 800272c:	d047      	beq.n	80027be <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800272e:	2301      	movs	r3, #1
 8002730:	73fb      	strb	r3, [r7, #15]
 8002732:	e044      	b.n	80027be <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	2b03      	cmp	r3, #3
 800273a:	d018      	beq.n	800276e <RCCEx_PLLSAI2_Config+0x86>
 800273c:	2b03      	cmp	r3, #3
 800273e:	d825      	bhi.n	800278c <RCCEx_PLLSAI2_Config+0xa4>
 8002740:	2b01      	cmp	r3, #1
 8002742:	d002      	beq.n	800274a <RCCEx_PLLSAI2_Config+0x62>
 8002744:	2b02      	cmp	r3, #2
 8002746:	d009      	beq.n	800275c <RCCEx_PLLSAI2_Config+0x74>
 8002748:	e020      	b.n	800278c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800274a:	4b54      	ldr	r3, [pc, #336]	@ (800289c <RCCEx_PLLSAI2_Config+0x1b4>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f003 0302 	and.w	r3, r3, #2
 8002752:	2b00      	cmp	r3, #0
 8002754:	d11d      	bne.n	8002792 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002756:	2301      	movs	r3, #1
 8002758:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800275a:	e01a      	b.n	8002792 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800275c:	4b4f      	ldr	r3, [pc, #316]	@ (800289c <RCCEx_PLLSAI2_Config+0x1b4>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002764:	2b00      	cmp	r3, #0
 8002766:	d116      	bne.n	8002796 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002768:	2301      	movs	r3, #1
 800276a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800276c:	e013      	b.n	8002796 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800276e:	4b4b      	ldr	r3, [pc, #300]	@ (800289c <RCCEx_PLLSAI2_Config+0x1b4>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002776:	2b00      	cmp	r3, #0
 8002778:	d10f      	bne.n	800279a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800277a:	4b48      	ldr	r3, [pc, #288]	@ (800289c <RCCEx_PLLSAI2_Config+0x1b4>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002782:	2b00      	cmp	r3, #0
 8002784:	d109      	bne.n	800279a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002786:	2301      	movs	r3, #1
 8002788:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800278a:	e006      	b.n	800279a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800278c:	2301      	movs	r3, #1
 800278e:	73fb      	strb	r3, [r7, #15]
      break;
 8002790:	e004      	b.n	800279c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002792:	bf00      	nop
 8002794:	e002      	b.n	800279c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002796:	bf00      	nop
 8002798:	e000      	b.n	800279c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800279a:	bf00      	nop
    }

    if(status == HAL_OK)
 800279c:	7bfb      	ldrb	r3, [r7, #15]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d10d      	bne.n	80027be <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80027a2:	4b3e      	ldr	r3, [pc, #248]	@ (800289c <RCCEx_PLLSAI2_Config+0x1b4>)
 80027a4:	68db      	ldr	r3, [r3, #12]
 80027a6:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6819      	ldr	r1, [r3, #0]
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	3b01      	subs	r3, #1
 80027b4:	011b      	lsls	r3, r3, #4
 80027b6:	430b      	orrs	r3, r1
 80027b8:	4938      	ldr	r1, [pc, #224]	@ (800289c <RCCEx_PLLSAI2_Config+0x1b4>)
 80027ba:	4313      	orrs	r3, r2
 80027bc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80027be:	7bfb      	ldrb	r3, [r7, #15]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d166      	bne.n	8002892 <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80027c4:	4b35      	ldr	r3, [pc, #212]	@ (800289c <RCCEx_PLLSAI2_Config+0x1b4>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4a34      	ldr	r2, [pc, #208]	@ (800289c <RCCEx_PLLSAI2_Config+0x1b4>)
 80027ca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80027ce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027d0:	f7fe f968 	bl	8000aa4 <HAL_GetTick>
 80027d4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80027d6:	e009      	b.n	80027ec <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80027d8:	f7fe f964 	bl	8000aa4 <HAL_GetTick>
 80027dc:	4602      	mov	r2, r0
 80027de:	68bb      	ldr	r3, [r7, #8]
 80027e0:	1ad3      	subs	r3, r2, r3
 80027e2:	2b02      	cmp	r3, #2
 80027e4:	d902      	bls.n	80027ec <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80027e6:	2303      	movs	r3, #3
 80027e8:	73fb      	strb	r3, [r7, #15]
        break;
 80027ea:	e005      	b.n	80027f8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80027ec:	4b2b      	ldr	r3, [pc, #172]	@ (800289c <RCCEx_PLLSAI2_Config+0x1b4>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d1ef      	bne.n	80027d8 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80027f8:	7bfb      	ldrb	r3, [r7, #15]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d149      	bne.n	8002892 <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d110      	bne.n	8002826 <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002804:	4b25      	ldr	r3, [pc, #148]	@ (800289c <RCCEx_PLLSAI2_Config+0x1b4>)
 8002806:	695b      	ldr	r3, [r3, #20]
 8002808:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 800280c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002810:	687a      	ldr	r2, [r7, #4]
 8002812:	6892      	ldr	r2, [r2, #8]
 8002814:	0211      	lsls	r1, r2, #8
 8002816:	687a      	ldr	r2, [r7, #4]
 8002818:	68d2      	ldr	r2, [r2, #12]
 800281a:	06d2      	lsls	r2, r2, #27
 800281c:	430a      	orrs	r2, r1
 800281e:	491f      	ldr	r1, [pc, #124]	@ (800289c <RCCEx_PLLSAI2_Config+0x1b4>)
 8002820:	4313      	orrs	r3, r2
 8002822:	614b      	str	r3, [r1, #20]
 8002824:	e011      	b.n	800284a <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002826:	4b1d      	ldr	r3, [pc, #116]	@ (800289c <RCCEx_PLLSAI2_Config+0x1b4>)
 8002828:	695b      	ldr	r3, [r3, #20]
 800282a:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800282e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002832:	687a      	ldr	r2, [r7, #4]
 8002834:	6892      	ldr	r2, [r2, #8]
 8002836:	0211      	lsls	r1, r2, #8
 8002838:	687a      	ldr	r2, [r7, #4]
 800283a:	6912      	ldr	r2, [r2, #16]
 800283c:	0852      	lsrs	r2, r2, #1
 800283e:	3a01      	subs	r2, #1
 8002840:	0652      	lsls	r2, r2, #25
 8002842:	430a      	orrs	r2, r1
 8002844:	4915      	ldr	r1, [pc, #84]	@ (800289c <RCCEx_PLLSAI2_Config+0x1b4>)
 8002846:	4313      	orrs	r3, r2
 8002848:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800284a:	4b14      	ldr	r3, [pc, #80]	@ (800289c <RCCEx_PLLSAI2_Config+0x1b4>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4a13      	ldr	r2, [pc, #76]	@ (800289c <RCCEx_PLLSAI2_Config+0x1b4>)
 8002850:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002854:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002856:	f7fe f925 	bl	8000aa4 <HAL_GetTick>
 800285a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800285c:	e009      	b.n	8002872 <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800285e:	f7fe f921 	bl	8000aa4 <HAL_GetTick>
 8002862:	4602      	mov	r2, r0
 8002864:	68bb      	ldr	r3, [r7, #8]
 8002866:	1ad3      	subs	r3, r2, r3
 8002868:	2b02      	cmp	r3, #2
 800286a:	d902      	bls.n	8002872 <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 800286c:	2303      	movs	r3, #3
 800286e:	73fb      	strb	r3, [r7, #15]
          break;
 8002870:	e005      	b.n	800287e <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002872:	4b0a      	ldr	r3, [pc, #40]	@ (800289c <RCCEx_PLLSAI2_Config+0x1b4>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800287a:	2b00      	cmp	r3, #0
 800287c:	d0ef      	beq.n	800285e <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 800287e:	7bfb      	ldrb	r3, [r7, #15]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d106      	bne.n	8002892 <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002884:	4b05      	ldr	r3, [pc, #20]	@ (800289c <RCCEx_PLLSAI2_Config+0x1b4>)
 8002886:	695a      	ldr	r2, [r3, #20]
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	695b      	ldr	r3, [r3, #20]
 800288c:	4903      	ldr	r1, [pc, #12]	@ (800289c <RCCEx_PLLSAI2_Config+0x1b4>)
 800288e:	4313      	orrs	r3, r2
 8002890:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002892:	7bfb      	ldrb	r3, [r7, #15]
}
 8002894:	4618      	mov	r0, r3
 8002896:	3710      	adds	r7, #16
 8002898:	46bd      	mov	sp, r7
 800289a:	bd80      	pop	{r7, pc}
 800289c:	40021000 	.word	0x40021000

080028a0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b082      	sub	sp, #8
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d101      	bne.n	80028b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80028ae:	2301      	movs	r3, #1
 80028b0:	e040      	b.n	8002934 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d106      	bne.n	80028c8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2200      	movs	r2, #0
 80028be:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80028c2:	6878      	ldr	r0, [r7, #4]
 80028c4:	f7fd ffa8 	bl	8000818 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2224      	movs	r2, #36	@ 0x24
 80028cc:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	681a      	ldr	r2, [r3, #0]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f022 0201 	bic.w	r2, r2, #1
 80028dc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d002      	beq.n	80028ec <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80028e6:	6878      	ldr	r0, [r7, #4]
 80028e8:	f000 fe8a 	bl	8003600 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80028ec:	6878      	ldr	r0, [r7, #4]
 80028ee:	f000 fbcf 	bl	8003090 <UART_SetConfig>
 80028f2:	4603      	mov	r3, r0
 80028f4:	2b01      	cmp	r3, #1
 80028f6:	d101      	bne.n	80028fc <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80028f8:	2301      	movs	r3, #1
 80028fa:	e01b      	b.n	8002934 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	685a      	ldr	r2, [r3, #4]
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800290a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	689a      	ldr	r2, [r3, #8]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800291a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	681a      	ldr	r2, [r3, #0]
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f042 0201 	orr.w	r2, r2, #1
 800292a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800292c:	6878      	ldr	r0, [r7, #4]
 800292e:	f000 ff09 	bl	8003744 <UART_CheckIdleState>
 8002932:	4603      	mov	r3, r0
}
 8002934:	4618      	mov	r0, r3
 8002936:	3708      	adds	r7, #8
 8002938:	46bd      	mov	sp, r7
 800293a:	bd80      	pop	{r7, pc}

0800293c <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800293c:	b480      	push	{r7}
 800293e:	b08b      	sub	sp, #44	@ 0x2c
 8002940:	af00      	add	r7, sp, #0
 8002942:	60f8      	str	r0, [r7, #12]
 8002944:	60b9      	str	r1, [r7, #8]
 8002946:	4613      	mov	r3, r2
 8002948:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800294e:	2b20      	cmp	r3, #32
 8002950:	d147      	bne.n	80029e2 <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 8002952:	68bb      	ldr	r3, [r7, #8]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d002      	beq.n	800295e <HAL_UART_Transmit_IT+0x22>
 8002958:	88fb      	ldrh	r3, [r7, #6]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d101      	bne.n	8002962 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 800295e:	2301      	movs	r3, #1
 8002960:	e040      	b.n	80029e4 <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	68ba      	ldr	r2, [r7, #8]
 8002966:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	88fa      	ldrh	r2, [r7, #6]
 800296c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	88fa      	ldrh	r2, [r7, #6]
 8002974:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    huart->TxISR       = NULL;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	2200      	movs	r2, #0
 800297c:	66da      	str	r2, [r3, #108]	@ 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	2200      	movs	r2, #0
 8002982:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	2221      	movs	r2, #33	@ 0x21
 800298a:	67da      	str	r2, [r3, #124]	@ 0x7c
      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	689b      	ldr	r3, [r3, #8]
 8002990:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002994:	d107      	bne.n	80029a6 <HAL_UART_Transmit_IT+0x6a>
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	691b      	ldr	r3, [r3, #16]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d103      	bne.n	80029a6 <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	4a13      	ldr	r2, [pc, #76]	@ (80029f0 <HAL_UART_Transmit_IT+0xb4>)
 80029a2:	66da      	str	r2, [r3, #108]	@ 0x6c
 80029a4:	e002      	b.n	80029ac <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	4a12      	ldr	r2, [pc, #72]	@ (80029f4 <HAL_UART_Transmit_IT+0xb8>)
 80029aa:	66da      	str	r2, [r3, #108]	@ 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029b2:	697b      	ldr	r3, [r7, #20]
 80029b4:	e853 3f00 	ldrex	r3, [r3]
 80029b8:	613b      	str	r3, [r7, #16]
   return(result);
 80029ba:	693b      	ldr	r3, [r7, #16]
 80029bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80029c0:	627b      	str	r3, [r7, #36]	@ 0x24
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	461a      	mov	r2, r3
 80029c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029ca:	623b      	str	r3, [r7, #32]
 80029cc:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029ce:	69f9      	ldr	r1, [r7, #28]
 80029d0:	6a3a      	ldr	r2, [r7, #32]
 80029d2:	e841 2300 	strex	r3, r2, [r1]
 80029d6:	61bb      	str	r3, [r7, #24]
   return(result);
 80029d8:	69bb      	ldr	r3, [r7, #24]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d1e6      	bne.n	80029ac <HAL_UART_Transmit_IT+0x70>
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 80029de:	2300      	movs	r3, #0
 80029e0:	e000      	b.n	80029e4 <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 80029e2:	2302      	movs	r3, #2
  }
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	372c      	adds	r7, #44	@ 0x2c
 80029e8:	46bd      	mov	sp, r7
 80029ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ee:	4770      	bx	lr
 80029f0:	08003c9b 	.word	0x08003c9b
 80029f4:	08003be5 	.word	0x08003be5

080029f8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b08a      	sub	sp, #40	@ 0x28
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	60f8      	str	r0, [r7, #12]
 8002a00:	60b9      	str	r1, [r7, #8]
 8002a02:	4613      	mov	r3, r2
 8002a04:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002a0c:	2b20      	cmp	r3, #32
 8002a0e:	d137      	bne.n	8002a80 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a10:	68bb      	ldr	r3, [r7, #8]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d002      	beq.n	8002a1c <HAL_UART_Receive_IT+0x24>
 8002a16:	88fb      	ldrh	r3, [r7, #6]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d101      	bne.n	8002a20 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	e030      	b.n	8002a82 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	2200      	movs	r2, #0
 8002a24:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a18      	ldr	r2, [pc, #96]	@ (8002a8c <HAL_UART_Receive_IT+0x94>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d01f      	beq.n	8002a70 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d018      	beq.n	8002a70 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a44:	697b      	ldr	r3, [r7, #20]
 8002a46:	e853 3f00 	ldrex	r3, [r3]
 8002a4a:	613b      	str	r3, [r7, #16]
   return(result);
 8002a4c:	693b      	ldr	r3, [r7, #16]
 8002a4e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002a52:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	461a      	mov	r2, r3
 8002a5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a5c:	623b      	str	r3, [r7, #32]
 8002a5e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a60:	69f9      	ldr	r1, [r7, #28]
 8002a62:	6a3a      	ldr	r2, [r7, #32]
 8002a64:	e841 2300 	strex	r3, r2, [r1]
 8002a68:	61bb      	str	r3, [r7, #24]
   return(result);
 8002a6a:	69bb      	ldr	r3, [r7, #24]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d1e6      	bne.n	8002a3e <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002a70:	88fb      	ldrh	r3, [r7, #6]
 8002a72:	461a      	mov	r2, r3
 8002a74:	68b9      	ldr	r1, [r7, #8]
 8002a76:	68f8      	ldr	r0, [r7, #12]
 8002a78:	f000 ff74 	bl	8003964 <UART_Start_Receive_IT>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	e000      	b.n	8002a82 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002a80:	2302      	movs	r3, #2
  }
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	3728      	adds	r7, #40	@ 0x28
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}
 8002a8a:	bf00      	nop
 8002a8c:	40008000 	.word	0x40008000

08002a90 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b0ba      	sub	sp, #232	@ 0xe8
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	69db      	ldr	r3, [r3, #28]
 8002a9e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	689b      	ldr	r3, [r3, #8]
 8002ab2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002ab6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8002aba:	f640 030f 	movw	r3, #2063	@ 0x80f
 8002abe:	4013      	ands	r3, r2
 8002ac0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8002ac4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d115      	bne.n	8002af8 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002acc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002ad0:	f003 0320 	and.w	r3, r3, #32
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d00f      	beq.n	8002af8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002ad8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002adc:	f003 0320 	and.w	r3, r3, #32
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d009      	beq.n	8002af8 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	f000 82ae 	beq.w	800304a <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002af2:	6878      	ldr	r0, [r7, #4]
 8002af4:	4798      	blx	r3
      }
      return;
 8002af6:	e2a8      	b.n	800304a <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8002af8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	f000 8117 	beq.w	8002d30 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002b02:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002b06:	f003 0301 	and.w	r3, r3, #1
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d106      	bne.n	8002b1c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002b0e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8002b12:	4b85      	ldr	r3, [pc, #532]	@ (8002d28 <HAL_UART_IRQHandler+0x298>)
 8002b14:	4013      	ands	r3, r2
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	f000 810a 	beq.w	8002d30 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002b1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002b20:	f003 0301 	and.w	r3, r3, #1
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d011      	beq.n	8002b4c <HAL_UART_IRQHandler+0xbc>
 8002b28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002b2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d00b      	beq.n	8002b4c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	2201      	movs	r2, #1
 8002b3a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002b42:	f043 0201 	orr.w	r2, r3, #1
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002b4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002b50:	f003 0302 	and.w	r3, r3, #2
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d011      	beq.n	8002b7c <HAL_UART_IRQHandler+0xec>
 8002b58:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002b5c:	f003 0301 	and.w	r3, r3, #1
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d00b      	beq.n	8002b7c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	2202      	movs	r2, #2
 8002b6a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002b72:	f043 0204 	orr.w	r2, r3, #4
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002b7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002b80:	f003 0304 	and.w	r3, r3, #4
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d011      	beq.n	8002bac <HAL_UART_IRQHandler+0x11c>
 8002b88:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002b8c:	f003 0301 	and.w	r3, r3, #1
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d00b      	beq.n	8002bac <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	2204      	movs	r2, #4
 8002b9a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002ba2:	f043 0202 	orr.w	r2, r3, #2
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002bac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002bb0:	f003 0308 	and.w	r3, r3, #8
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d017      	beq.n	8002be8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002bb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002bbc:	f003 0320 	and.w	r3, r3, #32
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d105      	bne.n	8002bd0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002bc4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002bc8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d00b      	beq.n	8002be8 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	2208      	movs	r2, #8
 8002bd6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002bde:	f043 0208 	orr.w	r2, r3, #8
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002be8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002bec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d012      	beq.n	8002c1a <HAL_UART_IRQHandler+0x18a>
 8002bf4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002bf8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d00c      	beq.n	8002c1a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002c08:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002c10:	f043 0220 	orr.w	r2, r3, #32
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	f000 8214 	beq.w	800304e <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002c26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002c2a:	f003 0320 	and.w	r3, r3, #32
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d00d      	beq.n	8002c4e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002c32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002c36:	f003 0320 	and.w	r3, r3, #32
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d007      	beq.n	8002c4e <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d003      	beq.n	8002c4e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002c4a:	6878      	ldr	r0, [r7, #4]
 8002c4c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002c54:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	689b      	ldr	r3, [r3, #8]
 8002c5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c62:	2b40      	cmp	r3, #64	@ 0x40
 8002c64:	d005      	beq.n	8002c72 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002c66:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002c6a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d04f      	beq.n	8002d12 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002c72:	6878      	ldr	r0, [r7, #4]
 8002c74:	f000 ff3c 	bl	8003af0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	689b      	ldr	r3, [r3, #8]
 8002c7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c82:	2b40      	cmp	r3, #64	@ 0x40
 8002c84:	d141      	bne.n	8002d0a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	3308      	adds	r3, #8
 8002c8c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c90:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002c94:	e853 3f00 	ldrex	r3, [r3]
 8002c98:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002c9c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002ca0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002ca4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	3308      	adds	r3, #8
 8002cae:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002cb2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002cb6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cba:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002cbe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002cc2:	e841 2300 	strex	r3, r2, [r1]
 8002cc6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002cca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d1d9      	bne.n	8002c86 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d013      	beq.n	8002d02 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002cde:	4a13      	ldr	r2, [pc, #76]	@ (8002d2c <HAL_UART_IRQHandler+0x29c>)
 8002ce0:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	f7fe f85b 	bl	8000da2 <HAL_DMA_Abort_IT>
 8002cec:	4603      	mov	r3, r0
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d017      	beq.n	8002d22 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002cf6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cf8:	687a      	ldr	r2, [r7, #4]
 8002cfa:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002cfc:	4610      	mov	r0, r2
 8002cfe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d00:	e00f      	b.n	8002d22 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002d02:	6878      	ldr	r0, [r7, #4]
 8002d04:	f000 f9ae 	bl	8003064 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d08:	e00b      	b.n	8002d22 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002d0a:	6878      	ldr	r0, [r7, #4]
 8002d0c:	f000 f9aa 	bl	8003064 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d10:	e007      	b.n	8002d22 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002d12:	6878      	ldr	r0, [r7, #4]
 8002d14:	f000 f9a6 	bl	8003064 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8002d20:	e195      	b.n	800304e <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d22:	bf00      	nop
    return;
 8002d24:	e193      	b.n	800304e <HAL_UART_IRQHandler+0x5be>
 8002d26:	bf00      	nop
 8002d28:	04000120 	.word	0x04000120
 8002d2c:	08003bb9 	.word	0x08003bb9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d34:	2b01      	cmp	r3, #1
 8002d36:	f040 814e 	bne.w	8002fd6 <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002d3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002d3e:	f003 0310 	and.w	r3, r3, #16
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	f000 8147 	beq.w	8002fd6 <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002d48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002d4c:	f003 0310 	and.w	r3, r3, #16
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	f000 8140 	beq.w	8002fd6 <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	2210      	movs	r2, #16
 8002d5c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	689b      	ldr	r3, [r3, #8]
 8002d64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d68:	2b40      	cmp	r3, #64	@ 0x40
 8002d6a:	f040 80b8 	bne.w	8002ede <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002d7a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	f000 8167 	beq.w	8003052 <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8002d8a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002d8e:	429a      	cmp	r2, r3
 8002d90:	f080 815f 	bcs.w	8003052 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002d9a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f003 0320 	and.w	r3, r3, #32
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	f040 8086 	bne.w	8002ebc <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002db8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002dbc:	e853 3f00 	ldrex	r3, [r3]
 8002dc0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002dc4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002dc8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002dcc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	461a      	mov	r2, r3
 8002dd6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002dda:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002dde:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002de2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002de6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002dea:	e841 2300 	strex	r3, r2, [r1]
 8002dee:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8002df2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d1da      	bne.n	8002db0 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	3308      	adds	r3, #8
 8002e00:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e02:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002e04:	e853 3f00 	ldrex	r3, [r3]
 8002e08:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002e0a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002e0c:	f023 0301 	bic.w	r3, r3, #1
 8002e10:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	3308      	adds	r3, #8
 8002e1a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002e1e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002e22:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e24:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002e26:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002e2a:	e841 2300 	strex	r3, r2, [r1]
 8002e2e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002e30:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d1e1      	bne.n	8002dfa <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	3308      	adds	r3, #8
 8002e3c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e3e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002e40:	e853 3f00 	ldrex	r3, [r3]
 8002e44:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8002e46:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002e48:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002e4c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	3308      	adds	r3, #8
 8002e56:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002e5a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002e5c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e5e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002e60:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002e62:	e841 2300 	strex	r3, r2, [r1]
 8002e66:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8002e68:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d1e3      	bne.n	8002e36 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2220      	movs	r2, #32
 8002e72:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2200      	movs	r2, #0
 8002e7a:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e82:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002e84:	e853 3f00 	ldrex	r3, [r3]
 8002e88:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002e8a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002e8c:	f023 0310 	bic.w	r3, r3, #16
 8002e90:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	461a      	mov	r2, r3
 8002e9a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002e9e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002ea0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ea2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002ea4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002ea6:	e841 2300 	strex	r3, r2, [r1]
 8002eaa:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002eac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d1e4      	bne.n	8002e7c <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	f7fd ff35 	bl	8000d26 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2202      	movs	r2, #2
 8002ec0:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8002ece:	b29b      	uxth	r3, r3
 8002ed0:	1ad3      	subs	r3, r2, r3
 8002ed2:	b29b      	uxth	r3, r3
 8002ed4:	4619      	mov	r1, r3
 8002ed6:	6878      	ldr	r0, [r7, #4]
 8002ed8:	f000 f8ce 	bl	8003078 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002edc:	e0b9      	b.n	8003052 <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8002eea:	b29b      	uxth	r3, r3
 8002eec:	1ad3      	subs	r3, r2, r3
 8002eee:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8002ef8:	b29b      	uxth	r3, r3
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	f000 80ab 	beq.w	8003056 <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 8002f00:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	f000 80a6 	beq.w	8003056 <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f12:	e853 3f00 	ldrex	r3, [r3]
 8002f16:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002f18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f1a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002f1e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	461a      	mov	r2, r3
 8002f28:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002f2c:	647b      	str	r3, [r7, #68]	@ 0x44
 8002f2e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f30:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002f32:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002f34:	e841 2300 	strex	r3, r2, [r1]
 8002f38:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002f3a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d1e4      	bne.n	8002f0a <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	3308      	adds	r3, #8
 8002f46:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f4a:	e853 3f00 	ldrex	r3, [r3]
 8002f4e:	623b      	str	r3, [r7, #32]
   return(result);
 8002f50:	6a3b      	ldr	r3, [r7, #32]
 8002f52:	f023 0301 	bic.w	r3, r3, #1
 8002f56:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	3308      	adds	r3, #8
 8002f60:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8002f64:	633a      	str	r2, [r7, #48]	@ 0x30
 8002f66:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f68:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002f6a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002f6c:	e841 2300 	strex	r3, r2, [r1]
 8002f70:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002f72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d1e3      	bne.n	8002f40 <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2220      	movs	r2, #32
 8002f7c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2200      	movs	r2, #0
 8002f84:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2200      	movs	r2, #0
 8002f8a:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f92:	693b      	ldr	r3, [r7, #16]
 8002f94:	e853 3f00 	ldrex	r3, [r3]
 8002f98:	60fb      	str	r3, [r7, #12]
   return(result);
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	f023 0310 	bic.w	r3, r3, #16
 8002fa0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	461a      	mov	r2, r3
 8002faa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002fae:	61fb      	str	r3, [r7, #28]
 8002fb0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fb2:	69b9      	ldr	r1, [r7, #24]
 8002fb4:	69fa      	ldr	r2, [r7, #28]
 8002fb6:	e841 2300 	strex	r3, r2, [r1]
 8002fba:	617b      	str	r3, [r7, #20]
   return(result);
 8002fbc:	697b      	ldr	r3, [r7, #20]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d1e4      	bne.n	8002f8c <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2202      	movs	r2, #2
 8002fc6:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002fc8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002fcc:	4619      	mov	r1, r3
 8002fce:	6878      	ldr	r0, [r7, #4]
 8002fd0:	f000 f852 	bl	8003078 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002fd4:	e03f      	b.n	8003056 <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002fd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002fda:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d00e      	beq.n	8003000 <HAL_UART_IRQHandler+0x570>
 8002fe2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002fe6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d008      	beq.n	8003000 <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8002ff6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002ff8:	6878      	ldr	r0, [r7, #4]
 8002ffa:	f001 f895 	bl	8004128 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002ffe:	e02d      	b.n	800305c <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003000:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003004:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003008:	2b00      	cmp	r3, #0
 800300a:	d00e      	beq.n	800302a <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800300c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003010:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003014:	2b00      	cmp	r3, #0
 8003016:	d008      	beq.n	800302a <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800301c:	2b00      	cmp	r3, #0
 800301e:	d01c      	beq.n	800305a <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003024:	6878      	ldr	r0, [r7, #4]
 8003026:	4798      	blx	r3
    }
    return;
 8003028:	e017      	b.n	800305a <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800302a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800302e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003032:	2b00      	cmp	r3, #0
 8003034:	d012      	beq.n	800305c <HAL_UART_IRQHandler+0x5cc>
 8003036:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800303a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800303e:	2b00      	cmp	r3, #0
 8003040:	d00c      	beq.n	800305c <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 8003042:	6878      	ldr	r0, [r7, #4]
 8003044:	f000 fe89 	bl	8003d5a <UART_EndTransmit_IT>
    return;
 8003048:	e008      	b.n	800305c <HAL_UART_IRQHandler+0x5cc>
      return;
 800304a:	bf00      	nop
 800304c:	e006      	b.n	800305c <HAL_UART_IRQHandler+0x5cc>
    return;
 800304e:	bf00      	nop
 8003050:	e004      	b.n	800305c <HAL_UART_IRQHandler+0x5cc>
      return;
 8003052:	bf00      	nop
 8003054:	e002      	b.n	800305c <HAL_UART_IRQHandler+0x5cc>
      return;
 8003056:	bf00      	nop
 8003058:	e000      	b.n	800305c <HAL_UART_IRQHandler+0x5cc>
    return;
 800305a:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 800305c:	37e8      	adds	r7, #232	@ 0xe8
 800305e:	46bd      	mov	sp, r7
 8003060:	bd80      	pop	{r7, pc}
 8003062:	bf00      	nop

08003064 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003064:	b480      	push	{r7}
 8003066:	b083      	sub	sp, #12
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800306c:	bf00      	nop
 800306e:	370c      	adds	r7, #12
 8003070:	46bd      	mov	sp, r7
 8003072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003076:	4770      	bx	lr

08003078 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003078:	b480      	push	{r7}
 800307a:	b083      	sub	sp, #12
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
 8003080:	460b      	mov	r3, r1
 8003082:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003084:	bf00      	nop
 8003086:	370c      	adds	r7, #12
 8003088:	46bd      	mov	sp, r7
 800308a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308e:	4770      	bx	lr

08003090 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003090:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003094:	b08a      	sub	sp, #40	@ 0x28
 8003096:	af00      	add	r7, sp, #0
 8003098:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800309a:	2300      	movs	r3, #0
 800309c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	689a      	ldr	r2, [r3, #8]
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	691b      	ldr	r3, [r3, #16]
 80030a8:	431a      	orrs	r2, r3
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	695b      	ldr	r3, [r3, #20]
 80030ae:	431a      	orrs	r2, r3
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	69db      	ldr	r3, [r3, #28]
 80030b4:	4313      	orrs	r3, r2
 80030b6:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	681a      	ldr	r2, [r3, #0]
 80030be:	4ba4      	ldr	r3, [pc, #656]	@ (8003350 <UART_SetConfig+0x2c0>)
 80030c0:	4013      	ands	r3, r2
 80030c2:	68fa      	ldr	r2, [r7, #12]
 80030c4:	6812      	ldr	r2, [r2, #0]
 80030c6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80030c8:	430b      	orrs	r3, r1
 80030ca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	68da      	ldr	r2, [r3, #12]
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	430a      	orrs	r2, r1
 80030e0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	699b      	ldr	r3, [r3, #24]
 80030e6:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a99      	ldr	r2, [pc, #612]	@ (8003354 <UART_SetConfig+0x2c4>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d004      	beq.n	80030fc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	6a1b      	ldr	r3, [r3, #32]
 80030f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80030f8:	4313      	orrs	r3, r2
 80030fa:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	689b      	ldr	r3, [r3, #8]
 8003102:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800310c:	430a      	orrs	r2, r1
 800310e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4a90      	ldr	r2, [pc, #576]	@ (8003358 <UART_SetConfig+0x2c8>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d126      	bne.n	8003168 <UART_SetConfig+0xd8>
 800311a:	4b90      	ldr	r3, [pc, #576]	@ (800335c <UART_SetConfig+0x2cc>)
 800311c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003120:	f003 0303 	and.w	r3, r3, #3
 8003124:	2b03      	cmp	r3, #3
 8003126:	d81b      	bhi.n	8003160 <UART_SetConfig+0xd0>
 8003128:	a201      	add	r2, pc, #4	@ (adr r2, 8003130 <UART_SetConfig+0xa0>)
 800312a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800312e:	bf00      	nop
 8003130:	08003141 	.word	0x08003141
 8003134:	08003151 	.word	0x08003151
 8003138:	08003149 	.word	0x08003149
 800313c:	08003159 	.word	0x08003159
 8003140:	2301      	movs	r3, #1
 8003142:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003146:	e116      	b.n	8003376 <UART_SetConfig+0x2e6>
 8003148:	2302      	movs	r3, #2
 800314a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800314e:	e112      	b.n	8003376 <UART_SetConfig+0x2e6>
 8003150:	2304      	movs	r3, #4
 8003152:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003156:	e10e      	b.n	8003376 <UART_SetConfig+0x2e6>
 8003158:	2308      	movs	r3, #8
 800315a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800315e:	e10a      	b.n	8003376 <UART_SetConfig+0x2e6>
 8003160:	2310      	movs	r3, #16
 8003162:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003166:	e106      	b.n	8003376 <UART_SetConfig+0x2e6>
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a7c      	ldr	r2, [pc, #496]	@ (8003360 <UART_SetConfig+0x2d0>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d138      	bne.n	80031e4 <UART_SetConfig+0x154>
 8003172:	4b7a      	ldr	r3, [pc, #488]	@ (800335c <UART_SetConfig+0x2cc>)
 8003174:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003178:	f003 030c 	and.w	r3, r3, #12
 800317c:	2b0c      	cmp	r3, #12
 800317e:	d82d      	bhi.n	80031dc <UART_SetConfig+0x14c>
 8003180:	a201      	add	r2, pc, #4	@ (adr r2, 8003188 <UART_SetConfig+0xf8>)
 8003182:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003186:	bf00      	nop
 8003188:	080031bd 	.word	0x080031bd
 800318c:	080031dd 	.word	0x080031dd
 8003190:	080031dd 	.word	0x080031dd
 8003194:	080031dd 	.word	0x080031dd
 8003198:	080031cd 	.word	0x080031cd
 800319c:	080031dd 	.word	0x080031dd
 80031a0:	080031dd 	.word	0x080031dd
 80031a4:	080031dd 	.word	0x080031dd
 80031a8:	080031c5 	.word	0x080031c5
 80031ac:	080031dd 	.word	0x080031dd
 80031b0:	080031dd 	.word	0x080031dd
 80031b4:	080031dd 	.word	0x080031dd
 80031b8:	080031d5 	.word	0x080031d5
 80031bc:	2300      	movs	r3, #0
 80031be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80031c2:	e0d8      	b.n	8003376 <UART_SetConfig+0x2e6>
 80031c4:	2302      	movs	r3, #2
 80031c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80031ca:	e0d4      	b.n	8003376 <UART_SetConfig+0x2e6>
 80031cc:	2304      	movs	r3, #4
 80031ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80031d2:	e0d0      	b.n	8003376 <UART_SetConfig+0x2e6>
 80031d4:	2308      	movs	r3, #8
 80031d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80031da:	e0cc      	b.n	8003376 <UART_SetConfig+0x2e6>
 80031dc:	2310      	movs	r3, #16
 80031de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80031e2:	e0c8      	b.n	8003376 <UART_SetConfig+0x2e6>
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a5e      	ldr	r2, [pc, #376]	@ (8003364 <UART_SetConfig+0x2d4>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d125      	bne.n	800323a <UART_SetConfig+0x1aa>
 80031ee:	4b5b      	ldr	r3, [pc, #364]	@ (800335c <UART_SetConfig+0x2cc>)
 80031f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031f4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80031f8:	2b30      	cmp	r3, #48	@ 0x30
 80031fa:	d016      	beq.n	800322a <UART_SetConfig+0x19a>
 80031fc:	2b30      	cmp	r3, #48	@ 0x30
 80031fe:	d818      	bhi.n	8003232 <UART_SetConfig+0x1a2>
 8003200:	2b20      	cmp	r3, #32
 8003202:	d00a      	beq.n	800321a <UART_SetConfig+0x18a>
 8003204:	2b20      	cmp	r3, #32
 8003206:	d814      	bhi.n	8003232 <UART_SetConfig+0x1a2>
 8003208:	2b00      	cmp	r3, #0
 800320a:	d002      	beq.n	8003212 <UART_SetConfig+0x182>
 800320c:	2b10      	cmp	r3, #16
 800320e:	d008      	beq.n	8003222 <UART_SetConfig+0x192>
 8003210:	e00f      	b.n	8003232 <UART_SetConfig+0x1a2>
 8003212:	2300      	movs	r3, #0
 8003214:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003218:	e0ad      	b.n	8003376 <UART_SetConfig+0x2e6>
 800321a:	2302      	movs	r3, #2
 800321c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003220:	e0a9      	b.n	8003376 <UART_SetConfig+0x2e6>
 8003222:	2304      	movs	r3, #4
 8003224:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003228:	e0a5      	b.n	8003376 <UART_SetConfig+0x2e6>
 800322a:	2308      	movs	r3, #8
 800322c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003230:	e0a1      	b.n	8003376 <UART_SetConfig+0x2e6>
 8003232:	2310      	movs	r3, #16
 8003234:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003238:	e09d      	b.n	8003376 <UART_SetConfig+0x2e6>
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a4a      	ldr	r2, [pc, #296]	@ (8003368 <UART_SetConfig+0x2d8>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d125      	bne.n	8003290 <UART_SetConfig+0x200>
 8003244:	4b45      	ldr	r3, [pc, #276]	@ (800335c <UART_SetConfig+0x2cc>)
 8003246:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800324a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800324e:	2bc0      	cmp	r3, #192	@ 0xc0
 8003250:	d016      	beq.n	8003280 <UART_SetConfig+0x1f0>
 8003252:	2bc0      	cmp	r3, #192	@ 0xc0
 8003254:	d818      	bhi.n	8003288 <UART_SetConfig+0x1f8>
 8003256:	2b80      	cmp	r3, #128	@ 0x80
 8003258:	d00a      	beq.n	8003270 <UART_SetConfig+0x1e0>
 800325a:	2b80      	cmp	r3, #128	@ 0x80
 800325c:	d814      	bhi.n	8003288 <UART_SetConfig+0x1f8>
 800325e:	2b00      	cmp	r3, #0
 8003260:	d002      	beq.n	8003268 <UART_SetConfig+0x1d8>
 8003262:	2b40      	cmp	r3, #64	@ 0x40
 8003264:	d008      	beq.n	8003278 <UART_SetConfig+0x1e8>
 8003266:	e00f      	b.n	8003288 <UART_SetConfig+0x1f8>
 8003268:	2300      	movs	r3, #0
 800326a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800326e:	e082      	b.n	8003376 <UART_SetConfig+0x2e6>
 8003270:	2302      	movs	r3, #2
 8003272:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003276:	e07e      	b.n	8003376 <UART_SetConfig+0x2e6>
 8003278:	2304      	movs	r3, #4
 800327a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800327e:	e07a      	b.n	8003376 <UART_SetConfig+0x2e6>
 8003280:	2308      	movs	r3, #8
 8003282:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003286:	e076      	b.n	8003376 <UART_SetConfig+0x2e6>
 8003288:	2310      	movs	r3, #16
 800328a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800328e:	e072      	b.n	8003376 <UART_SetConfig+0x2e6>
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4a35      	ldr	r2, [pc, #212]	@ (800336c <UART_SetConfig+0x2dc>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d12a      	bne.n	80032f0 <UART_SetConfig+0x260>
 800329a:	4b30      	ldr	r3, [pc, #192]	@ (800335c <UART_SetConfig+0x2cc>)
 800329c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032a0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80032a4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80032a8:	d01a      	beq.n	80032e0 <UART_SetConfig+0x250>
 80032aa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80032ae:	d81b      	bhi.n	80032e8 <UART_SetConfig+0x258>
 80032b0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80032b4:	d00c      	beq.n	80032d0 <UART_SetConfig+0x240>
 80032b6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80032ba:	d815      	bhi.n	80032e8 <UART_SetConfig+0x258>
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d003      	beq.n	80032c8 <UART_SetConfig+0x238>
 80032c0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80032c4:	d008      	beq.n	80032d8 <UART_SetConfig+0x248>
 80032c6:	e00f      	b.n	80032e8 <UART_SetConfig+0x258>
 80032c8:	2300      	movs	r3, #0
 80032ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80032ce:	e052      	b.n	8003376 <UART_SetConfig+0x2e6>
 80032d0:	2302      	movs	r3, #2
 80032d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80032d6:	e04e      	b.n	8003376 <UART_SetConfig+0x2e6>
 80032d8:	2304      	movs	r3, #4
 80032da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80032de:	e04a      	b.n	8003376 <UART_SetConfig+0x2e6>
 80032e0:	2308      	movs	r3, #8
 80032e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80032e6:	e046      	b.n	8003376 <UART_SetConfig+0x2e6>
 80032e8:	2310      	movs	r3, #16
 80032ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80032ee:	e042      	b.n	8003376 <UART_SetConfig+0x2e6>
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a17      	ldr	r2, [pc, #92]	@ (8003354 <UART_SetConfig+0x2c4>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d13a      	bne.n	8003370 <UART_SetConfig+0x2e0>
 80032fa:	4b18      	ldr	r3, [pc, #96]	@ (800335c <UART_SetConfig+0x2cc>)
 80032fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003300:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003304:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003308:	d01a      	beq.n	8003340 <UART_SetConfig+0x2b0>
 800330a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800330e:	d81b      	bhi.n	8003348 <UART_SetConfig+0x2b8>
 8003310:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003314:	d00c      	beq.n	8003330 <UART_SetConfig+0x2a0>
 8003316:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800331a:	d815      	bhi.n	8003348 <UART_SetConfig+0x2b8>
 800331c:	2b00      	cmp	r3, #0
 800331e:	d003      	beq.n	8003328 <UART_SetConfig+0x298>
 8003320:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003324:	d008      	beq.n	8003338 <UART_SetConfig+0x2a8>
 8003326:	e00f      	b.n	8003348 <UART_SetConfig+0x2b8>
 8003328:	2300      	movs	r3, #0
 800332a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800332e:	e022      	b.n	8003376 <UART_SetConfig+0x2e6>
 8003330:	2302      	movs	r3, #2
 8003332:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003336:	e01e      	b.n	8003376 <UART_SetConfig+0x2e6>
 8003338:	2304      	movs	r3, #4
 800333a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800333e:	e01a      	b.n	8003376 <UART_SetConfig+0x2e6>
 8003340:	2308      	movs	r3, #8
 8003342:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003346:	e016      	b.n	8003376 <UART_SetConfig+0x2e6>
 8003348:	2310      	movs	r3, #16
 800334a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800334e:	e012      	b.n	8003376 <UART_SetConfig+0x2e6>
 8003350:	efff69f3 	.word	0xefff69f3
 8003354:	40008000 	.word	0x40008000
 8003358:	40013800 	.word	0x40013800
 800335c:	40021000 	.word	0x40021000
 8003360:	40004400 	.word	0x40004400
 8003364:	40004800 	.word	0x40004800
 8003368:	40004c00 	.word	0x40004c00
 800336c:	40005000 	.word	0x40005000
 8003370:	2310      	movs	r3, #16
 8003372:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4a9f      	ldr	r2, [pc, #636]	@ (80035f8 <UART_SetConfig+0x568>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d17a      	bne.n	8003476 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003380:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003384:	2b08      	cmp	r3, #8
 8003386:	d824      	bhi.n	80033d2 <UART_SetConfig+0x342>
 8003388:	a201      	add	r2, pc, #4	@ (adr r2, 8003390 <UART_SetConfig+0x300>)
 800338a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800338e:	bf00      	nop
 8003390:	080033b5 	.word	0x080033b5
 8003394:	080033d3 	.word	0x080033d3
 8003398:	080033bd 	.word	0x080033bd
 800339c:	080033d3 	.word	0x080033d3
 80033a0:	080033c3 	.word	0x080033c3
 80033a4:	080033d3 	.word	0x080033d3
 80033a8:	080033d3 	.word	0x080033d3
 80033ac:	080033d3 	.word	0x080033d3
 80033b0:	080033cb 	.word	0x080033cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80033b4:	f7fe fd1e 	bl	8001df4 <HAL_RCC_GetPCLK1Freq>
 80033b8:	61f8      	str	r0, [r7, #28]
        break;
 80033ba:	e010      	b.n	80033de <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80033bc:	4b8f      	ldr	r3, [pc, #572]	@ (80035fc <UART_SetConfig+0x56c>)
 80033be:	61fb      	str	r3, [r7, #28]
        break;
 80033c0:	e00d      	b.n	80033de <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80033c2:	f7fe fc7f 	bl	8001cc4 <HAL_RCC_GetSysClockFreq>
 80033c6:	61f8      	str	r0, [r7, #28]
        break;
 80033c8:	e009      	b.n	80033de <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80033ca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80033ce:	61fb      	str	r3, [r7, #28]
        break;
 80033d0:	e005      	b.n	80033de <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80033d2:	2300      	movs	r3, #0
 80033d4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80033d6:	2301      	movs	r3, #1
 80033d8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80033dc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80033de:	69fb      	ldr	r3, [r7, #28]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	f000 80fb 	beq.w	80035dc <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	685a      	ldr	r2, [r3, #4]
 80033ea:	4613      	mov	r3, r2
 80033ec:	005b      	lsls	r3, r3, #1
 80033ee:	4413      	add	r3, r2
 80033f0:	69fa      	ldr	r2, [r7, #28]
 80033f2:	429a      	cmp	r2, r3
 80033f4:	d305      	bcc.n	8003402 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80033fc:	69fa      	ldr	r2, [r7, #28]
 80033fe:	429a      	cmp	r2, r3
 8003400:	d903      	bls.n	800340a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8003402:	2301      	movs	r3, #1
 8003404:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003408:	e0e8      	b.n	80035dc <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800340a:	69fb      	ldr	r3, [r7, #28]
 800340c:	2200      	movs	r2, #0
 800340e:	461c      	mov	r4, r3
 8003410:	4615      	mov	r5, r2
 8003412:	f04f 0200 	mov.w	r2, #0
 8003416:	f04f 0300 	mov.w	r3, #0
 800341a:	022b      	lsls	r3, r5, #8
 800341c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003420:	0222      	lsls	r2, r4, #8
 8003422:	68f9      	ldr	r1, [r7, #12]
 8003424:	6849      	ldr	r1, [r1, #4]
 8003426:	0849      	lsrs	r1, r1, #1
 8003428:	2000      	movs	r0, #0
 800342a:	4688      	mov	r8, r1
 800342c:	4681      	mov	r9, r0
 800342e:	eb12 0a08 	adds.w	sl, r2, r8
 8003432:	eb43 0b09 	adc.w	fp, r3, r9
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	2200      	movs	r2, #0
 800343c:	603b      	str	r3, [r7, #0]
 800343e:	607a      	str	r2, [r7, #4]
 8003440:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003444:	4650      	mov	r0, sl
 8003446:	4659      	mov	r1, fp
 8003448:	f7fc fed0 	bl	80001ec <__aeabi_uldivmod>
 800344c:	4602      	mov	r2, r0
 800344e:	460b      	mov	r3, r1
 8003450:	4613      	mov	r3, r2
 8003452:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003454:	69bb      	ldr	r3, [r7, #24]
 8003456:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800345a:	d308      	bcc.n	800346e <UART_SetConfig+0x3de>
 800345c:	69bb      	ldr	r3, [r7, #24]
 800345e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003462:	d204      	bcs.n	800346e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	69ba      	ldr	r2, [r7, #24]
 800346a:	60da      	str	r2, [r3, #12]
 800346c:	e0b6      	b.n	80035dc <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800346e:	2301      	movs	r3, #1
 8003470:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003474:	e0b2      	b.n	80035dc <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	69db      	ldr	r3, [r3, #28]
 800347a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800347e:	d15e      	bne.n	800353e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003480:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003484:	2b08      	cmp	r3, #8
 8003486:	d828      	bhi.n	80034da <UART_SetConfig+0x44a>
 8003488:	a201      	add	r2, pc, #4	@ (adr r2, 8003490 <UART_SetConfig+0x400>)
 800348a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800348e:	bf00      	nop
 8003490:	080034b5 	.word	0x080034b5
 8003494:	080034bd 	.word	0x080034bd
 8003498:	080034c5 	.word	0x080034c5
 800349c:	080034db 	.word	0x080034db
 80034a0:	080034cb 	.word	0x080034cb
 80034a4:	080034db 	.word	0x080034db
 80034a8:	080034db 	.word	0x080034db
 80034ac:	080034db 	.word	0x080034db
 80034b0:	080034d3 	.word	0x080034d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80034b4:	f7fe fc9e 	bl	8001df4 <HAL_RCC_GetPCLK1Freq>
 80034b8:	61f8      	str	r0, [r7, #28]
        break;
 80034ba:	e014      	b.n	80034e6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80034bc:	f7fe fcb0 	bl	8001e20 <HAL_RCC_GetPCLK2Freq>
 80034c0:	61f8      	str	r0, [r7, #28]
        break;
 80034c2:	e010      	b.n	80034e6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80034c4:	4b4d      	ldr	r3, [pc, #308]	@ (80035fc <UART_SetConfig+0x56c>)
 80034c6:	61fb      	str	r3, [r7, #28]
        break;
 80034c8:	e00d      	b.n	80034e6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80034ca:	f7fe fbfb 	bl	8001cc4 <HAL_RCC_GetSysClockFreq>
 80034ce:	61f8      	str	r0, [r7, #28]
        break;
 80034d0:	e009      	b.n	80034e6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80034d2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80034d6:	61fb      	str	r3, [r7, #28]
        break;
 80034d8:	e005      	b.n	80034e6 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80034da:	2300      	movs	r3, #0
 80034dc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80034de:	2301      	movs	r3, #1
 80034e0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80034e4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80034e6:	69fb      	ldr	r3, [r7, #28]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d077      	beq.n	80035dc <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80034ec:	69fb      	ldr	r3, [r7, #28]
 80034ee:	005a      	lsls	r2, r3, #1
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	085b      	lsrs	r3, r3, #1
 80034f6:	441a      	add	r2, r3
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003500:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003502:	69bb      	ldr	r3, [r7, #24]
 8003504:	2b0f      	cmp	r3, #15
 8003506:	d916      	bls.n	8003536 <UART_SetConfig+0x4a6>
 8003508:	69bb      	ldr	r3, [r7, #24]
 800350a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800350e:	d212      	bcs.n	8003536 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003510:	69bb      	ldr	r3, [r7, #24]
 8003512:	b29b      	uxth	r3, r3
 8003514:	f023 030f 	bic.w	r3, r3, #15
 8003518:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800351a:	69bb      	ldr	r3, [r7, #24]
 800351c:	085b      	lsrs	r3, r3, #1
 800351e:	b29b      	uxth	r3, r3
 8003520:	f003 0307 	and.w	r3, r3, #7
 8003524:	b29a      	uxth	r2, r3
 8003526:	8afb      	ldrh	r3, [r7, #22]
 8003528:	4313      	orrs	r3, r2
 800352a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	8afa      	ldrh	r2, [r7, #22]
 8003532:	60da      	str	r2, [r3, #12]
 8003534:	e052      	b.n	80035dc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003536:	2301      	movs	r3, #1
 8003538:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800353c:	e04e      	b.n	80035dc <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800353e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003542:	2b08      	cmp	r3, #8
 8003544:	d827      	bhi.n	8003596 <UART_SetConfig+0x506>
 8003546:	a201      	add	r2, pc, #4	@ (adr r2, 800354c <UART_SetConfig+0x4bc>)
 8003548:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800354c:	08003571 	.word	0x08003571
 8003550:	08003579 	.word	0x08003579
 8003554:	08003581 	.word	0x08003581
 8003558:	08003597 	.word	0x08003597
 800355c:	08003587 	.word	0x08003587
 8003560:	08003597 	.word	0x08003597
 8003564:	08003597 	.word	0x08003597
 8003568:	08003597 	.word	0x08003597
 800356c:	0800358f 	.word	0x0800358f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003570:	f7fe fc40 	bl	8001df4 <HAL_RCC_GetPCLK1Freq>
 8003574:	61f8      	str	r0, [r7, #28]
        break;
 8003576:	e014      	b.n	80035a2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003578:	f7fe fc52 	bl	8001e20 <HAL_RCC_GetPCLK2Freq>
 800357c:	61f8      	str	r0, [r7, #28]
        break;
 800357e:	e010      	b.n	80035a2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003580:	4b1e      	ldr	r3, [pc, #120]	@ (80035fc <UART_SetConfig+0x56c>)
 8003582:	61fb      	str	r3, [r7, #28]
        break;
 8003584:	e00d      	b.n	80035a2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003586:	f7fe fb9d 	bl	8001cc4 <HAL_RCC_GetSysClockFreq>
 800358a:	61f8      	str	r0, [r7, #28]
        break;
 800358c:	e009      	b.n	80035a2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800358e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003592:	61fb      	str	r3, [r7, #28]
        break;
 8003594:	e005      	b.n	80035a2 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8003596:	2300      	movs	r3, #0
 8003598:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800359a:	2301      	movs	r3, #1
 800359c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80035a0:	bf00      	nop
    }

    if (pclk != 0U)
 80035a2:	69fb      	ldr	r3, [r7, #28]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d019      	beq.n	80035dc <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	085a      	lsrs	r2, r3, #1
 80035ae:	69fb      	ldr	r3, [r7, #28]
 80035b0:	441a      	add	r2, r3
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80035ba:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80035bc:	69bb      	ldr	r3, [r7, #24]
 80035be:	2b0f      	cmp	r3, #15
 80035c0:	d909      	bls.n	80035d6 <UART_SetConfig+0x546>
 80035c2:	69bb      	ldr	r3, [r7, #24]
 80035c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80035c8:	d205      	bcs.n	80035d6 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80035ca:	69bb      	ldr	r3, [r7, #24]
 80035cc:	b29a      	uxth	r2, r3
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	60da      	str	r2, [r3, #12]
 80035d4:	e002      	b.n	80035dc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80035d6:	2301      	movs	r3, #1
 80035d8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	2200      	movs	r2, #0
 80035e0:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	2200      	movs	r2, #0
 80035e6:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80035e8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80035ec:	4618      	mov	r0, r3
 80035ee:	3728      	adds	r7, #40	@ 0x28
 80035f0:	46bd      	mov	sp, r7
 80035f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80035f6:	bf00      	nop
 80035f8:	40008000 	.word	0x40008000
 80035fc:	00f42400 	.word	0x00f42400

08003600 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003600:	b480      	push	{r7}
 8003602:	b083      	sub	sp, #12
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800360c:	f003 0308 	and.w	r3, r3, #8
 8003610:	2b00      	cmp	r3, #0
 8003612:	d00a      	beq.n	800362a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	430a      	orrs	r2, r1
 8003628:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800362e:	f003 0301 	and.w	r3, r3, #1
 8003632:	2b00      	cmp	r3, #0
 8003634:	d00a      	beq.n	800364c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	430a      	orrs	r2, r1
 800364a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003650:	f003 0302 	and.w	r3, r3, #2
 8003654:	2b00      	cmp	r3, #0
 8003656:	d00a      	beq.n	800366e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	430a      	orrs	r2, r1
 800366c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003672:	f003 0304 	and.w	r3, r3, #4
 8003676:	2b00      	cmp	r3, #0
 8003678:	d00a      	beq.n	8003690 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	430a      	orrs	r2, r1
 800368e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003694:	f003 0310 	and.w	r3, r3, #16
 8003698:	2b00      	cmp	r3, #0
 800369a:	d00a      	beq.n	80036b2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	689b      	ldr	r3, [r3, #8]
 80036a2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	430a      	orrs	r2, r1
 80036b0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036b6:	f003 0320 	and.w	r3, r3, #32
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d00a      	beq.n	80036d4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	689b      	ldr	r3, [r3, #8]
 80036c4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	430a      	orrs	r2, r1
 80036d2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d01a      	beq.n	8003716 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	430a      	orrs	r2, r1
 80036f4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036fa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80036fe:	d10a      	bne.n	8003716 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	685b      	ldr	r3, [r3, #4]
 8003706:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	430a      	orrs	r2, r1
 8003714:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800371a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800371e:	2b00      	cmp	r3, #0
 8003720:	d00a      	beq.n	8003738 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	430a      	orrs	r2, r1
 8003736:	605a      	str	r2, [r3, #4]
  }
}
 8003738:	bf00      	nop
 800373a:	370c      	adds	r7, #12
 800373c:	46bd      	mov	sp, r7
 800373e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003742:	4770      	bx	lr

08003744 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b098      	sub	sp, #96	@ 0x60
 8003748:	af02      	add	r7, sp, #8
 800374a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2200      	movs	r2, #0
 8003750:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003754:	f7fd f9a6 	bl	8000aa4 <HAL_GetTick>
 8003758:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f003 0308 	and.w	r3, r3, #8
 8003764:	2b08      	cmp	r3, #8
 8003766:	d12e      	bne.n	80037c6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003768:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800376c:	9300      	str	r3, [sp, #0]
 800376e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003770:	2200      	movs	r2, #0
 8003772:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003776:	6878      	ldr	r0, [r7, #4]
 8003778:	f000 f88c 	bl	8003894 <UART_WaitOnFlagUntilTimeout>
 800377c:	4603      	mov	r3, r0
 800377e:	2b00      	cmp	r3, #0
 8003780:	d021      	beq.n	80037c6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003788:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800378a:	e853 3f00 	ldrex	r3, [r3]
 800378e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003790:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003792:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003796:	653b      	str	r3, [r7, #80]	@ 0x50
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	461a      	mov	r2, r3
 800379e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80037a0:	647b      	str	r3, [r7, #68]	@ 0x44
 80037a2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037a4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80037a6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80037a8:	e841 2300 	strex	r3, r2, [r1]
 80037ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80037ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d1e6      	bne.n	8003782 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2220      	movs	r2, #32
 80037b8:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2200      	movs	r2, #0
 80037be:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80037c2:	2303      	movs	r3, #3
 80037c4:	e062      	b.n	800388c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f003 0304 	and.w	r3, r3, #4
 80037d0:	2b04      	cmp	r3, #4
 80037d2:	d149      	bne.n	8003868 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80037d4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80037d8:	9300      	str	r3, [sp, #0]
 80037da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80037dc:	2200      	movs	r2, #0
 80037de:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80037e2:	6878      	ldr	r0, [r7, #4]
 80037e4:	f000 f856 	bl	8003894 <UART_WaitOnFlagUntilTimeout>
 80037e8:	4603      	mov	r3, r0
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d03c      	beq.n	8003868 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037f6:	e853 3f00 	ldrex	r3, [r3]
 80037fa:	623b      	str	r3, [r7, #32]
   return(result);
 80037fc:	6a3b      	ldr	r3, [r7, #32]
 80037fe:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003802:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	461a      	mov	r2, r3
 800380a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800380c:	633b      	str	r3, [r7, #48]	@ 0x30
 800380e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003810:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003812:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003814:	e841 2300 	strex	r3, r2, [r1]
 8003818:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800381a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800381c:	2b00      	cmp	r3, #0
 800381e:	d1e6      	bne.n	80037ee <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	3308      	adds	r3, #8
 8003826:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003828:	693b      	ldr	r3, [r7, #16]
 800382a:	e853 3f00 	ldrex	r3, [r3]
 800382e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	f023 0301 	bic.w	r3, r3, #1
 8003836:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	3308      	adds	r3, #8
 800383e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003840:	61fa      	str	r2, [r7, #28]
 8003842:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003844:	69b9      	ldr	r1, [r7, #24]
 8003846:	69fa      	ldr	r2, [r7, #28]
 8003848:	e841 2300 	strex	r3, r2, [r1]
 800384c:	617b      	str	r3, [r7, #20]
   return(result);
 800384e:	697b      	ldr	r3, [r7, #20]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d1e5      	bne.n	8003820 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2220      	movs	r2, #32
 8003858:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2200      	movs	r2, #0
 8003860:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003864:	2303      	movs	r3, #3
 8003866:	e011      	b.n	800388c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2220      	movs	r2, #32
 800386c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2220      	movs	r2, #32
 8003872:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2200      	movs	r2, #0
 800387a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2200      	movs	r2, #0
 8003880:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2200      	movs	r2, #0
 8003886:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800388a:	2300      	movs	r3, #0
}
 800388c:	4618      	mov	r0, r3
 800388e:	3758      	adds	r7, #88	@ 0x58
 8003890:	46bd      	mov	sp, r7
 8003892:	bd80      	pop	{r7, pc}

08003894 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b084      	sub	sp, #16
 8003898:	af00      	add	r7, sp, #0
 800389a:	60f8      	str	r0, [r7, #12]
 800389c:	60b9      	str	r1, [r7, #8]
 800389e:	603b      	str	r3, [r7, #0]
 80038a0:	4613      	mov	r3, r2
 80038a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80038a4:	e049      	b.n	800393a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038a6:	69bb      	ldr	r3, [r7, #24]
 80038a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038ac:	d045      	beq.n	800393a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038ae:	f7fd f8f9 	bl	8000aa4 <HAL_GetTick>
 80038b2:	4602      	mov	r2, r0
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	1ad3      	subs	r3, r2, r3
 80038b8:	69ba      	ldr	r2, [r7, #24]
 80038ba:	429a      	cmp	r2, r3
 80038bc:	d302      	bcc.n	80038c4 <UART_WaitOnFlagUntilTimeout+0x30>
 80038be:	69bb      	ldr	r3, [r7, #24]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d101      	bne.n	80038c8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80038c4:	2303      	movs	r3, #3
 80038c6:	e048      	b.n	800395a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f003 0304 	and.w	r3, r3, #4
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d031      	beq.n	800393a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	69db      	ldr	r3, [r3, #28]
 80038dc:	f003 0308 	and.w	r3, r3, #8
 80038e0:	2b08      	cmp	r3, #8
 80038e2:	d110      	bne.n	8003906 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	2208      	movs	r2, #8
 80038ea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80038ec:	68f8      	ldr	r0, [r7, #12]
 80038ee:	f000 f8ff 	bl	8003af0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	2208      	movs	r2, #8
 80038f6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	2200      	movs	r2, #0
 80038fe:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8003902:	2301      	movs	r3, #1
 8003904:	e029      	b.n	800395a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	69db      	ldr	r3, [r3, #28]
 800390c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003910:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003914:	d111      	bne.n	800393a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800391e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003920:	68f8      	ldr	r0, [r7, #12]
 8003922:	f000 f8e5 	bl	8003af0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	2220      	movs	r2, #32
 800392a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	2200      	movs	r2, #0
 8003932:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8003936:	2303      	movs	r3, #3
 8003938:	e00f      	b.n	800395a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	69da      	ldr	r2, [r3, #28]
 8003940:	68bb      	ldr	r3, [r7, #8]
 8003942:	4013      	ands	r3, r2
 8003944:	68ba      	ldr	r2, [r7, #8]
 8003946:	429a      	cmp	r2, r3
 8003948:	bf0c      	ite	eq
 800394a:	2301      	moveq	r3, #1
 800394c:	2300      	movne	r3, #0
 800394e:	b2db      	uxtb	r3, r3
 8003950:	461a      	mov	r2, r3
 8003952:	79fb      	ldrb	r3, [r7, #7]
 8003954:	429a      	cmp	r2, r3
 8003956:	d0a6      	beq.n	80038a6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003958:	2300      	movs	r3, #0
}
 800395a:	4618      	mov	r0, r3
 800395c:	3710      	adds	r7, #16
 800395e:	46bd      	mov	sp, r7
 8003960:	bd80      	pop	{r7, pc}
	...

08003964 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003964:	b480      	push	{r7}
 8003966:	b097      	sub	sp, #92	@ 0x5c
 8003968:	af00      	add	r7, sp, #0
 800396a:	60f8      	str	r0, [r7, #12]
 800396c:	60b9      	str	r1, [r7, #8]
 800396e:	4613      	mov	r3, r2
 8003970:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	68ba      	ldr	r2, [r7, #8]
 8003976:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	88fa      	ldrh	r2, [r7, #6]
 800397c:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	88fa      	ldrh	r2, [r7, #6]
 8003984:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	2200      	movs	r2, #0
 800398c:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	689b      	ldr	r3, [r3, #8]
 8003992:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003996:	d10e      	bne.n	80039b6 <UART_Start_Receive_IT+0x52>
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	691b      	ldr	r3, [r3, #16]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d105      	bne.n	80039ac <UART_Start_Receive_IT+0x48>
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80039a6:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80039aa:	e02d      	b.n	8003a08 <UART_Start_Receive_IT+0xa4>
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	22ff      	movs	r2, #255	@ 0xff
 80039b0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80039b4:	e028      	b.n	8003a08 <UART_Start_Receive_IT+0xa4>
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	689b      	ldr	r3, [r3, #8]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d10d      	bne.n	80039da <UART_Start_Receive_IT+0x76>
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	691b      	ldr	r3, [r3, #16]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d104      	bne.n	80039d0 <UART_Start_Receive_IT+0x6c>
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	22ff      	movs	r2, #255	@ 0xff
 80039ca:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80039ce:	e01b      	b.n	8003a08 <UART_Start_Receive_IT+0xa4>
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	227f      	movs	r2, #127	@ 0x7f
 80039d4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80039d8:	e016      	b.n	8003a08 <UART_Start_Receive_IT+0xa4>
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	689b      	ldr	r3, [r3, #8]
 80039de:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80039e2:	d10d      	bne.n	8003a00 <UART_Start_Receive_IT+0x9c>
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	691b      	ldr	r3, [r3, #16]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d104      	bne.n	80039f6 <UART_Start_Receive_IT+0x92>
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	227f      	movs	r2, #127	@ 0x7f
 80039f0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80039f4:	e008      	b.n	8003a08 <UART_Start_Receive_IT+0xa4>
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	223f      	movs	r2, #63	@ 0x3f
 80039fa:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80039fe:	e003      	b.n	8003a08 <UART_Start_Receive_IT+0xa4>
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	2200      	movs	r2, #0
 8003a04:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	2222      	movs	r2, #34	@ 0x22
 8003a14:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	3308      	adds	r3, #8
 8003a1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a20:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a22:	e853 3f00 	ldrex	r3, [r3]
 8003a26:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003a28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a2a:	f043 0301 	orr.w	r3, r3, #1
 8003a2e:	657b      	str	r3, [r7, #84]	@ 0x54
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	3308      	adds	r3, #8
 8003a36:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003a38:	64ba      	str	r2, [r7, #72]	@ 0x48
 8003a3a:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a3c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8003a3e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003a40:	e841 2300 	strex	r3, r2, [r1]
 8003a44:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8003a46:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d1e5      	bne.n	8003a18 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	689b      	ldr	r3, [r3, #8]
 8003a50:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a54:	d107      	bne.n	8003a66 <UART_Start_Receive_IT+0x102>
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	691b      	ldr	r3, [r3, #16]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d103      	bne.n	8003a66 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	4a21      	ldr	r2, [pc, #132]	@ (8003ae8 <UART_Start_Receive_IT+0x184>)
 8003a62:	669a      	str	r2, [r3, #104]	@ 0x68
 8003a64:	e002      	b.n	8003a6c <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	4a20      	ldr	r2, [pc, #128]	@ (8003aec <UART_Start_Receive_IT+0x188>)
 8003a6a:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	691b      	ldr	r3, [r3, #16]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d019      	beq.n	8003aa8 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a7c:	e853 3f00 	ldrex	r3, [r3]
 8003a80:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003a82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a84:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8003a88:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	461a      	mov	r2, r3
 8003a90:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003a92:	637b      	str	r3, [r7, #52]	@ 0x34
 8003a94:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a96:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003a98:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003a9a:	e841 2300 	strex	r3, r2, [r1]
 8003a9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8003aa0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d1e6      	bne.n	8003a74 <UART_Start_Receive_IT+0x110>
 8003aa6:	e018      	b.n	8003ada <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aae:	697b      	ldr	r3, [r7, #20]
 8003ab0:	e853 3f00 	ldrex	r3, [r3]
 8003ab4:	613b      	str	r3, [r7, #16]
   return(result);
 8003ab6:	693b      	ldr	r3, [r7, #16]
 8003ab8:	f043 0320 	orr.w	r3, r3, #32
 8003abc:	653b      	str	r3, [r7, #80]	@ 0x50
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	461a      	mov	r2, r3
 8003ac4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003ac6:	623b      	str	r3, [r7, #32]
 8003ac8:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aca:	69f9      	ldr	r1, [r7, #28]
 8003acc:	6a3a      	ldr	r2, [r7, #32]
 8003ace:	e841 2300 	strex	r3, r2, [r1]
 8003ad2:	61bb      	str	r3, [r7, #24]
   return(result);
 8003ad4:	69bb      	ldr	r3, [r7, #24]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d1e6      	bne.n	8003aa8 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8003ada:	2300      	movs	r3, #0
}
 8003adc:	4618      	mov	r0, r3
 8003ade:	375c      	adds	r7, #92	@ 0x5c
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae6:	4770      	bx	lr
 8003ae8:	08003f6d 	.word	0x08003f6d
 8003aec:	08003db1 	.word	0x08003db1

08003af0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003af0:	b480      	push	{r7}
 8003af2:	b095      	sub	sp, #84	@ 0x54
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003afe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b00:	e853 3f00 	ldrex	r3, [r3]
 8003b04:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003b06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b08:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003b0c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	461a      	mov	r2, r3
 8003b14:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003b16:	643b      	str	r3, [r7, #64]	@ 0x40
 8003b18:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b1a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003b1c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003b1e:	e841 2300 	strex	r3, r2, [r1]
 8003b22:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003b24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d1e6      	bne.n	8003af8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	3308      	adds	r3, #8
 8003b30:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b32:	6a3b      	ldr	r3, [r7, #32]
 8003b34:	e853 3f00 	ldrex	r3, [r3]
 8003b38:	61fb      	str	r3, [r7, #28]
   return(result);
 8003b3a:	69fb      	ldr	r3, [r7, #28]
 8003b3c:	f023 0301 	bic.w	r3, r3, #1
 8003b40:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	3308      	adds	r3, #8
 8003b48:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003b4a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003b4c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b4e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003b50:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003b52:	e841 2300 	strex	r3, r2, [r1]
 8003b56:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003b58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d1e5      	bne.n	8003b2a <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b62:	2b01      	cmp	r3, #1
 8003b64:	d118      	bne.n	8003b98 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	e853 3f00 	ldrex	r3, [r3]
 8003b72:	60bb      	str	r3, [r7, #8]
   return(result);
 8003b74:	68bb      	ldr	r3, [r7, #8]
 8003b76:	f023 0310 	bic.w	r3, r3, #16
 8003b7a:	647b      	str	r3, [r7, #68]	@ 0x44
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	461a      	mov	r2, r3
 8003b82:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003b84:	61bb      	str	r3, [r7, #24]
 8003b86:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b88:	6979      	ldr	r1, [r7, #20]
 8003b8a:	69ba      	ldr	r2, [r7, #24]
 8003b8c:	e841 2300 	strex	r3, r2, [r1]
 8003b90:	613b      	str	r3, [r7, #16]
   return(result);
 8003b92:	693b      	ldr	r3, [r7, #16]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d1e6      	bne.n	8003b66 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2220      	movs	r2, #32
 8003b9c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2200      	movs	r2, #0
 8003baa:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003bac:	bf00      	nop
 8003bae:	3754      	adds	r7, #84	@ 0x54
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb6:	4770      	bx	lr

08003bb8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b084      	sub	sp, #16
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bc4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	2200      	movs	r2, #0
 8003bca:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003bd6:	68f8      	ldr	r0, [r7, #12]
 8003bd8:	f7ff fa44 	bl	8003064 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003bdc:	bf00      	nop
 8003bde:	3710      	adds	r7, #16
 8003be0:	46bd      	mov	sp, r7
 8003be2:	bd80      	pop	{r7, pc}

08003be4 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003be4:	b480      	push	{r7}
 8003be6:	b08f      	sub	sp, #60	@ 0x3c
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003bf0:	2b21      	cmp	r3, #33	@ 0x21
 8003bf2:	d14c      	bne.n	8003c8e <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003bfa:	b29b      	uxth	r3, r3
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d132      	bne.n	8003c66 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c06:	6a3b      	ldr	r3, [r7, #32]
 8003c08:	e853 3f00 	ldrex	r3, [r3]
 8003c0c:	61fb      	str	r3, [r7, #28]
   return(result);
 8003c0e:	69fb      	ldr	r3, [r7, #28]
 8003c10:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003c14:	637b      	str	r3, [r7, #52]	@ 0x34
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	461a      	mov	r2, r3
 8003c1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003c20:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c22:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003c24:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003c26:	e841 2300 	strex	r3, r2, [r1]
 8003c2a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003c2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d1e6      	bne.n	8003c00 <UART_TxISR_8BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	e853 3f00 	ldrex	r3, [r3]
 8003c3e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003c40:	68bb      	ldr	r3, [r7, #8]
 8003c42:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003c46:	633b      	str	r3, [r7, #48]	@ 0x30
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	461a      	mov	r2, r3
 8003c4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c50:	61bb      	str	r3, [r7, #24]
 8003c52:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c54:	6979      	ldr	r1, [r7, #20]
 8003c56:	69ba      	ldr	r2, [r7, #24]
 8003c58:	e841 2300 	strex	r3, r2, [r1]
 8003c5c:	613b      	str	r3, [r7, #16]
   return(result);
 8003c5e:	693b      	ldr	r3, [r7, #16]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d1e6      	bne.n	8003c32 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8003c64:	e013      	b.n	8003c8e <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c6a:	781a      	ldrb	r2, [r3, #0]
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	851a      	strh	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c76:	1c5a      	adds	r2, r3, #1
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003c82:	b29b      	uxth	r3, r3
 8003c84:	3b01      	subs	r3, #1
 8003c86:	b29a      	uxth	r2, r3
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 8003c8e:	bf00      	nop
 8003c90:	373c      	adds	r7, #60	@ 0x3c
 8003c92:	46bd      	mov	sp, r7
 8003c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c98:	4770      	bx	lr

08003c9a <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003c9a:	b480      	push	{r7}
 8003c9c:	b091      	sub	sp, #68	@ 0x44
 8003c9e:	af00      	add	r7, sp, #0
 8003ca0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003ca6:	2b21      	cmp	r3, #33	@ 0x21
 8003ca8:	d151      	bne.n	8003d4e <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003cb0:	b29b      	uxth	r3, r3
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d132      	bne.n	8003d1c <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cbe:	e853 3f00 	ldrex	r3, [r3]
 8003cc2:	623b      	str	r3, [r7, #32]
   return(result);
 8003cc4:	6a3b      	ldr	r3, [r7, #32]
 8003cc6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003cca:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	461a      	mov	r2, r3
 8003cd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003cd4:	633b      	str	r3, [r7, #48]	@ 0x30
 8003cd6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cd8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003cda:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003cdc:	e841 2300 	strex	r3, r2, [r1]
 8003ce0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003ce2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d1e6      	bne.n	8003cb6 <UART_TxISR_16BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cee:	693b      	ldr	r3, [r7, #16]
 8003cf0:	e853 3f00 	ldrex	r3, [r3]
 8003cf4:	60fb      	str	r3, [r7, #12]
   return(result);
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003cfc:	637b      	str	r3, [r7, #52]	@ 0x34
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	461a      	mov	r2, r3
 8003d04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d06:	61fb      	str	r3, [r7, #28]
 8003d08:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d0a:	69b9      	ldr	r1, [r7, #24]
 8003d0c:	69fa      	ldr	r2, [r7, #28]
 8003d0e:	e841 2300 	strex	r3, r2, [r1]
 8003d12:	617b      	str	r3, [r7, #20]
   return(result);
 8003d14:	697b      	ldr	r3, [r7, #20]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d1e6      	bne.n	8003ce8 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8003d1a:	e018      	b.n	8003d4e <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d20:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8003d22:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d24:	881a      	ldrh	r2, [r3, #0]
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d2e:	b292      	uxth	r2, r2
 8003d30:	851a      	strh	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d36:	1c9a      	adds	r2, r3, #2
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003d42:	b29b      	uxth	r3, r3
 8003d44:	3b01      	subs	r3, #1
 8003d46:	b29a      	uxth	r2, r3
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 8003d4e:	bf00      	nop
 8003d50:	3744      	adds	r7, #68	@ 0x44
 8003d52:	46bd      	mov	sp, r7
 8003d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d58:	4770      	bx	lr

08003d5a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003d5a:	b580      	push	{r7, lr}
 8003d5c:	b088      	sub	sp, #32
 8003d5e:	af00      	add	r7, sp, #0
 8003d60:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	e853 3f00 	ldrex	r3, [r3]
 8003d6e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003d70:	68bb      	ldr	r3, [r7, #8]
 8003d72:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003d76:	61fb      	str	r3, [r7, #28]
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	461a      	mov	r2, r3
 8003d7e:	69fb      	ldr	r3, [r7, #28]
 8003d80:	61bb      	str	r3, [r7, #24]
 8003d82:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d84:	6979      	ldr	r1, [r7, #20]
 8003d86:	69ba      	ldr	r2, [r7, #24]
 8003d88:	e841 2300 	strex	r3, r2, [r1]
 8003d8c:	613b      	str	r3, [r7, #16]
   return(result);
 8003d8e:	693b      	ldr	r3, [r7, #16]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d1e6      	bne.n	8003d62 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2220      	movs	r2, #32
 8003d98:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003da0:	6878      	ldr	r0, [r7, #4]
 8003da2:	f7fc fcdd 	bl	8000760 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003da6:	bf00      	nop
 8003da8:	3720      	adds	r7, #32
 8003daa:	46bd      	mov	sp, r7
 8003dac:	bd80      	pop	{r7, pc}
	...

08003db0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b09c      	sub	sp, #112	@ 0x70
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8003dbe:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003dc8:	2b22      	cmp	r3, #34	@ 0x22
 8003dca:	f040 80be 	bne.w	8003f4a <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8003dd4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003dd8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8003ddc:	b2d9      	uxtb	r1, r3
 8003dde:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8003de2:	b2da      	uxtb	r2, r3
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003de8:	400a      	ands	r2, r1
 8003dea:	b2d2      	uxtb	r2, r2
 8003dec:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003df2:	1c5a      	adds	r2, r3, #1
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003dfe:	b29b      	uxth	r3, r3
 8003e00:	3b01      	subs	r3, #1
 8003e02:	b29a      	uxth	r2, r3
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003e10:	b29b      	uxth	r3, r3
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	f040 80a3 	bne.w	8003f5e <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e1e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003e20:	e853 3f00 	ldrex	r3, [r3]
 8003e24:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003e26:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003e28:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003e2c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	461a      	mov	r2, r3
 8003e34:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003e36:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003e38:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e3a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003e3c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003e3e:	e841 2300 	strex	r3, r2, [r1]
 8003e42:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003e44:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d1e6      	bne.n	8003e18 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	3308      	adds	r3, #8
 8003e50:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e54:	e853 3f00 	ldrex	r3, [r3]
 8003e58:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003e5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e5c:	f023 0301 	bic.w	r3, r3, #1
 8003e60:	667b      	str	r3, [r7, #100]	@ 0x64
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	3308      	adds	r3, #8
 8003e68:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8003e6a:	647a      	str	r2, [r7, #68]	@ 0x44
 8003e6c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e6e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003e70:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003e72:	e841 2300 	strex	r3, r2, [r1]
 8003e76:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003e78:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d1e5      	bne.n	8003e4a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2220      	movs	r2, #32
 8003e82:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2200      	movs	r2, #0
 8003e8a:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2200      	movs	r2, #0
 8003e90:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4a34      	ldr	r2, [pc, #208]	@ (8003f68 <UART_RxISR_8BIT+0x1b8>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d01f      	beq.n	8003edc <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d018      	beq.n	8003edc <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003eb2:	e853 3f00 	ldrex	r3, [r3]
 8003eb6:	623b      	str	r3, [r7, #32]
   return(result);
 8003eb8:	6a3b      	ldr	r3, [r7, #32]
 8003eba:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003ebe:	663b      	str	r3, [r7, #96]	@ 0x60
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	461a      	mov	r2, r3
 8003ec6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003ec8:	633b      	str	r3, [r7, #48]	@ 0x30
 8003eca:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ecc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003ece:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003ed0:	e841 2300 	strex	r3, r2, [r1]
 8003ed4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003ed6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d1e6      	bne.n	8003eaa <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ee0:	2b01      	cmp	r3, #1
 8003ee2:	d12e      	bne.n	8003f42 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ef0:	693b      	ldr	r3, [r7, #16]
 8003ef2:	e853 3f00 	ldrex	r3, [r3]
 8003ef6:	60fb      	str	r3, [r7, #12]
   return(result);
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	f023 0310 	bic.w	r3, r3, #16
 8003efe:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	461a      	mov	r2, r3
 8003f06:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003f08:	61fb      	str	r3, [r7, #28]
 8003f0a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f0c:	69b9      	ldr	r1, [r7, #24]
 8003f0e:	69fa      	ldr	r2, [r7, #28]
 8003f10:	e841 2300 	strex	r3, r2, [r1]
 8003f14:	617b      	str	r3, [r7, #20]
   return(result);
 8003f16:	697b      	ldr	r3, [r7, #20]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d1e6      	bne.n	8003eea <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	69db      	ldr	r3, [r3, #28]
 8003f22:	f003 0310 	and.w	r3, r3, #16
 8003f26:	2b10      	cmp	r3, #16
 8003f28:	d103      	bne.n	8003f32 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	2210      	movs	r2, #16
 8003f30:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003f38:	4619      	mov	r1, r3
 8003f3a:	6878      	ldr	r0, [r7, #4]
 8003f3c:	f7ff f89c 	bl	8003078 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003f40:	e00d      	b.n	8003f5e <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8003f42:	6878      	ldr	r0, [r7, #4]
 8003f44:	f7fc fc22 	bl	800078c <HAL_UART_RxCpltCallback>
}
 8003f48:	e009      	b.n	8003f5e <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	8b1b      	ldrh	r3, [r3, #24]
 8003f50:	b29a      	uxth	r2, r3
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f042 0208 	orr.w	r2, r2, #8
 8003f5a:	b292      	uxth	r2, r2
 8003f5c:	831a      	strh	r2, [r3, #24]
}
 8003f5e:	bf00      	nop
 8003f60:	3770      	adds	r7, #112	@ 0x70
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bd80      	pop	{r7, pc}
 8003f66:	bf00      	nop
 8003f68:	40008000 	.word	0x40008000

08003f6c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b09c      	sub	sp, #112	@ 0x70
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8003f7a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003f84:	2b22      	cmp	r3, #34	@ 0x22
 8003f86:	f040 80be 	bne.w	8004106 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8003f90:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f98:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8003f9a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8003f9e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8003fa2:	4013      	ands	r3, r2
 8003fa4:	b29a      	uxth	r2, r3
 8003fa6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003fa8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fae:	1c9a      	adds	r2, r3, #2
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003fba:	b29b      	uxth	r3, r3
 8003fbc:	3b01      	subs	r3, #1
 8003fbe:	b29a      	uxth	r2, r3
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003fcc:	b29b      	uxth	r3, r3
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	f040 80a3 	bne.w	800411a <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fda:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003fdc:	e853 3f00 	ldrex	r3, [r3]
 8003fe0:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8003fe2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003fe4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003fe8:	667b      	str	r3, [r7, #100]	@ 0x64
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	461a      	mov	r2, r3
 8003ff0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003ff2:	657b      	str	r3, [r7, #84]	@ 0x54
 8003ff4:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ff6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8003ff8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003ffa:	e841 2300 	strex	r3, r2, [r1]
 8003ffe:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8004000:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004002:	2b00      	cmp	r3, #0
 8004004:	d1e6      	bne.n	8003fd4 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	3308      	adds	r3, #8
 800400c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800400e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004010:	e853 3f00 	ldrex	r3, [r3]
 8004014:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004016:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004018:	f023 0301 	bic.w	r3, r3, #1
 800401c:	663b      	str	r3, [r7, #96]	@ 0x60
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	3308      	adds	r3, #8
 8004024:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004026:	643a      	str	r2, [r7, #64]	@ 0x40
 8004028:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800402a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800402c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800402e:	e841 2300 	strex	r3, r2, [r1]
 8004032:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004034:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004036:	2b00      	cmp	r3, #0
 8004038:	d1e5      	bne.n	8004006 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2220      	movs	r2, #32
 800403e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2200      	movs	r2, #0
 8004046:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2200      	movs	r2, #0
 800404c:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4a34      	ldr	r2, [pc, #208]	@ (8004124 <UART_RxISR_16BIT+0x1b8>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d01f      	beq.n	8004098 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004062:	2b00      	cmp	r3, #0
 8004064:	d018      	beq.n	8004098 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800406c:	6a3b      	ldr	r3, [r7, #32]
 800406e:	e853 3f00 	ldrex	r3, [r3]
 8004072:	61fb      	str	r3, [r7, #28]
   return(result);
 8004074:	69fb      	ldr	r3, [r7, #28]
 8004076:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800407a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	461a      	mov	r2, r3
 8004082:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004084:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004086:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004088:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800408a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800408c:	e841 2300 	strex	r3, r2, [r1]
 8004090:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004092:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004094:	2b00      	cmp	r3, #0
 8004096:	d1e6      	bne.n	8004066 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800409c:	2b01      	cmp	r3, #1
 800409e:	d12e      	bne.n	80040fe <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2200      	movs	r2, #0
 80040a4:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	e853 3f00 	ldrex	r3, [r3]
 80040b2:	60bb      	str	r3, [r7, #8]
   return(result);
 80040b4:	68bb      	ldr	r3, [r7, #8]
 80040b6:	f023 0310 	bic.w	r3, r3, #16
 80040ba:	65bb      	str	r3, [r7, #88]	@ 0x58
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	461a      	mov	r2, r3
 80040c2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80040c4:	61bb      	str	r3, [r7, #24]
 80040c6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040c8:	6979      	ldr	r1, [r7, #20]
 80040ca:	69ba      	ldr	r2, [r7, #24]
 80040cc:	e841 2300 	strex	r3, r2, [r1]
 80040d0:	613b      	str	r3, [r7, #16]
   return(result);
 80040d2:	693b      	ldr	r3, [r7, #16]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d1e6      	bne.n	80040a6 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	69db      	ldr	r3, [r3, #28]
 80040de:	f003 0310 	and.w	r3, r3, #16
 80040e2:	2b10      	cmp	r3, #16
 80040e4:	d103      	bne.n	80040ee <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	2210      	movs	r2, #16
 80040ec:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80040f4:	4619      	mov	r1, r3
 80040f6:	6878      	ldr	r0, [r7, #4]
 80040f8:	f7fe ffbe 	bl	8003078 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80040fc:	e00d      	b.n	800411a <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 80040fe:	6878      	ldr	r0, [r7, #4]
 8004100:	f7fc fb44 	bl	800078c <HAL_UART_RxCpltCallback>
}
 8004104:	e009      	b.n	800411a <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	8b1b      	ldrh	r3, [r3, #24]
 800410c:	b29a      	uxth	r2, r3
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f042 0208 	orr.w	r2, r2, #8
 8004116:	b292      	uxth	r2, r2
 8004118:	831a      	strh	r2, [r3, #24]
}
 800411a:	bf00      	nop
 800411c:	3770      	adds	r7, #112	@ 0x70
 800411e:	46bd      	mov	sp, r7
 8004120:	bd80      	pop	{r7, pc}
 8004122:	bf00      	nop
 8004124:	40008000 	.word	0x40008000

08004128 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004128:	b480      	push	{r7}
 800412a:	b083      	sub	sp, #12
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004130:	bf00      	nop
 8004132:	370c      	adds	r7, #12
 8004134:	46bd      	mov	sp, r7
 8004136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413a:	4770      	bx	lr

0800413c <memset>:
 800413c:	4402      	add	r2, r0
 800413e:	4603      	mov	r3, r0
 8004140:	4293      	cmp	r3, r2
 8004142:	d100      	bne.n	8004146 <memset+0xa>
 8004144:	4770      	bx	lr
 8004146:	f803 1b01 	strb.w	r1, [r3], #1
 800414a:	e7f9      	b.n	8004140 <memset+0x4>

0800414c <__libc_init_array>:
 800414c:	b570      	push	{r4, r5, r6, lr}
 800414e:	4d0d      	ldr	r5, [pc, #52]	@ (8004184 <__libc_init_array+0x38>)
 8004150:	4c0d      	ldr	r4, [pc, #52]	@ (8004188 <__libc_init_array+0x3c>)
 8004152:	1b64      	subs	r4, r4, r5
 8004154:	10a4      	asrs	r4, r4, #2
 8004156:	2600      	movs	r6, #0
 8004158:	42a6      	cmp	r6, r4
 800415a:	d109      	bne.n	8004170 <__libc_init_array+0x24>
 800415c:	4d0b      	ldr	r5, [pc, #44]	@ (800418c <__libc_init_array+0x40>)
 800415e:	4c0c      	ldr	r4, [pc, #48]	@ (8004190 <__libc_init_array+0x44>)
 8004160:	f000 f818 	bl	8004194 <_init>
 8004164:	1b64      	subs	r4, r4, r5
 8004166:	10a4      	asrs	r4, r4, #2
 8004168:	2600      	movs	r6, #0
 800416a:	42a6      	cmp	r6, r4
 800416c:	d105      	bne.n	800417a <__libc_init_array+0x2e>
 800416e:	bd70      	pop	{r4, r5, r6, pc}
 8004170:	f855 3b04 	ldr.w	r3, [r5], #4
 8004174:	4798      	blx	r3
 8004176:	3601      	adds	r6, #1
 8004178:	e7ee      	b.n	8004158 <__libc_init_array+0xc>
 800417a:	f855 3b04 	ldr.w	r3, [r5], #4
 800417e:	4798      	blx	r3
 8004180:	3601      	adds	r6, #1
 8004182:	e7f2      	b.n	800416a <__libc_init_array+0x1e>
 8004184:	080041fc 	.word	0x080041fc
 8004188:	080041fc 	.word	0x080041fc
 800418c:	080041fc 	.word	0x080041fc
 8004190:	08004200 	.word	0x08004200

08004194 <_init>:
 8004194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004196:	bf00      	nop
 8004198:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800419a:	bc08      	pop	{r3}
 800419c:	469e      	mov	lr, r3
 800419e:	4770      	bx	lr

080041a0 <_fini>:
 80041a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041a2:	bf00      	nop
 80041a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041a6:	bc08      	pop	{r3}
 80041a8:	469e      	mov	lr, r3
 80041aa:	4770      	bx	lr
